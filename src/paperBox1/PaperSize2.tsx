import { MINUS } from "ts3dutils"

export type PaperSizeTuple = [width: number, height: number, name: string]
export class PaperSize {
  static A4 = new PaperSize(210, 297, "A4")

  constructor(
    public readonly width: number,
    public readonly height: number,
    public readonly name: string,
  ) {
    if (width > height) throw new Error("not portrait")
  }

  /**
   * Paper Size from string as generated by toString().
   */
  static fromString(str: string) {
    const byName = ALL_PAPER_SIZES.find(([, , name]) => name === str)
    if (byName) return byName
    const [a, b] = str.split("x")
    return new PaperSize(+a, +b, "Custom")
  }

  private static fromTuple([a, b, name]: PaperSizeTuple): PaperSize {
    return new PaperSize(a, b, name)
  }

  public static fromDimensions(a: number, b: number): PaperSize {
    ;[a, b] = [a, b].sort(MINUS)
    return (
      ALL_PAPER_SIZES.find(
        ({ width, height }) => width === a && height === b,
      ) ?? new PaperSize(a, b, "Custom")
    )
  }

  private asTuple(): PaperSizeTuple {
    return [this.width, this.height, this.name]
  }
  toString(): string {
    return this.name !== "Custom"
      ? this.name
      : "" + this.width + "x" + this.height
  }

  *[Symbol.iterator]() {
    yield this.width
    yield this.height
    yield this.name
  }

  equals(other: unknown): other is PaperSize {
    return (
      this === other ||
      (other instanceof PaperSize &&
        this.width === other.width &&
        this.height === other.height)
    )
  }
}

export const PAPER_SIZE_A4 = PaperSize.A4

// Always portrait orientation,
export const PAPER_SIZES_A: PaperSize[] = [
  new PaperSize(841, 1189, "A0"),
  new PaperSize(594, 841, "A1"),
  new PaperSize(420, 594, "A2"),
  new PaperSize(297, 420, "A3"),
  PaperSize.A4,
  new PaperSize(148, 210, "A5"),
  new PaperSize(105, 148, "A6"),
  new PaperSize(74, 105, "A7"),
  new PaperSize(52, 74, "A8"),
  new PaperSize(37, 52, "A9"),
  new PaperSize(26, 37, "A10"),
]

export function PaperSizeEquals([aw, ah]: PaperSize, [bw, bh]: PaperSize) {
  return aw === bw && bh === bw
}

export const PAPER_SIZES_B: PaperSize[] = [
  new PaperSize(1000, 1414, "C0"),
  new PaperSize(707, 1000, "C1"),
  new PaperSize(500, 707, "C2"),
  new PaperSize(353, 500, "C3"),
  new PaperSize(250, 353, "C4"),
  new PaperSize(176, 250, "C5"),
  new PaperSize(125, 176, "C6"),
  new PaperSize(88, 125, "C7"),
  new PaperSize(62, 88, "C8"),
  new PaperSize(44, 62, "C9"),
  new PaperSize(31, 44, "C10"),
]

// C size envelopes fit A size paper.
export const PAPER_SIZES_C: PaperSize[] = [
  new PaperSize(917, 1297, "C0"),
  new PaperSize(648, 917, "C1"),
  new PaperSize(458, 648, "C2"),
  new PaperSize(324, 458, "C3"),
  new PaperSize(229, 324, "C4"),
  new PaperSize(162, 229, "C5"),
  new PaperSize(114, 162, "C6"),
  new PaperSize(81, 114, "C7"),
  new PaperSize(57, 81, "C8"),
  new PaperSize(40, 57, "C9"),
  new PaperSize(28, 40, "C10"),
]
export const PAPER_SIZES: PaperSize[] = [
  ...PAPER_SIZES_A,
  new PaperSize(150, 150, "Origami 15cm"),
  new PaperSize(100, 100, "Origami 10cm"),
  new PaperSize(75, 75, "Origami 7.5cm"),
  new PaperSize(215.9, 279.4, "Letter"),
  new PaperSize(215.9, 355.6, "Legal"),
]

export const ALL_PAPER_SIZES: PaperSize[] = [
  ...PAPER_SIZES,
  ...PAPER_SIZES_C,
  ...PAPER_SIZES_B,
]

export function PaperSizeFromDimensions(a: number, b: number) {
  ;[a, b] = [a, b].sort(MINUS)
  return (
    ALL_PAPER_SIZES.find(([x, y]) => x === a && y === b) ?? [a, b, "Custom"]
  )
}
