(self.webpackChunkworkshop=self.webpackChunkworkshop||[]).push([[892],{9248:(n,c,e)=>{"use strict";e.d(c,{q:()=>o});class o{__init(){this.count=0}__init2(){this.lastTime=performance.now()}constructor(n,c=10){this.notify=n,this.window=c,o.prototype.__init.call(this),o.prototype.__init2.call(this)}tick(n=performance.now()){const c=this.window;if(this.count=(this.count+1)%c,0===this.count){const e=Math.floor(1e3*c/(n-this.lastTime));this.notify(e),this.lastTime=n}}}},3671:(n,c,e)=>{"use strict";e.d(c,{PM:()=>t,Qn:()=>a,X$:()=>s,XJ:()=>E,YQ:()=>m,_x:()=>i,hv:()=>_,kC:()=>R,li:()=>A,nl:()=>I,oe:()=>l,q3:()=>r,t1:()=>L});var o=e(9526),v=e(2182);const t=25.4,s=n=>(0,v.At)(n/v.Co,-1)+"Â°",E=(n,c)=>c/2/Math.sin(v.gc/n/2),a=(n,c)=>2*c*Math.sin(v.gc/n/2),r=(n,c)=>c/2/Math.tan(v.gc/n/2),l=(n,c)=>c/Math.cos(v.gc/n/2),i=(n,c)=>2*c*Math.tan(v.gc/n/2);function _({sides:n,radius:c,startAngle:e=0,sideLength:t,...s}){if(void 0!==t==(void 0!==c))throw new Error("must set either sideLength or radius");void 0===c&&(c=E(n,t));const{x:a,y:r}=v.V3.polar(c,e);return o.createElement("path",{d:I`
        M${a},${r}
        ${(0,v.hS)(0,n).map((o=>I`L${v.V3.polar(c,e+o*(v.gc/n))}`))}Z`,...s})}function R({id:n,children:c,count:e,stepDeg:t}){return o.createElement(o.Fragment,null,o.createElement("g",{id:n},c),(0,v.hS)(0,e-1).map((c=>o.createElement("use",{key:c,href:"#"+n,transform:`rotate(${(c+1)*t} 0 0)`}))))}const A=[[841,1189,"A0"],[594,841,"A1"],[420,594,"A2"],[297,420,"A3"],[210,297,"A4"],[148,210,"A5"],[105,148,"A6"],[74,105,"A7"],[52,74,"A8"],[37,52,"A9"],[26,37,"A10"],[150,150,"Origami 15cm"],[100,100,"Origami 10cm"],[75,75,"Origami 7.5cm"],[215.9,279.4,"Letter"],[215.9,355.6,"Legal"]],L=A.find((([,,n])=>n.includes("A4")));function I(n,...c){const e=n=>"number"==typeof n?""+n:"string"==typeof n?n:Array.isArray(n)?n.map(e).join(" "):n.x+","+n.y;let o=n[0];for(let v=0;v<c.length;v++)o+=e(c[v]),o+=n[v+1];return o}const m=n=>{const c=window.open(n,"_blank","noopener,noreferrer");c&&(c.opener=null)}},3192:(n,c,e)=>{"use strict";e.d(c,{XM:()=>T,tz:()=>N,A0:()=>u});var o=e(4625),v=e(8356),t=e(5069),s=e(4353),E=e(3120),a=e(8105),r=e(9309),l=e(897),i=e(8051),_=e(7392),R=e(9526),A=e(5583),L=e(2004),I=e(9248),m=e(3671);function f(n){let c,e=n[0],o=1;for(;o<n.length;){const v=n[o],t=n[o+1];if(o+=2,("optionalAccess"===v||"optionalCall"===v)&&null==e)return;"access"===v||"optionalAccess"===v?(c=e,e=t(e)):"call"!==v&&"optionalCall"!==v||(e=t(((...n)=>e.call(c,...n))),c=void 0)}return e}function T({sx:n,animate:c,state:e,Renderer:i,focusable:_,rendererRef:A}){const L=(0,R.useRef)(),[I,f]=(0,R.useState)(),[T,u]=(0,R.useState)(),O=(0,R.useCallback)((async n=>{const c=n.currentTarget.dataset.dim.split("x").map((n=>+n));if(f(void 0),L.current)try{const n=URL.createObjectURL(await L.current.renderImage(c,u));u(void 0),(0,m.YQ)(n)}catch(n){console.error(n)}}),[]);(0,R.useEffect)((()=>{A&&(A.current=L.current)}),[A]);const D=(0,R.useCallback)((n=>f(n.currentTarget)),[]),d=(0,R.useCallback)((()=>f(void 0)),[]);return R.createElement(t.Z,{sx:{...n,position:"relative"}},R.createElement(r.Z,{open:!!I,anchorEl:I,onClose:d},R.createElement(l.Z,{"data-dim":"1920x1080",onClick:O},"Render HD"),R.createElement(l.Z,{"data-dim":"3840x2160 ",onClick:O},"Render 4K")),R.createElement(v.Z,{sx:{position:"absolute",margin:1,right:0}},void 0!==T?R.createElement(E.Z,{variant:"determinate",value:100*T}):R.createElement(a.Z,{size:"small",onClick:D},R.createElement(o.Z,null))),R.createElement(s.Z,{component:N,Renderer:i,animate:c,state:e,rendererRef:L,focusable:_,sx:{width:"100%",height:"100%"}}))}const N=({Renderer:n,onFps:c,animate:e,state:o,rendererRef:v,focusable:t})=>{const s=(0,R.useRef)(null),E=(0,R.useRef)();(0,R.useEffect)((()=>(s.current&&(E.current=new n(s.current,c),E.current.start(),v&&(v.current=E.current)),()=>{E.current&&E.current.destroy()})),[n,c,v]);const a=(0,i.Z)();return(0,R.useEffect)((()=>{E.current&&Object.assign(E.current.dyn,{colorBackground:_.iv(a.palette.background.default).gl(),colorPrimary:_.iv(a.palette.primary.main).gl(),colorSecondary:_.iv(a.palette.secondary.main).gl()})}),[a.palette]),(0,R.useEffect)((()=>{E.current&&(E.current.animate=e)}),[e]),(0,R.useEffect)((()=>{E.current&&Object.assign(E.current.dyn,o)}),[o]),R.createElement("canvas",{ref:s,style:{width:"100%",height:"100%"}})};class u{__init(){this.mousePos=[-1,-1]}__init2(){this.dyn={}}__init3(){this.animate=!0}constructor(n,c,e){this.fragShader=n,this.canvas=c,u.prototype.__init.call(this),u.prototype.__init2.call(this),u.prototype.__init3.call(this),u.prototype.__init4.call(this);const o=L.ZG.create({canvas:c,alpha:!0,premultipliedAlpha:!0});this.gl=o,0!==this.canvas.clientWidth&&o.fixCanvasRes(1),o.canvas.addEventListener("mouseleave",(n=>{this.mousePos=[-1,-1]})),o.canvas.addEventListener("mousemove",(n=>{const c=n.currentTarget,{width:e,height:o}=c.getBoundingClientRect();this.mousePos=[c.width*(n.offsetX/e),c.height*(1-n.offsetY/o)]})),this.planeMesh=L.Kj.plane({startX:-1,startY:-1,width:2,height:2}),this.planeMesh.compile(o),this.fpsController=e&&new I.q(e),this.updateShader()}updateShader(){this.buildShader(e(7962).Z,this.fragShader())}__init4(){this.buildShader=function(n){let c,e=[];return function(...o){return(e.length!==o.length||e.some(((n,c)=>n!==o[c])))&&(e=o,c=n(...o)),c}}(((n,c)=>{try{this.shader&&this.gl.deleteProgram(this.shader.program),this.shader=L.ex.create(n,c)}catch(n){if(console.clear(),console.error(n),!this.shader)throw n}}))}start(){this.gl.animate(this.render.bind(this))}render(n){this.gl.makeCurrent(),this.updateShader(),f([this,"access",n=>n.fpsController,"optionalAccess",n=>n.tick,"call",c=>c(n)]),this.shader&&this.shader.uniforms({iResolution:[this.gl.canvas.width,this.gl.canvas.height],iMouse:this.mousePos,iTime:this.animate?n/1e3:0}).uniforms(this.dyn).uniforms(this.uniforms()).draw(this.planeMesh)}destroy(){}async renderImage([n,c],e){f([e,"optionalCall",n=>n(0)]),await(0,A.Z)(10);const o=document.createElement("canvas");o.width=n,o.height=c;const v=new this.constructor(o);Object.assign(v.dyn,this.dyn);const t=256,s=v.gl;s.enable(s.SCISSOR_TEST);let E=0;for(let o=0;o<n;o+=t)for(let a=0;a<c;a+=t){const r=Math.min(t,n-o),l=Math.min(t,c-a);s.scissor(o,a,r,l),v.render(0),await(0,A.Z)(0),E+=r*l,f([e,"optionalCall",e=>e(E/(n*c))])}return new Promise(((n,c)=>o.toBlob((e=>e?n(e):c("error creating png from canvas")),"png")))}uniforms(){return{}}}},1070:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>r});var o=e(871),v=e(9526),t=e(2004),s=e(3192);const E=e.p+"551166c03df33a2dcfd3.png";function a({frag:n,sx:c,animate:o,state:a}){const r=(0,v.useCallback)(class extends s.A0{constructor(c,o){super((()=>e(3016)("./"+n+".frag").default),c,o),this.tex=t.xE.fromURLSwitch(E,void 0,this.gl)}},[n]);return v.createElement(s.XM,{sx:c,Renderer:r,animate:o,state:a})}const r=()=>v.createElement(o.ZP,{container:!0,style:{height:"99%"},spacing:2,padding:2},["demoRectangle","demoText","demoNgon","demoHexagon","demoOctagon","demoTriIso","demoArrow","demoHeart","demoTriEqui","demoSegment","demoTri","demoArc"].map((n=>v.createElement(o.ZP,{key:n,item:!0,xs:12,md:6,lg:4},v.createElement(a,{frag:n,sx:{height:300},animate:!0,state:{}})))))},7962:(n,c,e)=>{"use strict";e.d(c,{Z:()=>o});const o="#version 300 es\nprecision highp float;\n\nin vec4 ts_Vertex;\nin vec2 ts_TexCoord;\nout vec2 coord;\nvoid main() {\n  gl_Position = ts_Vertex;\n  coord = ts_TexCoord;\n}\n"},3427:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o="#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdArc.glsl\n// START ../../common/toPolar.glsl\n// START ./unmix.glsl\nfloat unmix(float a, float b, float value) {\n  return (value - a) / (b - a);\n}\n\n// #pragma glslify: export(unmix)\n\n\n// END ./unmix.glsl\n\nvec2 toPolar(vec2 xy) {\n  return vec2(length(xy), atan(xy.y, xy.x));\n}\n\nmat2 toPolarDerivate(vec2 xy) {\n  return mat2(xy.x * xy.x, xy.y * xy.y, -xy.y, xy.x) / dot(xy, xy);\n}\n\n// #pragma glslify: export(toPolar)\n\n\n// END ../../common/toPolar.glsl\n// START ../../common/fromPolar.glsl\n\n\nvec3 fromPolar(float radius, float phi, float z) {\n  return vec3(radius * cos(phi), radius * sin(phi), z);\n}\n\nvec2 fromPolar(float radius, float phi) {\n  return vec2(radius * cos(phi), radius * sin(phi));\n}\n\nvec2 fromPolar(vec2 polar) {\n  return fromPolar(polar.x, polar.y);\n}\n\n// #pragma glslify: export(fromPolar)\n\n\n// END ../../common/fromPolar.glsl\n\nfloat sdArc(float angle, vec2 p) {\n  vec2 polar = toPolar(p);\n  vec2 closestPolar = vec2(polar.x = 1.0, clamp(polar.y, -angle, angle));\n  vec2 closest = fromPolar(closestPolar);\n  return distance(closest, p);\n}\n\nfloat sdArc(float angle, float radius, float thickness, vec2 p) {\n  return sdArc(angle, p / radius) * radius - 0.5 * thickness;\n}\n\n// #pragma glslify: export(sdArc)\n\n\n// END ../common/sdf2d/sdArc.glsl\n\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 x) {\n  return sdArc(2.8, 6.0, 3.0, x);\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n"},5412:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o="#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdArrow.glsl\n// START ./sdTriangleIsosceles.glsl\n/**\n * Signed distance function (SDF) of an isosceles triangle (two sides same\n * length). One corner is at the origin. Another corner is the passed point\n * `q`.The triangle is symmetric along the Y axis.\n *\n * `q.x` must be positive.\n *\n * ```\n * ______q\n * \\    /\n *  \\  /\n *   \\/\n *    0\n * ```\n */\nfloat sdTriangleIsosceles(vec2 q, vec2 p) {\n  // Mirror vertically; p is then always on right.\n  p.x = abs(p.x);\n\n  // Same as sdTriangle but simplified.\n  vec2 a = p - q * clamp(dot(p, q) / dot(q, q), 0.0, 1.0);\n  vec2 b = p - q * vec2(clamp(p.x / q.x, 0.0, 1.0), 1.0);\n  float s = -sign(q.y);\n  vec2 d = min(\n    vec2(dot(a, a), s * (p.x * q.y - p.y * q.x)),\n    vec2(dot(b, b), s * (p.y - q.y))\n  );\n  return -sqrt(d.x) * sign(d.y);\n}\n\n// END ./sdTriangleIsosceles.glsl\n// START ./sdRectangle.glsl\nfloat sdRectangle(vec2 dim, vec2 p) {\n  vec2 d = abs(p) - 0.5 * dim;\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdRectangle(float width, float height, vec2 p) {\n  return sdRectangle(vec2(width, height), p);\n}\n\n\n// END ./sdRectangle.glsl\n\n/**\n * Signed distance function (SDF) of an arrow from the origin along the positive\n * x axis.\n *\n * The arrow goes from O to (length, 0). The base width is 0.1 (of the shaft)\n * and it can be scaled with the width parameter.\n */\nfloat sdArrow(float length, float width, vec2 p) {\n  float r = 0.001;\n  return min(\n    sdRectangle(length - 0.1, 0.1 * width, p - vec2(0.5 * (length - 0.1), 0.0)),\n    sdTriangleIsosceles(vec2(0.1 * width, -0.2), p.yx - vec2(0, length))\n  );\n}\nfloat sdArrow(vec2 p) {\n  return sdArrow(1.0, 1.0, p);\n}\n\n// END ../common/sdf2d/sdArrow.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nuniform float a;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 p) {\n  return sdArrow(\n    1.0 + 0.5 * sin(0.2 * iTime),\n    1.0 + 0.5 * sin(iTime),\n    (p + vec2(25, 0)) / 50.0\n  ) *\n  50.0;\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n"},8371:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o='#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdHeart.glsl\nconst float SQRT2 = sqrt(2.0);\nconst float SQRT1_2 = sqrt(1.0 / 2.0);\n\n/**\n * Signed distance function (SDF) of a simple heart constructed from two\n * semi-circles and 2 segments.\n *\n * The tip of the heart is at the origin. The "lobes" have centers at (+-0.25,\n * 0.75) and radius SQRT(2)/4.\n */\nfloat sdHeart(vec2 p) {\n  // Mirror vertically; p is then always on right.\n  p.x = abs(p.x);\n\n  if (p.y + p.x > 1.0) return distance(p, vec2(0.25, 0.75)) - SQRT2 / 4.0;\n  return min(\n    distance(p, vec2(0.0, 1.0)),\n    length(p - 0.5 * max(p.x + p.y, 0.0))\n  ) *\n  sign(p.x - p.y);\n}\nfloat sdHeart(float a, vec2 p) {\n  return sdHeart(p / a) * a;\n}\n\n// #pragma glslify: export(sdHeart)\n\n\n// END ../common/sdf2d/sdHeart.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/fromPolar.glsl\n// START ./unmix.glsl\nfloat unmix(float a, float b, float value) {\n  return (value - a) / (b - a);\n}\n\n// #pragma glslify: export(unmix)\n\n\n// END ./unmix.glsl\n\nvec3 fromPolar(float radius, float phi, float z) {\n  return vec3(radius * cos(phi), radius * sin(phi), z);\n}\n\nvec2 fromPolar(float radius, float phi) {\n  return vec2(radius * cos(phi), radius * sin(phi));\n}\n\nvec2 fromPolar(vec2 polar) {\n  return fromPolar(polar.x, polar.y);\n}\n\n// #pragma glslify: export(fromPolar)\n\n\n// END ../common/fromPolar.glsl\n\n// START ./vizz.glsl\n\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nuniform float a, b, c, d;\nin vec2 coord;\nout vec4 fragColor;\n\n//vec3 vizz(float val) {\n//  vec3 color0 = ungamma(colorBackground);\n//  vec3 color1 = ungamma(colorPrimary);\n//  vec3 color2 = ungamma(colorSecondary);\n//  vec3 cc = val >= 0.0 ? color1 : color2;\n//  float v = fract(0.5 * abs(val));\n//  v = abs(v - 0.5);\n//  return mix(cc, color0, smoothstep(0.2, 0.3, v));\n//}\n/**\n * Renders a transform of a coordinate system as a line grid.\n *\n * E.g.\n *\n * `p` should be p(fragCoord)\n *\n * and\n *\n * `scale` should be dp/dx(fragCoord)\n *\n * For a linear transformation (mat2 mi), you pass\n * `lineGrid(mi * fragCoord, mi)`\n */\nfloat lineGrid(vec2 p, mat2 scale) {\n  //  p -= 0.5;\n  vec2 pCenter = round(p);\n  vec2 gradX = vec2(1, 0) * scale;\n  vec2 gradY = vec2(0, 1) * scale;\n  vec2 d = abs(p - pCenter);\n  float m = min(d.x / length(gradX), d.y / length(gradY));\n  //  return float(m < 3.0);\n  return smoothstep(-1.5, -0.0, -m);\n}\nfloat bez3(float a, float b, float c, float d, float t) {\n  float s = 1.0 - t;\n  return s * s * s * a +\n  3.0 * s * s * t * b +\n  3.0 * s * t * t * c +\n  t * t * t * d;\n}\nfloat heartbeat(float t) {\n  t = fract(t);\n  if (t < 0.0) {\n    return 0.0;\n  } else if (t < 0.03) {\n    return bez3(0.0, 0.0, 0.5 + a, 0.5, unmix(0.0, 0.03, t));\n    float x = t;\n    return a * x * x * x + b * x * x + c * x + d;\n  } else if (t < 0.07) {\n    return bez3(0.5, 0.5 + b, c, -0.14, unmix(0.03, 0.07, t));\n  } else if (t < 0.1) {\n    return bez3(-0.14, d, 0.0, 0.0, unmix(0.07, 0.1, t));\n  } else {\n    return 0.0;\n  }\n  //50, 110, 150\n}\nfloat heartbeat2(float t) {\n  t = fract(t);\n  float mask;\n  if (t < 0.0) {\n    mask = 0.0;\n  } else if (t < 0.05) {\n    mask = t / 0.05;\n  } else if (t < 0.07) {\n    mask = mix(1.0, 0.2, unmix(0.05, 0.07, t));\n  } else if (t < 0.1) {\n    mask = mix(0.2, 0.0, unmix(0.07, 0.1, t));\n  } else {\n    mask = 0.0;\n  }\n  //  return mask;\n  return mask * -sin(t * (1.5 * 6.28) / 0.1);\n  return -sin(t * (1.5 * 6.28) / 0.1);\n  return sin(t / (1.5 * 6.28) * 0.1);\n  //50, 110, 150\n}\nfloat sdf(vec2 c) {\n  float h = 12.0 + 2.0 * heartbeat(iTime / 4.0);\n  return sdHeart(c / h + vec2(0, 0.55)) * h;\n}\n\nvoid main() {\n  vec2 fragCoord = coord * iResolution;\n  //  fragCoord *= 0.05;\n  //  fragCoord.x *= 0.1;\n  //  vec3 color = ungamma(colorBackground);\n  //  color = mix(color, vec3(0.5), lineGrid(fragCoord, mat2(0.01)));\n  //  color = mix(\n  //    color,\n  //    ungamma(colorPrimary),\n  //    float(between(-0.02, 0.02, fragCoord.y - heartbeat(fragCoord.x)))\n  //  );\n\n  vec3 color;\n\n  color = VIZZ(sdf);\n\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n'},3919:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o="#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdHexagon.glsl\n// START ../constants.glsl\nconst float SQRT1_2 = 0.7071067811865476;\nconst float SQRT1_3 = 0.57735026919;\nconst float SQRT2 = 1.4142135623730951;\nconst float SQRT3 = 1.732050807568877;\n// sqrt(3)/2 = sin(60*)\nconst float SQRT3_2 = 0.86602540378;\nconst float GOLDEN_RATIO = 1.61803398875;\nconst float PI = 3.141592653589793;\nconst float TAU = 6.28318530718;\n/**\n * One degree in radians. Use like `sin(30 * DEG)`.\n */\nconst float DEGREE = 0.017453292519943295;\n\n// END ../constants.glsl\n\n/**\n * Signed distance function (SDF) of a regular hexagon centered at the origin\n * with circumradius of `r`.\n *\n * The inscribed radius is r\\*sqrt(3)/2. The side length is r.\n *\n * ```\n *    ____q=r*(1/2, sqrt(3)/2)\n *  /     \\_\n * /   .O  \\_\n * \\      /\n *  \\____/\n * ```\n */\nfloat sdHexagon(float r, vec2 p) {\n  const vec2 v330 = vec2(-SQRT3_2, 0.5);\n  float k = 0.577350269;\n  // Mirror vertically and horizontally. All points are now in quadrant 1.\n  p = abs(p);\n\n  // Mirror points below the O-q line across that line.\n  // All points are now between 60 and 120 degrees.\n  p -= 2.0 * v330 * min(dot(v330, p), 0.0);\n\n  // Closest point to p on the -q - q segment:\n  vec2 closest = vec2(clamp(p.x, -0.5 * r, 0.5 * r), SQRT3_2 * r);\n\n  p -= closest;\n  return length(p) * sign(p.y);\n}\n\n// END ../common/sdf2d/sdHexagon.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 x) {\n  return sdHexagon(4.0 + 2.0 * sin(iTime), x);\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n"},7640:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o="#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdTriangleEquilateral.glsl\n// START ../constants.glsl\nconst float SQRT1_2 = 0.7071067811865476;\nconst float SQRT1_3 = 0.57735026919;\nconst float SQRT2 = 1.4142135623730951;\nconst float SQRT3 = 1.732050807568877;\n// sqrt(3)/2 = sin(60*)\nconst float SQRT3_2 = 0.86602540378;\nconst float GOLDEN_RATIO = 1.61803398875;\nconst float PI = 3.141592653589793;\nconst float TAU = 6.28318530718;\n/**\n * One degree in radians. Use like `sin(30 * DEG)`.\n */\nconst float DEGREE = 0.017453292519943295;\n\n// END ../constants.glsl\n\n/**\n * Signed distance function (SDF) of an equilateral triangle centered at the\n * origin with circumradius of 1.\n *\n * The inradius |(a + b)/2| is 0.5.\n *\n * The side length (|ab|) is sqrt(3).\n *\n * ```\n *        a (0, 1)\n *       /\\_\n *     /    \\_\n *   /    .   \\_\n * /____________\\ b (sqrt(3)/2, -1/2)\n * c              at -30Â° from 0\n * ```\n */\nfloat sdTriangleEquilateral(vec2 p) {\n  // Mirror vertically; p is then always on right.\n  p.x = abs(p.x);\n\n  // If p is above the line origin-b, mirror it across that line.\n  // Use dot product with vector at 60Â° to check.\n  if (0.5 * p.x + p.y * SQRT3_2 > 0.0) {\n    p = vec2(0.5 * p.x - SQRT3_2 * p.y, -SQRT3_2 * p.x - 0.5 * p.y);\n  }\n  p.x = abs(p.x);\n\n  // We now just need to calculate the distance from the segment bc to p.\n  // We move the segment/p so that the distance is just the length of p.\n  p.y += 0.5;\n  p.x -= clamp(p.x, 0.0, SQRT3_2);\n\n  // After `p.y += 0.5;`, all points inside the triangle are above the x axis,\n  // so we can use that as the sign.\n  return length(p) * -sign(p.y);\n}\nfloat sdTriangleEquilateral(float a, vec2 p) {\n  return sdTriangleEquilateral(p / a) * a;\n}\n\n// #pragma glslify: export(sdTriangleEquilateral)\n\n\n// END ../common/sdf2d/sdTriangleEquilateral.glsl\n// START ../common/sdf2d/sdNgon.glsl\n\n// START ../polar.glsl\n// START ../common/fromPolar.glsl\n// START ./unmix.glsl\nfloat unmix(float a, float b, float value) {\n  return (value - a) / (b - a);\n}\n\n// #pragma glslify: export(unmix)\n\n\n// END ./unmix.glsl\n\nvec3 fromPolar(float radius, float phi, float z) {\n  return vec3(radius * cos(phi), radius * sin(phi), z);\n}\n\nvec2 fromPolar(float radius, float phi) {\n  return vec2(radius * cos(phi), radius * sin(phi));\n}\n\nvec2 fromPolar(vec2 polar) {\n  return fromPolar(polar.x, polar.y);\n}\n\n// #pragma glslify: export(fromPolar)\n\n\n// END ../common/fromPolar.glsl\n// START ../common/toPolar.glsl\n\n\nvec2 toPolar(vec2 xy) {\n  return vec2(length(xy), atan(xy.y, xy.x));\n}\n\nmat2 toPolarDerivate(vec2 xy) {\n  return mat2(xy.x * xy.x, xy.y * xy.y, -xy.y, xy.x) / dot(xy, xy);\n}\n\n// #pragma glslify: export(toPolar)\n\n\n// END ../common/toPolar.glsl\n\n// END ../polar.glsl\n\n/**\n\n */\nfloat sdNgon(float sides, vec2 p) {\n  vec2 polar = toPolar(p);\n  float f = TAU / sides;\n  polar.y = (fract(polar.y / f) - 0.5) * f;\n  p = fromPolar(polar);\n  //  return distance(p, vec2(2, 0));\n  float xx = sin(PI / sides);\n  vec2 closest = vec2(cos(PI / sides), clamp(p.y, -xx, xx));\n  p -= closest;\n  return length(p) * sign(p.x);\n}\n\n// END ../common/sdf2d/sdNgon.glsl\n// START ../common/sdf2d/sdRectangle.glsl\nfloat sdRectangle(vec2 dim, vec2 p) {\n  vec2 d = abs(p) - 0.5 * dim;\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdRectangle(float width, float height, vec2 p) {\n  return sdRectangle(vec2(width, height), p);\n}\n\n\n// END ../common/sdf2d/sdRectangle.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nin vec2 coord;\nout vec4 fragColor;\nuniform float a;\n\nfloat sdf(vec2 p) {\n  return sdNgon(5.0 + 2.0 * sin(iTime), p / 10.0) * 10.0;\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n"},7758:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o="#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdOctagon.glsl\n// START ../constants.glsl\nconst float SQRT1_2 = 0.7071067811865476;\nconst float SQRT1_3 = 0.57735026919;\nconst float SQRT2 = 1.4142135623730951;\nconst float SQRT3 = 1.732050807568877;\n// sqrt(3)/2 = sin(60*)\nconst float SQRT3_2 = 0.86602540378;\nconst float GOLDEN_RATIO = 1.61803398875;\nconst float PI = 3.141592653589793;\nconst float TAU = 6.28318530718;\n/**\n * One degree in radians. Use like `sin(30 * DEG)`.\n */\nconst float DEGREE = 0.017453292519943295;\n\n// END ../constants.glsl\n\n/**\n * Signed distance function (SDF) of a regular octagon centered at the origin\n * with circumradius of `r`.\n *\n * The inscribed radius is r\\*sqrt(3)/2. The side length is r.\n *\n * ```\n *    ___q (cos(67.5Â°), sin(67.5Â°))\n *  /    \\_\n * |  o  |\n * \\____/\n * ```\n */\nfloat sdOctagon(float r, vec2 p) {\n  // X and Y symmetry.\n  p = abs(p);\n  // Mirror points below y = x line above it.\n  if (p.x > p.y) p = p.yx;\n  // Mirror points below line at 45+22.5=67.5 degrees above it.\n  const vec2 v67_5 = vec2(0.38268343236, 0.92387953251);\n  const vec2 v337_5 = vec2(v67_5.y, -v67_5.x);\n  p -= 2.0 * v337_5 * max(dot(v337_5, p), 0.0);\n  // Closest point to p on top segment of the octahedron\n  vec2 closest = vec2(clamp(p.x, -v67_5.x * r, v67_5.x * r), r);\n  p -= closest;\n  return length(p) * sign(p.y);\n}\nfloat sdOctagon2(float r, vec2 p) {\n  const vec3 k = vec3(-0.9238795325, 0.3826834323, 0.4142135623);\n  p = abs(p);\n  p -= 2.0 * min(dot(vec2(k.x, k.y), p), 0.0) * vec2(k.x, k.y);\n  p -= 2.0 * min(dot(vec2(-k.x, k.y), p), 0.0) * vec2(-k.x, k.y);\n  p -= vec2(clamp(p.x, -k.z * r, k.z * r), r);\n  return length(p) * sign(p.y);\n}\n\n// END ../common/sdf2d/sdOctagon.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 p) {\n  return sdOctagon(4.0 + 2.0 * sin(iTime), p);\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n"},3076:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o="#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdRectangle.glsl\nfloat sdRectangle(vec2 dim, vec2 p) {\n  vec2 d = abs(p) - 0.5 * dim;\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdRectangle(float width, float height, vec2 p) {\n  return sdRectangle(vec2(width, height), p);\n}\n\n\n// END ../common/sdf2d/sdRectangle.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nuniform float a;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 p) {\n  return sdRectangle(10.0 + 5.0 * sin(0.2 * iTime), 10.0 + 6.0 * sin(iTime), p);\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n"},3593:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o="#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdSegment.glsl\nfloat sdSegment(vec2 a, vec2 b, vec2 p) {\n  vec2 ab = b - a;\n  float t = dot(ab, p - a) / dot(ab, ab);\n  t = clamp(t, 0.0, 1.0);\n  vec2 closest = a + ab * t;\n\n  return distance(closest, p);\n}\n\n// #pragma glslify: export(sdSegment)\n\n\n// END ../common/sdf2d/sdSegment.glsl\n// START ../common/fromPolar.glsl\n// START ./unmix.glsl\nfloat unmix(float a, float b, float value) {\n  return (value - a) / (b - a);\n}\n\n// #pragma glslify: export(unmix)\n\n\n// END ./unmix.glsl\n\nvec3 fromPolar(float radius, float phi, float z) {\n  return vec3(radius * cos(phi), radius * sin(phi), z);\n}\n\nvec2 fromPolar(float radius, float phi) {\n  return vec2(radius * cos(phi), radius * sin(phi));\n}\n\nvec2 fromPolar(vec2 polar) {\n  return fromPolar(polar.x, polar.y);\n}\n\n// #pragma glslify: export(fromPolar)\n\n\n// END ../common/fromPolar.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 x) {\n  vec2 a = fromPolar(10.0, 3.0 * iTime + sin(2.0 * iTime));\n  vec2 b = -a;\n  return sdSegment(a, b, x) - 2.5;\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n"},9012:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o='#version 300 es\n\nprecision highp float;\n// START ./sdHelloWorld.glsl\nstruct Info {\n  vec2 dim;\n  vec2 bearing;\n  int horiAdvance;\n  vec2 pos;\n};\n\nconst Info C_SPACE = Info(vec2(0, 0), vec2(0, 0), 6, vec2(0, 0)); //  " "\nconst Info C_BANG = Info(vec2(4, 19), vec2(1, 18), 6, vec2(2, 2)); // "!"\nconst Info C_DOUBLQUOTE = Info(vec2(8, 8), vec2(1, 18), 9, vec2(14, 2)); // "\\""\nconst Info C_HASH = Info(vec2(15, 18), vec2(0, 18), 15, vec2(30, 2)); // "#"\nconst Info C_DOLLAR = Info(vec2(12, 21), vec2(1, 19), 13, vec2(53, 2)); // "$"\nconst Info C_PERCENT = Info(vec2(18, 19), vec2(1, 18), 19, vec2(73, 2)); // "%"\nconst Info C_AMP = Info(vec2(17, 19), vec2(1, 18), 17, vec2(99, 2)); // "&"\nconst Info C_QUOTE = Info(vec2(3, 8), vec2(1, 18), 5, vec2(124, 2)); // "\'"\nconst Info C_PARENL = Info(vec2(7, 22), vec2(0, 18), 7, vec2(135, 2)); // "("\nconst Info C_PARENR = Info(vec2(7, 22), vec2(0, 18), 7, vec2(150, 2)); // ")"\nconst Info C_STAR = Info(vec2(12, 12), vec2(1, 19), 13, vec2(165, 2)); // "*"\nconst Info C_PLUS = Info(vec2(12, 13), vec2(1, 15), 13, vec2(185, 2)); // "+"\nconst Info C_COMMA = Info(vec2(5, 7), vec2(0, 3), 5, vec2(205, 2)); // ","\nconst Info C_DASH = Info(vec2(7, 3), vec2(0, 8), 7, vec2(218, 2)); // "-"\nconst Info C_DOT = Info(vec2(4, 4), vec2(1, 3), 6, vec2(233, 2)); // "."\nconst Info C_SLASH = Info(vec2(9, 18), vec2(0, 18), 8, vec2(245, 2)); // "/"\nconst Info C_0 = Info(vec2(12, 19), vec2(1, 18), 13, vec2(262, 2)); // "0"\nconst Info C_1 = Info(vec2(7, 18), vec2(2, 18), 13, vec2(282, 2)); // "1"\nconst Info C_2 = Info(vec2(12, 18), vec2(1, 18), 13, vec2(297, 2)); // "2"\nconst Info C_3 = Info(vec2(12, 19), vec2(1, 18), 13, vec2(317, 2)); // "3"\nconst Info C_4 = Info(vec2(14, 18), vec2(0, 18), 13, vec2(337, 2)); // "4"\nconst Info C_5 = Info(vec2(12, 19), vec2(1, 18), 13, vec2(359, 2)); // "5"\nconst Info C_6 = Info(vec2(12, 19), vec2(1, 18), 13, vec2(379, 2)); // "6"\nconst Info C_7 = Info(vec2(12, 18), vec2(1, 18), 13, vec2(399, 2)); // "7"\nconst Info C_8 = Info(vec2(12, 19), vec2(1, 18), 13, vec2(419, 2)); // "8"\nconst Info C_9 = Info(vec2(12, 19), vec2(1, 18), 13, vec2(439, 2)); // "9"\nconst Info C_COLON = Info(vec2(4, 15), vec2(1, 14), 6, vec2(459, 2)); // "\nconst Info C_SEMI = Info(vec2(5, 18), vec2(0, 14), 6, vec2(471, 2)); // ";"\nconst Info C_LT = Info(vec2(12, 13), vec2(1, 15), 13, vec2(484, 2)); // "<"\nconst Info C_EQ = Info(vec2(12, 7), vec2(1, 12), 13, vec2(218, 14)); // "="\nconst Info C_GT = Info(vec2(12, 13), vec2(1, 15), 13, vec2(165, 22)); // ">"\nconst Info C_QMARK = Info(vec2(10, 19), vec2(0, 18), 10, vec2(185, 23)); // "?"\nconst Info C_AT = Info(vec2(20, 21), vec2(1, 18), 21, vec2(484, 23)); // "@"\nconst Info C_A = Info(vec2(16, 18), vec2(0, 18), 15, vec2(238, 28)); // "A"\nconst Info C_B = Info(vec2(13, 18), vec2(2, 18), 15, vec2(459, 28)); // "B"\nconst Info C_C = Info(vec2(14, 19), vec2(1, 18), 15, vec2(14, 28)); // "C"\nconst Info C_D = Info(vec2(15, 18), vec2(2, 18), 17, vec2(282, 28)); // "D"\nconst Info C_E = Info(vec2(10, 18), vec2(2, 18), 13, vec2(399, 28)); // "E"\nconst Info C_F = Info(vec2(10, 18), vec2(2, 18), 12, vec2(337, 28)); // "F"\nconst Info C_G = Info(vec2(15, 19), vec2(1, 18), 17, vec2(203, 29)); // "G"\nconst Info C_H = Info(vec2(14, 18), vec2(2, 18), 17, vec2(417, 29)); // "H"\nconst Info C_I = Info(vec2(3, 18), vec2(2, 18), 6, vec2(124, 18)); // "I"\nconst Info C_J = Info(vec2(7, 23), vec2(-2, 18), 6, vec2(36, 28)); // "J"\nconst Info C_K = Info(vec2(13, 18), vec2(2, 18), 14, vec2(355, 29)); // "K"\nconst Info C_L = Info(vec2(10, 18), vec2(2, 18), 12, vec2(305, 29)); // "L"\nconst Info C_M = Info(vec2(18, 18), vec2(2, 18), 21, vec2(73, 29)); // "M"\nconst Info C_N = Info(vec2(14, 18), vec2(2, 18), 18, vec2(376, 29)); // "N"\nconst Info C_O = Info(vec2(17, 19), vec2(1, 18), 18, vec2(99, 29)); // "O"\nconst Info C_P = Info(vec2(12, 18), vec2(2, 18), 14, vec2(262, 29)); // "P"\nconst Info C_Q = Info(vec2(17, 23), vec2(1, 18), 18, vec2(135, 32)); // "Q"\nconst Info C_R = Info(vec2(13, 18), vec2(2, 18), 14, vec2(51, 31)); // "R"\nconst Info C_S = Info(vec2(12, 19), vec2(1, 18), 13, vec2(439, 29)); // "S"\nconst Info C_T = Info(vec2(14, 18), vec2(0, 18), 13, vec2(160, 43)); // "T"\nconst Info C_U = Info(vec2(14, 19), vec2(2, 18), 17, vec2(480, 52)); // "U"\nconst Info C_V = Info(vec2(15, 18), vec2(0, 18), 14, vec2(226, 54)); // "V"\nconst Info C_W = Info(vec2(22, 18), vec2(0, 18), 22, vec2(323, 54)); // "W"\nconst Info C_X = Info(vec2(14, 18), vec2(0, 18), 13, vec2(282, 54)); // "X"\nconst Info C_Y = Info(vec2(14, 18), vec2(0, 18), 13, vec2(72, 55)); // "Y"\nconst Info C_Z = Info(vec2(13, 18), vec2(0, 18), 13, vec2(182, 50)); // "Z"\nconst Info C_BRACKETL = Info(vec2(7, 22), vec2(1, 18), 7, vec2(398, 54)); // "["\nconst Info C_BACKSLASH = Info(vec2(9, 18), vec2(0, 18), 8, vec2(459, 54)); // "\\\\"\nconst Info C_BRACKETR = Info(vec2(6, 22), vec2(0, 18), 7, vec2(304, 55)); // "]"\nconst Info C_CARET = Info(vec2(13, 12), vec2(0, 18), 13, vec2(353, 55)); // "^"\nconst Info C_UNDERSCORE = Info(vec2(12, 2), vec2(-1, -2), 10, vec2(413, 55)); // "_"\nconst Info C_BACKTICK = Info(vec2(6, 5), vec2(4, 19), 13, vec2(2, 55)); // "`"\nconst Info C_a = Info(vec2(11, 15), vec2(1, 14), 13, vec2(249, 55)); // "a"\nconst Info C_b = Info(vec2(12, 20), vec2(2, 19), 14, vec2(16, 55)); // "b"\nconst Info C_c = Info(vec2(10, 15), vec2(1, 14), 11, vec2(374, 55)); // "c"\nconst Info C_d = Info(vec2(12, 20), vec2(1, 19), 14, vec2(94, 56)); // "d"\nconst Info C_e = Info(vec2(12, 15), vec2(1, 14), 13, vec2(433, 56)); // "e"\nconst Info C_f = Info(vec2(10, 19), vec2(0, 19), 8, vec2(114, 56)); // "f"\nconst Info C_g = Info(vec2(13, 20), vec2(0, 14), 13, vec2(203, 56)); // "g"\nconst Info C_h = Info(vec2(11, 19), vec2(2, 19), 14, vec2(51, 57)); // "h"\nconst Info C_i = Info(vec2(4, 18), vec2(1, 18), 6, vec2(268, 55)); // "i"\nconst Info C_j = Info(vec2(7, 24), vec2(-2, 18), 6, vec2(36, 59)); // "j"\nconst Info C_k = Info(vec2(11, 19), vec2(2, 19), 12, vec2(132, 63)); // "k"\nconst Info C_l = Info(vec2(3, 19), vec2(2, 19), 6, vec2(413, 65)); // "l"\nconst Info C_m = Info(vec2(19, 14), vec2(2, 14), 22, vec2(151, 69)); // "m"\nconst Info C_n = Info(vec2(11, 14), vec2(2, 14), 14, vec2(353, 75)); // "n"\nconst Info C_o = Info(vec2(13, 15), vec2(1, 14), 14, vec2(178, 76)); // "o"\nconst Info C_p = Info(vec2(12, 20), vec2(2, 14), 14, vec2(372, 78)); // "p"\nconst Info C_q = Info(vec2(12, 20), vec2(1, 14), 14, vec2(476, 79)); // "q"\nconst Info C_r = Info(vec2(8, 14), vec2(2, 14), 9, vec2(249, 78)); // "r"\nconst Info C_s = Info(vec2(10, 15), vec2(1, 14), 11, vec2(424, 79)); // "s"\nconst Info C_t = Info(vec2(8, 17), vec2(0, 16), 8, vec2(496, 79)); // "t"\nconst Info C_u = Info(vec2(12, 14), vec2(1, 13), 14, vec2(224, 80)); // "u"\nconst Info C_v = Info(vec2(13, 13), vec2(0, 13), 12, vec2(280, 80)); // "v"\nconst Info C_w = Info(vec2(19, 13), vec2(0, 13), 18, vec2(318, 80)); // "w"\nconst Info C_x = Info(vec2(13, 13), vec2(0, 13), 12, vec2(453, 80)); // "x"\nconst Info C_y = Info(vec2(13, 19), vec2(0, 13), 12, vec2(70, 81)); // "y"\nconst Info C_z = Info(vec2(11, 13), vec2(0, 13), 11, vec2(2, 83)); // "z"\nconst Info C_BRACEL = Info(vec2(9, 22), vec2(0, 18), 9, vec2(114, 83)); // "{"\nconst Info C_PIPE = Info(vec2(3, 25), vec2(5, 19), 13, vec2(442, 79)); // "|"\nconst Info C_BRACER = Info(vec2(9, 22), vec2(0, 18), 9, vec2(91, 84)); // "}"\n// START ../common/sdf2d/sdRectangle.glsl\nfloat sdRectangle(vec2 dim, vec2 p) {\n  vec2 d = abs(p) - 0.5 * dim;\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdRectangle(float width, float height, vec2 p) {\n  return sdRectangle(vec2(width, height), p);\n}\n\n\n// END ../common/sdf2d/sdRectangle.glsl\n\nuniform sampler2D fontTexture;\n\nvoid cc(inout vec2 caret, Info charInfo, vec2 p, inout float distance) {\n  p -= caret;\n  vec2 n = vec2(0, 0);\n  float dBox = sdRectangle(\n    vec2(charInfo.dim),\n    p -\n      0.5 * charInfo.dim -\n      vec2(charInfo.bearing.x, charInfo.dim.y - charInfo.bearing.y)\n  );\n  if (dBox > 0.0) {\n    //    distance = min(distance, dBox);\n  }\n  else {\n    vec2 texCoordNotNormed =\n      vec2(charInfo.pos) +\n      vec2(charInfo.bearing.x, charInfo.dim.y) +\n      p * vec2(1, -1);\n    vec2 texCoord = texCoordNotNormed / vec2(512, 1024);\n    distance += texture(fontTexture, texCoord).r;\n  }\n  caret.x += float(charInfo.horiAdvance);\n}\nfloat sdHelloWorld(vec2 p) {\n  vec2 c = vec2(-10, 0);\n  float d = 0.0;\n  cc(c, C_H, p, d);\n  cc(c, C_e, p, d);\n  cc(c, C_l, p, d);\n  cc(c, C_l, p, d);\n  cc(c, C_o, p, d);\n  cc(c, C_SPACE, p, d);\n  cc(c, C_W, p, d);\n  cc(c, C_o, p, d);\n  cc(c, C_r, p, d);\n  cc(c, C_l, p, d);\n  cc(c, C_d, p, d);\n  cc(c, C_BANG, p, d);\n  return d;\n}\n\n// END ./sdHelloWorld.glsl\n// START ../common/sdf2d/sdTriangle.glsl\n/**\n * Signed distance function (SDF) of an arbitrary triangle defined by the points\n * a, b and c.\n *\n * ```\n *     a\n *    /\\_            p\n *   /   \\_\n *  /      \\_\n * /_________\\ c\n * b\n * ```\n */\nfloat sdTriangle(vec2 a, vec2 b, vec2 c, vec2 p) {\n  vec2 ab = b - a;\n  vec2 bc = c - b;\n  vec2 ca = a - c;\n\n  vec2 ap = p - a;\n  vec2 bp = p - b;\n  vec2 cp = p - c;\n\n  // We calculate the distance of each of the three segements ab, bc, ca to p.\n  // To calculate the distance of p to a segment ab, we first calculate t such\n  // that a + t * ab is the closest point on the line to p.\n  // t is then clamped to [0; 1] so that we have the closest point on the segment,\n  // not on the line.\n  float abt = clamp(dot(ab, ap) / dot(ab, ab), 0.0, 1.0);\n  float bct = clamp(dot(bc, bp) / dot(bc, bc), 0.0, 1.0);\n  float cat = clamp(dot(ca, cp) / dot(ca, ca), 0.0, 1.0);\n  // Vectors "closest point on segment" -> p\n  vec2 ab2p = ab * abt - ap;\n  vec2 bc2p = bc * bct - bp;\n  vec2 ca2p = ca * cat - cp;\n\n  float minDistanceSquared = min(\n    min(dot(ab2p, ab2p), dot(bc2p, bc2p)),\n    dot(ca2p, ca2p)\n  );\n  // The function should return negative values for points inside the triangle.\n  // If the points are arranged CCW, he point is outside if the dot product of\n  // ap and "ac rotated CCW by 90Â°" is greater than 0.\n  // Same for the other two segments.\n  // ccw is 1 if CCW, -1 if CW. This flips the results of the dot products so\n  // that the result is correct if the triangle is CW.\n  float ccw = sign(ab.x * ca.y - ab.y * ca.x);\n  bool isOutside =\n    ccw * (ap.x * ab.y - ap.y * ab.x) < 0.0 ||\n    ccw * (bp.x * bc.y - bp.y * bc.x) < 0.0 ||\n    ccw * (cp.x * ca.y - cp.y * ca.x) < 0.0;\n  return sqrt(minDistanceSquared) * mix(-1.0, 1.0, isOutside);\n}\n\n// #pragma glslify: export(sdTriangle)\n\n\n// END ../common/sdf2d/sdTriangle.glsl\n// START ../common/polar.glsl\n// START ../common/fromPolar.glsl\n// START ./unmix.glsl\nfloat unmix(float a, float b, float value) {\n  return (value - a) / (b - a);\n}\n\n// #pragma glslify: export(unmix)\n\n\n// END ./unmix.glsl\n\nvec3 fromPolar(float radius, float phi, float z) {\n  return vec3(radius * cos(phi), radius * sin(phi), z);\n}\n\nvec2 fromPolar(float radius, float phi) {\n  return vec2(radius * cos(phi), radius * sin(phi));\n}\n\nvec2 fromPolar(vec2 polar) {\n  return fromPolar(polar.x, polar.y);\n}\n\n// #pragma glslify: export(fromPolar)\n\n\n// END ../common/fromPolar.glsl\n// START ../common/toPolar.glsl\n\n\nvec2 toPolar(vec2 xy) {\n  return vec2(length(xy), atan(xy.y, xy.x));\n}\n\nmat2 toPolarDerivate(vec2 xy) {\n  return mat2(xy.x * xy.x, xy.y * xy.y, -xy.y, xy.x) / dot(xy, xy);\n}\n\n// #pragma glslify: export(toPolar)\n\n\n// END ../common/toPolar.glsl\n\n// END ../common/polar.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nuniform float a;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 p) {\n  return sdHelloWorld(p * 5.0) / 5.0;\n}\n\nvoid main() {\n  vec2 p = (coord - 0.5) * iResolution * 0.1;\n  float dist = sdf(p);\n  float u_buffer = a;\n  float u_gamma = 0.05;\n  float alpha = smoothstep(u_buffer - u_gamma, u_buffer + u_gamma, dist);\n  vec3 color = VIZZ(sdf);\n  color = mix(ungamma(colorBackground), ungamma(colorPrimary), alpha);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n'},8947:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o='#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdTriangle.glsl\n/**\n * Signed distance function (SDF) of an arbitrary triangle defined by the points\n * a, b and c.\n *\n * ```\n *     a\n *    /\\_            p\n *   /   \\_\n *  /      \\_\n * /_________\\ c\n * b\n * ```\n */\nfloat sdTriangle(vec2 a, vec2 b, vec2 c, vec2 p) {\n  vec2 ab = b - a;\n  vec2 bc = c - b;\n  vec2 ca = a - c;\n\n  vec2 ap = p - a;\n  vec2 bp = p - b;\n  vec2 cp = p - c;\n\n  // We calculate the distance of each of the three segements ab, bc, ca to p.\n  // To calculate the distance of p to a segment ab, we first calculate t such\n  // that a + t * ab is the closest point on the line to p.\n  // t is then clamped to [0; 1] so that we have the closest point on the segment,\n  // not on the line.\n  float abt = clamp(dot(ab, ap) / dot(ab, ab), 0.0, 1.0);\n  float bct = clamp(dot(bc, bp) / dot(bc, bc), 0.0, 1.0);\n  float cat = clamp(dot(ca, cp) / dot(ca, ca), 0.0, 1.0);\n  // Vectors "closest point on segment" -> p\n  vec2 ab2p = ab * abt - ap;\n  vec2 bc2p = bc * bct - bp;\n  vec2 ca2p = ca * cat - cp;\n\n  float minDistanceSquared = min(\n    min(dot(ab2p, ab2p), dot(bc2p, bc2p)),\n    dot(ca2p, ca2p)\n  );\n  // The function should return negative values for points inside the triangle.\n  // If the points are arranged CCW, he point is outside if the dot product of\n  // ap and "ac rotated CCW by 90Â°" is greater than 0.\n  // Same for the other two segments.\n  // ccw is 1 if CCW, -1 if CW. This flips the results of the dot products so\n  // that the result is correct if the triangle is CW.\n  float ccw = sign(ab.x * ca.y - ab.y * ca.x);\n  bool isOutside =\n    ccw * (ap.x * ab.y - ap.y * ab.x) < 0.0 ||\n    ccw * (bp.x * bc.y - bp.y * bc.x) < 0.0 ||\n    ccw * (cp.x * ca.y - cp.y * ca.x) < 0.0;\n  return sqrt(minDistanceSquared) * mix(-1.0, 1.0, isOutside);\n}\n\n// #pragma glslify: export(sdTriangle)\n\n\n// END ../common/sdf2d/sdTriangle.glsl\n// START ../common/fromPolar.glsl\n// START ./unmix.glsl\nfloat unmix(float a, float b, float value) {\n  return (value - a) / (b - a);\n}\n\n// #pragma glslify: export(unmix)\n\n\n// END ./unmix.glsl\n\nvec3 fromPolar(float radius, float phi, float z) {\n  return vec3(radius * cos(phi), radius * sin(phi), z);\n}\n\nvec2 fromPolar(float radius, float phi) {\n  return vec2(radius * cos(phi), radius * sin(phi));\n}\n\nvec2 fromPolar(vec2 polar) {\n  return fromPolar(polar.x, polar.y);\n}\n\n// #pragma glslify: export(fromPolar)\n\n\n// END ../common/fromPolar.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 x) {\n  vec2 a = vec2(4, 2) + fromPolar(10.0, iTime);\n  vec2 b = vec2(4, 6) + fromPolar(10.0, iTime * 0.8 + 3.0);\n  vec2 c = vec2(-10, 3) + fromPolar(10.0, iTime * 1.2 + 5.0);\n  return sdTriangle(a, b, c, x);\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n'},4877:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o="#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdTriangleEquilateral.glsl\n// START ../constants.glsl\nconst float SQRT1_2 = 0.7071067811865476;\nconst float SQRT1_3 = 0.57735026919;\nconst float SQRT2 = 1.4142135623730951;\nconst float SQRT3 = 1.732050807568877;\n// sqrt(3)/2 = sin(60*)\nconst float SQRT3_2 = 0.86602540378;\nconst float GOLDEN_RATIO = 1.61803398875;\nconst float PI = 3.141592653589793;\nconst float TAU = 6.28318530718;\n/**\n * One degree in radians. Use like `sin(30 * DEG)`.\n */\nconst float DEGREE = 0.017453292519943295;\n\n// END ../constants.glsl\n\n/**\n * Signed distance function (SDF) of an equilateral triangle centered at the\n * origin with circumradius of 1.\n *\n * The inradius |(a + b)/2| is 0.5.\n *\n * The side length (|ab|) is sqrt(3).\n *\n * ```\n *        a (0, 1)\n *       /\\_\n *     /    \\_\n *   /    .   \\_\n * /____________\\ b (sqrt(3)/2, -1/2)\n * c              at -30Â° from 0\n * ```\n */\nfloat sdTriangleEquilateral(vec2 p) {\n  // Mirror vertically; p is then always on right.\n  p.x = abs(p.x);\n\n  // If p is above the line origin-b, mirror it across that line.\n  // Use dot product with vector at 60Â° to check.\n  if (0.5 * p.x + p.y * SQRT3_2 > 0.0) {\n    p = vec2(0.5 * p.x - SQRT3_2 * p.y, -SQRT3_2 * p.x - 0.5 * p.y);\n  }\n  p.x = abs(p.x);\n\n  // We now just need to calculate the distance from the segment bc to p.\n  // We move the segment/p so that the distance is just the length of p.\n  p.y += 0.5;\n  p.x -= clamp(p.x, 0.0, SQRT3_2);\n\n  // After `p.y += 0.5;`, all points inside the triangle are above the x axis,\n  // so we can use that as the sign.\n  return length(p) * -sign(p.y);\n}\nfloat sdTriangleEquilateral(float a, vec2 p) {\n  return sdTriangleEquilateral(p / a) * a;\n}\n\n// #pragma glslify: export(sdTriangleEquilateral)\n\n\n// END ../common/sdf2d/sdTriangleEquilateral.glsl\n// START ../common/fromPolar.glsl\n// START ./unmix.glsl\nfloat unmix(float a, float b, float value) {\n  return (value - a) / (b - a);\n}\n\n// #pragma glslify: export(unmix)\n\n\n// END ./unmix.glsl\n\nvec3 fromPolar(float radius, float phi, float z) {\n  return vec3(radius * cos(phi), radius * sin(phi), z);\n}\n\nvec2 fromPolar(float radius, float phi) {\n  return vec2(radius * cos(phi), radius * sin(phi));\n}\n\nvec2 fromPolar(vec2 polar) {\n  return fromPolar(polar.x, polar.y);\n}\n\n// #pragma glslify: export(fromPolar)\n\n\n// END ../common/fromPolar.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 c) {\n  return sdTriangleEquilateral(11.0 + 10.0 * sin(iTime), c);\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n"},7391:(n,c,e)=>{"use strict";e.r(c),e.d(c,{default:()=>o});const o="#version 300 es\n\nprecision highp float;\n// START ../common/sdf2d/sdTriangleIsosceles.glsl\n/**\n * Signed distance function (SDF) of an isosceles triangle (two sides same\n * length). One corner is at the origin. Another corner is the passed point\n * `q`.The triangle is symmetric along the Y axis.\n *\n * `q.x` must be positive.\n *\n * ```\n * ______q\n * \\    /\n *  \\  /\n *   \\/\n *    0\n * ```\n */\nfloat sdTriangleIsosceles(vec2 q, vec2 p) {\n  // Mirror vertically; p is then always on right.\n  p.x = abs(p.x);\n\n  // Same as sdTriangle but simplified.\n  vec2 a = p - q * clamp(dot(p, q) / dot(q, q), 0.0, 1.0);\n  vec2 b = p - q * vec2(clamp(p.x / q.x, 0.0, 1.0), 1.0);\n  float s = -sign(q.y);\n  vec2 d = min(\n    vec2(dot(a, a), s * (p.x * q.y - p.y * q.x)),\n    vec2(dot(b, b), s * (p.y - q.y))\n  );\n  return -sqrt(d.x) * sign(d.y);\n}\n\n// END ../common/sdf2d/sdTriangleIsosceles.glsl\n// START ../common/fromPolar.glsl\n// START ./unmix.glsl\nfloat unmix(float a, float b, float value) {\n  return (value - a) / (b - a);\n}\n\n// #pragma glslify: export(unmix)\n\n\n// END ./unmix.glsl\n\nvec3 fromPolar(float radius, float phi, float z) {\n  return vec3(radius * cos(phi), radius * sin(phi), z);\n}\n\nvec2 fromPolar(float radius, float phi) {\n  return vec2(radius * cos(phi), radius * sin(phi));\n}\n\nvec2 fromPolar(vec2 polar) {\n  return fromPolar(polar.x, polar.y);\n}\n\n// #pragma glslify: export(fromPolar)\n\n\n// END ../common/fromPolar.glsl\n// START ./vizz.glsl\n// START ../common/between.glsl\nbool between(float min, float max, float value) {\n  return min <= value && value <= max;\n}\n\n// #pragma glslify: export(between)\n\n\n// END ../common/between.glsl\n// START ../common/ungamma.glsl\nvec3 ungamma(vec4 col) {\n  return pow(col.rgb, vec3(2.2));\n}\nvec3 ungamma(vec3 col) {\n  return pow(col, vec3(2.2));\n}\n\n// END ../common/ungamma.glsl\n// START ../common/colors.glsl\nconst vec3 INDIAN_RED = vec3(0.804, 0.361, 0.361);\nconst vec3 LIGHT_CORAL = vec3(0.941, 0.502, 0.502);\nconst vec3 SALMON = vec3(0.98, 0.502, 0.447);\nconst vec3 DARK_SALMON = vec3(0.914, 0.588, 0.478);\nconst vec3 LIGHT_SALMON = vec3(1.0, 0.627, 0.478);\nconst vec3 CRIMSON = vec3(0.863, 0.078, 0.235);\nconst vec3 RED = vec3(1.0, 0.0, 0.0);\nconst vec3 FIRE_BRICK = vec3(0.698, 0.133, 0.133);\nconst vec3 DARK_RED = vec3(0.545, 0.0, 0.0);\nconst vec3 PINK = vec3(1.0, 0.753, 0.796);\nconst vec3 LIGHT_PINK = vec3(1.0, 0.714, 0.757);\nconst vec3 HOT_PINK = vec3(1.0, 0.412, 0.706);\nconst vec3 DEEP_PINK = vec3(1.0, 0.078, 0.576);\nconst vec3 MEDIUM_VIOLET_RED = vec3(0.78, 0.082, 0.522);\nconst vec3 PALE_VIOLET_RED = vec3(0.859, 0.439, 0.576);\nconst vec3 CORAL = vec3(1.0, 0.498, 0.314);\nconst vec3 TOMATO = vec3(1.0, 0.388, 0.278);\nconst vec3 ORANGE_RED = vec3(1.0, 0.271, 0.0);\nconst vec3 DARK_ORANGE = vec3(1.0, 0.549, 0.0);\nconst vec3 ORANGE = vec3(1.0, 0.647, 0.0);\nconst vec3 GOLD = vec3(1.0, 0.843, 0.0);\nconst vec3 YELLOW = vec3(1.0, 1.0, 0.0);\nconst vec3 LIGHT_YELLOW = vec3(1.0, 1.0, 0.878);\nconst vec3 LEMON_CHION = vec3(1.0, 0.98, 0.804);\nconst vec3 LIGHT_GOLDENROD_YELLOW = vec3(0.98, 0.98, 0.824);\nconst vec3 PAPAYA_WHIP = vec3(1.0, 0.937, 0.835);\nconst vec3 MOCCASIN = vec3(1.0, 0.894, 0.71);\nconst vec3 PEACH_PU = vec3(1.0, 0.855, 0.725);\nconst vec3 PALE_GOLDENROD = vec3(0.933, 0.91, 0.667);\nconst vec3 KHAKI = vec3(0.941, 0.902, 0.549);\nconst vec3 DARK_KHAKI = vec3(0.741, 0.718, 0.42);\nconst vec3 LAVENDER = vec3(0.902, 0.902, 0.98);\nconst vec3 THISTLE = vec3(0.847, 0.749, 0.847);\nconst vec3 PLUM = vec3(0.867, 0.627, 0.867);\nconst vec3 VIOLET = vec3(0.933, 0.51, 0.933);\nconst vec3 ORCHID = vec3(0.855, 0.439, 0.839);\nconst vec3 FUCHSIA = vec3(1.0, 0.0, 1.0);\nconst vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\nconst vec3 MEDIUM_ORCHID = vec3(0.729, 0.333, 0.827);\nconst vec3 MEDIUM_PURPLE = vec3(0.576, 0.439, 0.859);\nconst vec3 BLUE_VIOLET = vec3(0.541, 0.169, 0.886);\nconst vec3 DARK_VIOLET = vec3(0.58, 0.0, 0.827);\nconst vec3 DARK_ORCHID = vec3(0.6, 0.196, 0.8);\nconst vec3 DARK_MAGENTA = vec3(0.545, 0.0, 0.545);\nconst vec3 PURPLE = vec3(0.502, 0.0, 0.502);\nconst vec3 INDIGO = vec3(0.294, 0.0, 0.51);\nconst vec3 SLATE_BLUE = vec3(0.416, 0.353, 0.804);\nconst vec3 DARK_SLATE_BLUE = vec3(0.282, 0.239, 0.545);\nconst vec3 GREEN_YELLOW = vec3(0.678, 1.0, 0.184);\nconst vec3 CHARTREUSE = vec3(0.498, 1.0, 0.0);\nconst vec3 LAWN_GREEN = vec3(0.486, 0.988, 0.0);\nconst vec3 LIME = vec3(0.0, 1.0, 0.0);\nconst vec3 LIME_GREEN = vec3(0.196, 0.804, 0.196);\nconst vec3 PALE_GREEN = vec3(0.596, 0.984, 0.596);\nconst vec3 LIGHT_GREEN = vec3(0.565, 0.933, 0.565);\nconst vec3 MEDIUM_SPRING_GREEN = vec3(0.0, 0.98, 0.604);\nconst vec3 SPRING_GREEN = vec3(0.0, 1.0, 0.498);\nconst vec3 MEDIUM_SEA_GREEN = vec3(0.235, 0.702, 0.443);\nconst vec3 SEA_GREEN = vec3(0.18, 0.545, 0.341);\nconst vec3 FOREST_GREEN = vec3(0.133, 0.545, 0.133);\nconst vec3 GREEN = vec3(0.0, 0.502, 0.0);\nconst vec3 DARK_GREEN = vec3(0.0, 0.392, 0.0);\nconst vec3 YELLOW_GREEN = vec3(0.604, 0.804, 0.196);\nconst vec3 OLIVE_DRAB = vec3(0.42, 0.557, 0.137);\nconst vec3 OLIVE = vec3(0.502, 0.502, 0.0);\nconst vec3 DARK_OLIVE_GREEN = vec3(0.333, 0.42, 0.184);\nconst vec3 MEDIUM_AQUAMARINE = vec3(0.4, 0.804, 0.667);\nconst vec3 DARK_SEA_GREEN = vec3(0.561, 0.737, 0.561);\nconst vec3 LIGHT_SEA_GREEN = vec3(0.125, 0.698, 0.667);\nconst vec3 DARK_CYAN = vec3(0.0, 0.545, 0.545);\nconst vec3 TEAL = vec3(0.0, 0.502, 0.502);\nconst vec3 AQUA = vec3(0.0, 1.0, 1.0);\nconst vec3 CYAN = vec3(0.0, 1.0, 1.0);\nconst vec3 LIGHT_CYAN = vec3(0.878, 1.0, 1.0);\nconst vec3 PALE_TURQUOISE = vec3(0.686, 0.933, 0.933);\nconst vec3 AQUAMARINE = vec3(0.498, 1.0, 0.831);\nconst vec3 TURQUOISE = vec3(0.251, 0.878, 0.816);\nconst vec3 MEDIUM_TURQUOISE = vec3(0.282, 0.82, 0.8);\nconst vec3 DARK_TURQUOISE = vec3(0.0, 0.808, 0.82);\nconst vec3 CADET_BLUE = vec3(0.373, 0.62, 0.627);\nconst vec3 STEEL_BLUE = vec3(0.275, 0.51, 0.706);\nconst vec3 LIGHT_STEEL_BLUE = vec3(0.69, 0.769, 0.871);\nconst vec3 POWDER_BLUE = vec3(0.69, 0.878, 0.902);\nconst vec3 LIGHT_BLUE = vec3(0.678, 0.847, 0.902);\nconst vec3 SKY_BLUE = vec3(0.529, 0.808, 0.922);\nconst vec3 LIGHT_SKY_BLUE = vec3(0.529, 0.808, 0.98);\nconst vec3 DEEP_SKY_BLUE = vec3(0.0, 0.749, 1.0);\nconst vec3 DODGER_BLUE = vec3(0.118, 0.565, 1.0);\nconst vec3 CORNLOWER_BLUE = vec3(0.392, 0.584, 0.929);\nconst vec3 MEDIUM_SLATE_BLUE = vec3(0.482, 0.408, 0.933);\nconst vec3 ROYAL_BLUE = vec3(0.255, 0.412, 0.882);\nconst vec3 BLUE = vec3(0.0, 0.0, 1.0);\nconst vec3 MEDIUM_BLUE = vec3(0.0, 0.0, 0.804);\nconst vec3 DARK_BLUE = vec3(0.0, 0.0, 0.545);\nconst vec3 NAVY = vec3(0.0, 0.0, 0.502);\nconst vec3 MIDNIGHT_BLUE = vec3(0.098, 0.098, 0.439);\nconst vec3 CORNSILK = vec3(1.0, 0.973, 0.863);\nconst vec3 BLANCHED_ALMOND = vec3(1.0, 0.922, 0.804);\nconst vec3 BISQUE = vec3(1.0, 0.894, 0.769);\nconst vec3 NAVAJO_WHITE = vec3(1.0, 0.871, 0.678);\nconst vec3 WHEAT = vec3(0.961, 0.871, 0.702);\nconst vec3 BURLY_WOOD = vec3(0.871, 0.722, 0.529);\nconst vec3 TAN = vec3(0.824, 0.706, 0.549);\nconst vec3 ROSY_BROWN = vec3(0.737, 0.561, 0.561);\nconst vec3 SANDY_BROWN = vec3(0.957, 0.643, 0.376);\nconst vec3 GOLDENROD = vec3(0.855, 0.647, 0.125);\nconst vec3 DARK_GOLDENROD = vec3(0.722, 0.525, 0.043);\nconst vec3 PERU = vec3(0.804, 0.522, 0.247);\nconst vec3 CHOCOLATE = vec3(0.824, 0.412, 0.118);\nconst vec3 SADDLE_BROWN = vec3(0.545, 0.271, 0.075);\nconst vec3 SIENNA = vec3(0.627, 0.322, 0.176);\nconst vec3 BROWN = vec3(0.647, 0.165, 0.165);\nconst vec3 MAROON = vec3(0.502, 0.0, 0.0);\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 SNOW = vec3(1.0, 0.98, 0.98);\nconst vec3 HONEYDEW = vec3(0.941, 1.0, 0.941);\nconst vec3 MINT_CREAM = vec3(0.961, 1.0, 0.98);\nconst vec3 AZURE = vec3(0.941, 1.0, 1.0);\nconst vec3 ALICE_BLUE = vec3(0.941, 0.973, 1.0);\nconst vec3 GHOST_WHITE = vec3(0.973, 0.973, 1.0);\nconst vec3 WHITE_SMOKE = vec3(0.961, 0.961, 0.961);\nconst vec3 SEASHELL = vec3(1.0, 0.961, 0.933);\nconst vec3 BEIGE = vec3(0.961, 0.961, 0.863);\nconst vec3 OLD_LACE = vec3(0.992, 0.961, 0.902);\nconst vec3 FLORAL_WHITE = vec3(1.0, 0.98, 0.941);\nconst vec3 IVORY = vec3(1.0, 1.0, 0.941);\nconst vec3 ANTIQUE_WHITE = vec3(0.98, 0.922, 0.843);\nconst vec3 LINEN = vec3(0.98, 0.941, 0.902);\nconst vec3 LAVENDER_BLUSH = vec3(1.0, 0.941, 0.961);\nconst vec3 MISTY_ROSE = vec3(1.0, 0.894, 0.882);\nconst vec3 GAINSBORO = vec3(0.863, 0.863, 0.863);\nconst vec3 LIGHT_GREY = vec3(0.827, 0.827, 0.827);\nconst vec3 SILVER = vec3(0.753, 0.753, 0.753);\nconst vec3 DARK_GRAY = vec3(0.663, 0.663, 0.663);\nconst vec3 GRAY = vec3(0.502, 0.502, 0.502);\nconst vec3 DIM_GRAY = vec3(0.412, 0.412, 0.412);\nconst vec3 LIGHT_SLATE_GRAY = vec3(0.467, 0.533, 0.6);\nconst vec3 SLATE_GRAY = vec3(0.439, 0.502, 0.565);\nconst vec3 DARK_SLATE_GRAY = vec3(0.184, 0.31, 0.31);\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n// END ../common/colors.glsl\n\nuniform vec4 colorPrimary;\nuniform vec4 colorSecondary;\nuniform vec4 colorBackground;\nuniform vec2 iMouse;\n\nvec3 vizz(float val) {\n  vec3 color0 = ungamma(colorBackground);\n  vec3 color1 = ungamma(colorPrimary);\n  vec3 color2 = ungamma(colorSecondary);\n  vec3 cc = val >= 0.0 ? color1 : color2;\n  float v = abs(mod(abs(val) - 0.5, 2.0) - 1.0);\n  const float k = 0.5 * 0.1;\n  if (between(-0.5, 0.5, val)) {\n    return mix(color2, color1, smoothstep(-k, +k, val));\n  }\n  return mix(cc, color0, smoothstep(-0.5 - k, -0.5 + k, -v));\n}\n// #pragma glslify: export(vizz)\nvec3 vizz(float val, float mouseVal, vec2 fragCoord, vec2 mouse, vec2 iMouse) {\n  vec3 color = vizz(val);\n\n  if (-1.0 != iMouse.x) {\n    color = mix(\n      color,\n      ungamma(BLUE),\n      smoothstep(-0.2, -0.0, -abs(distance(mouse, fragCoord) - abs(mouseVal)))\n    );\n  }\n\n  return color;\n}\n\n#define VIZZ(SDF)                                                              \\\n  (vizz(                                                                       \\\n    SDF((coord - 0.5) * iResolution * 0.1),                                    \\\n    SDF((iMouse - 0.5 * iResolution) * 0.1),                                   \\\n    coord * iResolution * 0.1,                                                 \\\n    iMouse * 0.1,                                                              \\\n    iMouse                                                                     \\\n  ))\n\n// END ./vizz.glsl\n\nuniform vec2 iResolution;\nuniform float iTime;\nin vec2 coord;\nout vec4 fragColor;\n\nfloat sdf(vec2 c) {\n  return sdTriangleIsosceles(vec2(2, -7), c);\n}\n\nvoid main() {\n  vec3 color = VIZZ(sdf);\n  color = pow(color, vec3(1.0 / 2.2)); // gamma correction\n  fragColor = vec4(color, 1);\n}\n"},3016:(n,c,e)=>{var o={"./demoArc.frag":3427,"./demoArrow.frag":5412,"./demoHeart.frag":8371,"./demoHexagon.frag":3919,"./demoNgon.frag":7640,"./demoOctagon.frag":7758,"./demoRectangle.frag":3076,"./demoSegment.frag":3593,"./demoText.frag":9012,"./demoTri.frag":8947,"./demoTriEqui.frag":4877,"./demoTriIso.frag":7391};function v(n){var c=t(n);return e(c)}function t(n){if(!e.o(o,n)){var c=new Error("Cannot find module '"+n+"'");throw c.code="MODULE_NOT_FOUND",c}return o[n]}v.keys=function(){return Object.keys(o)},v.resolve=t,n.exports=v,v.id=3016}}]);