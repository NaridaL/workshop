{"version":3,"file":"4.js","mappings":"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,QACA,QACA,SAEDC,OAAQ,CACP,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,OAEDC,KAAM,CACL,QACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,QACA,QAEDC,KAAM,CACL,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,SAEDC,KAAM,CACL,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,OAEDC,OAAQ,CACP,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,SAEDC,KAAM,CACL,QACA,QACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,MACA,OAEDC,KAAM,CACL,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,SAEDC,KAAM,CACL,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,SAEDC,KAAM,CAAC,QAAU,SAAU,QAAU,SAAU,SAAU,SAAU,SAAU,UAC7EC,OAAQ,CAAC,QAAU,SAAU,SAAU,SAAU,QAAU,SAAU,SAAU,SAC/EC,KAAM,CAAC,SAAU,QAAU,QAAU,QAAU,SAAU,SAAU,SAAU,SAAU,UACvFC,KAAM,CACL,QACA,SACA,SACA,SACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,UAEDC,MAAO,CAAC,QAAU,SAAU,QAAU,SAAU,QAAU,SAAU,SAAU,SAC9EC,OAAQ,CACP,SACA,QACA,SACA,QACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,UAEDC,QAAS,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,UAChFC,QAAS,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,WAS9ErG,EAAS,CACrBsG,UAAW,SACXC,aAAc,SACdC,KAAM,MACNC,WAAY,QACZC,MAAO,SACPC,MAAO,SACPC,OAAQ,SACRrF,MAAO,EACPsF,eAAgB,SAChBC,KAAM,IACNC,WAAY,QACZC,MAAO,SACPC,UAAW,SACXC,UAAW,QACXC,WAAY,QACZC,UAAW,SAC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,GAC9CwB,EAEF,YCxoFA5D,EAAOC,QAAU,CACf,EAAG,OACH,EAAG,MACH,EAAG,YACH,EAAG,aACH,EAAG,YACH,EAAG,iBACH,EAAG,eACH,IAAK,mBACL,IAAK,QACL,IAAK,OACL,IAAK,QACL,IAAK,SACL,IAAK,UACL,IAAK,WACL,IAAK,SACL,IAAK,SACL,IAAK,YACL,IAAK,sBACL,IAAK,YACL,IAAK,sBACL,IAAK,YACL,IAAK,sBACL,IAAK,YACL,IAAK,sBACL,IAAK,qBACL,KAAM,qBACN,KAAM,QACN,KAAM,OACN,KAAM,iBACN,KAAM,eACN,KAAM,gBACN,KAAM,oBACN,KAAM,gBACN,KAAM,gCACN,KAAM,KACN,KAAM,MACN,KAAM,aACN,KAAM,YACN,KAAM,iBACN,KAAM,aACN,KAAM,cACN,KAAM,aACN,KAAM,kBACN,KAAM,oBACN,KAAM,aACN,KAAM,eACN,KAAM,sBACN,KAAM,eACN,KAAM,qBACN,KAAM,eACN,KAAM,0BACN,KAAM,0BACN,KAAM,cACN,KAAM,oBACN,KAAM,WACN,KAAM,SACN,KAAM,QACN,KAAM,cACN,KAAM,eACN,KAAM,oBACN,KAAM,kBACN,KAAM,mBACN,KAAM,iBACN,KAAM,mBACN,KAAM,oBACN,KAAM,gBACN,KAAM,WACN,KAAM,aACN,KAAM,YACN,KAAM,aACN,KAAM,aACN,KAAM,eACN,KAAM,aACN,KAAM,YACN,KAAM,UACN,KAAM,SACN,KAAM,OACN,KAAM,gBACN,KAAM,QACN,KAAM,iBACN,KAAM,MACN,KAAM,eACN,KAAM,QACN,KAAM,SACN,KAAM,UACN,KAAM,gBACN,KAAM,kBACN,KAAM,QACN,KAAM,MACN,KAAM,OACN,KAAM,YACN,KAAM,kBACN,KAAM,OACN,KAAM,UACN,KAAM,OACN,KAAM,OACN,KAAM,SACN,KAAM,WACN,KAAM,UACN,KAAM,UACN,KAAM,SACN,KAAM,yBACN,KAAM,wBACN,KAAM,wBACN,KAAM,uBACN,MAAO,qBACP,MAAO,qBACP,MAAO,iBACP,MAAO,iBACP,MAAO,SACP,MAAO,uBACP,MAAO,mBACP,MAAO,iBACP,MAAO,2BACP,MAAO,iBACP,MAAO,2BACP,MAAO,cACP,MAAO,WACP,MAAO,qBACP,MAAO,gBACP,MAAO,wBACP,MAAO,yBACP,MAAO,yBACP,MAAO,sBACP,MAAO,wBACP,MAAO,QACP,MAAO,UACP,MAAO,qBACP,MAAO,2BACP,MAAO,kBACP,MAAO,iBACP,MAAO,UACP,MAAO,wBACP,MAAO,yBACP,MAAO,gBACP,MAAO,gBACP,MAAO,kBACP,MAAO,kBACP,MAAO,gBACP,MAAO,uBACP,MAAO,oBACP,MAAO,2BACP,MAAO,uBACP,MAAO,kBACP,MAAO,2BACP,MAAO,2BACP,MAAO,WACP,MAAO,WACP,MAAO,WACP,MAAO,WACP,MAAO,WACP,MAAO,WACP,MAAO,WACP,MAAO,WACP,MAAO,WACP,MAAO,WACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,KAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,iBACP,MAAO,wBACP,MAAO,gBACP,MAAO,YACP,MAAO,YACP,MAAO,mBACP,MAAO,2BACP,MAAO,8BACP,MAAO,8BACP,MAAO,8BACP,MAAO,8BACP,MAAO,8BACP,MAAO,8BACP,MAAO,4BACP,MAAO,8BACP,MAAO,2BACP,MAAO,6BACP,MAAO,2BACP,MAAO,wBACP,MAAO,8BACP,MAAO,iCACP,MAAO,6BACP,MAAO,cACP,MAAO,eACP,MAAO,oBACP,MAAO,oBACP,MAAO,+BACP,MAAO,+BACP,MAAO,uBACP,MAAO,qBACP,MAAO,iCACP,MAAO,0BACP,MAAO,eACP,MAAO,uBACP,MAAO,uBACP,MAAO,+BACP,MAAO,qCACP,MAAO,cACP,MAAO,cACP,MAAO,eACP,MAAO,kBACP,MAAO,gBACP,MAAO,iCACP,MAAO,mCACP,MAAO,cACP,MAAO,aACP,MAAO,aACP,MAA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A,0BACA,gBAGA,QACA,QACA,YACA,QACA,QACA,iBACA,kBACA,iBACA,kBACA,gBACA,kBACA,gBACA,kBACA,eACA,iBACA,eACA,YACA,cACA,UACA,UACA,cACA,cACA,aACA,gBACA,aACA,mBACA,oBACA,mBACA,iBACA,uBACA,cACA,oBACA,kBACA,oCCnEJlnB,EAAOC,QAAU,CAEf,MACE,OACA,MACA,MACA,OACA,OACA,OACA,QACA,MACA,QACA,OACA,OACA,UACA,WACA,MACA,QACA,MACA,OACA,cACA,QACA,QACA,eACA,2BACA,sBACA,kBACA,wBACA,eACA,gBACA,WACA,gBACA,0BACA,eACA,eACA,eACA,eACA,SACA,cACA,kBACA,mBACA,eACA,eACA,cACA,eACA,kBACA,gBACA,iBACA,4BACA,uBACA,mBACA,yBACA,gBACA,0BACA,wBACA,mBACA,iBACA,2BACA,wBACA,mBACA,kCACA,oBACA,kCACA,eACA,sBACA,0BACA,qBACA,sBACA,sBACA,gCACA,gCACA,qBACA,4BACA,qCACA,8BACA,+BACA,sCACA,+CACA,wCACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,YACA,kBACA,iBACA,kBACA,kBACA,kBACA,kBACA,WACA,gBACA,qBACA,eACA,cACA,sBACA,6BACA,sCACA,+BACA,oBACA,cACA,qBACA,mBACA,0BACA,mCACA,4BACA,YACA,cACA,mBACA,cACA,SACA,WACA,gBACA,MACA,OACA,iBACA,MACA,MACA,MACA,MACA,YACA,MACA,WACA,MACA,UACA,UACA,UACA,OACA,MACA,aACA,OACA,OACA,MACA,YACA,eACA,gBACA,mBACA,cACA,iBACA,kBACA,sBACA,oBACA,mBACA,uBACA,sCCpJJ,IAAI+mB,EAAO,EAAQ,MAEnBhnB,EAAOC,QAAU+mB,EAAK5jB,QAAQ8jB,OAAO,CAClC,SACC,WACA,SACA,OACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,QACA,oBACA,iBACA,uBACA,aACA,aACA,eACA,kBACA,aACA,aACA,eACA,kBACA,WACA,WACA,WACA,YACA,WACA,cACA,gBACA,QACA,SACA,aACA,SACA,YACA,SACA,SACA,UACA,UACA,UACA,YACA,WACA,WACA,WACA,aACA,WACA,WACA,WACA,aACA,eACA,eACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,qBACA,qBACA,cACA,eACA,eACA,iBACA,uBACA,aACA,kBACA,aACA,kBACA,iBACA,iBACA,gBACA,iBACA,iBACA,cACA,eACA,eACA,mBACA,oBACA,gCCrFJlnB,EAAOC,QAAU,CAEb,YACA,QACA,UACA,OACA,YACA,QACA,UACA,UACA,QACA,WACA,KACA,MACA,QACA,KACA,OACA,KACA,MACA,QACA,QACA,MACA,OACA,OACA,OACA,OACA,QACA,UACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,QACA,YACA,YACA,YACA,cACA,kBACA,kBACA,SAGA,MACA,QACA,QACA,OACA,UACA,WACA,OACA,SACA,OACA,SACA,UACA,SACA,WACA,WACA,SACA,SACA,SACA,WACA,YACA,OACA,QACA,SACA,OACA,QACA,WACA,QACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,gBACA,gBACA,sBACA,SACA,OACA,YACA,mBC5FJD,EAAOC,QAAU,CACb,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,qBC7CJ,IAAIyjB,EAAW,EAAQ,MAEvB1jB,EAAOC,QAEP,SAAwBe,EAAK8iB,GAC3B,IAAIqD,EAAYzD,EAASI,GACrBH,EAAS,GAKb,OAHAA,EAASA,EAAOuD,OAAOC,EAAUnmB,KACjBkmB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","sources":["/dev/workshop/./node_modules/add-line-numbers/index.js?","/dev/workshop/./node_modules/atob-lite/atob-browser.js?","/dev/workshop/./node_modules/chroma.ts/src/index.ts?","/dev/workshop/./node_modules/gl-constants/1.0/numbers.js?","/dev/workshop/./node_modules/gl-constants/lookup.js?","/dev/workshop/./node_modules/gl-format-compiler-error/index.js?","/dev/workshop/./node_modules/glsl-shader-name/index.js?","/dev/workshop/./node_modules/glsl-tokenizer/index.js?","/dev/workshop/./node_modules/glsl-tokenizer/lib/builtins-300es.js?","/dev/workshop/./node_modules/glsl-tokenizer/lib/builtins.js?","/dev/workshop/./node_modules/glsl-tokenizer/lib/literals-300es.js?","/dev/workshop/./node_modules/glsl-tokenizer/lib/literals.js?","/dev/workshop/./node_modules/glsl-tokenizer/lib/operators.js?","/dev/workshop/./node_modules/glsl-tokenizer/string.js?","/dev/workshop/./node_modules/pad-left/index.js?","/dev/workshop/./node_modules/repeat-string/index.js?","/dev/workshop/./node_modules/sprintf-js/src/sprintf.js?","/dev/workshop/./node_modules/tslib/tslib.es6.js?","/dev/workshop/./node_modules/tsgl/src/Buffer.ts?","/dev/workshop/./node_modules/tsgl/src/Mesh.ts?","/dev/workshop/./node_modules/tsgl/src/Shader.ts?","/dev/workshop/./node_modules/tsgl/src/Texture.ts?","/dev/workshop/./node_modules/tsgl/src/KhronosGroupWebGLDebug.ts?","/dev/workshop/./node_modules/tsgl/src/TSGLContext.ts?","/dev/workshop/./node_modules/tsgl/src/shaders/posCoordVS.glslx?","/dev/workshop/./node_modules/tsgl/src/shaders/sdfRenderFS.glslx?"],"sourcesContent":["var padLeft = require('pad-left')\n\nmodule.exports = addLineNumbers\nfunction addLineNumbers (string, start, delim) {\n  start = typeof start === 'number' ? start : 1\n  delim = delim || ': '\n\n  var lines = string.split(/\\r?\\n/)\n  var totalDigits = String(lines.length + start - 1).length\n  return lines.map(function (line, i) {\n    var c = i + start\n    var digits = String(c).length\n    var prefix = padLeft(c, totalDigits - digits)\n    return prefix + delim + line\n  }).join('\\n')\n}\n","module.exports = function _atob(str) {\n  return atob(str)\n}\n","/**\n * @license\n *\n * js - JavaScript library for color conversions\n *\n * Copyright (c) 2011-2017, Gregor Aisch\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. The name Gregor Aisch may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// tslint:disable:no-unnecessary-qualifier\n\nconst { abs, atan2, cos, floor, log, min, max, round, sign, sin, sqrt, cbrt, PI, hypot } = Math\n\nfunction lerp(a: number, b: number, f: number) {\n\treturn a + (b - a) * f\n}\nfunction lerpInv(a: number, b: number, f: number) {\n\treturn (f - a) / (b - a)\n}\nfunction clamp(x: number, min = 0, max = 1) {\n\treturn x < min ? min : x > max ? max : x\n}\n\nfunction newtonIterate1d(f: (x: number) => number, xStart: number, max_steps: number, eps: number = 1e-8): number {\n\tlet x = xStart,\n\t\tfx\n\twhile (max_steps-- && abs((fx = f(x))) > eps) {\n\t\tconst dfdx = (f(x + eps) - fx) / eps\n\t\tconsole.log(\"fx / dfdx\", fx / dfdx, \"fx\", fx, \"x\", x)\n\t\tx = x - fx / dfdx\n\t}\n\treturn x\n}\nfunction bisect(f: (x: number) => number, a: number, b: number, steps: number) {\n\t//assert(a < b)\n\tlet fA = f(a)\n\t// let fB = f(b)\n\t//assert(fA * fB < 0)\n\twhile (steps--) {\n\t\tconst c = (a + b) / 2\n\t\tconst fC = f(c)\n\t\t// console.log(\"fC\", fC, \"c\", c)\n\t\tif (sign(fA) == sign(fC)) {\n\t\t\ta = c\n\t\t\tfA = fC\n\t\t} else {\n\t\t\tb = c\n\t\t\t// fB = fC\n\t\t}\n\t}\n\t//assert(a <= (b + a) / 2)\n\t//assert(b >= (b + a) / 2)\n\treturn (a + b) / 2\n}\n\nconst TWOPI = 2 * PI\n\nconst DEG2RAD = PI / 180\n\nconst RAD2DEG = 180 / PI\n/**\n * @param alpha1 default=1\n * @example chroma.color(99, 99, 44, 0.7)\n */\nexport function color(red255: number, green255: number, blue255: number, alpha1?: number): Color\n/**\n * @example chroma.color('mediumorchid') // a css string\n * @example chroma.color([56, 203, 30]) // a RGB triple\n * @example chroma.color(0x4b0082) // a hex num\n * @example chroma.color([30, 0.8, 0.3], 'hsl') // explicit format\n */\nexport function color(x: Chromable, format?: ColorFormat): Color\n/**\n * This overload allows VS Code to suggest color names when you type `color('`.\n */\nexport function color(colorname: keyof typeof w3cx11, format?: \"name\"): Color\n/** @example chroma.color(30, 0.8, 0.3, 'hsl') */\nexport function color(channel0: number, channel1: number, channel2: number, format: ColorFormat): Color\n/** @example chroma.color(0.3, 0.8, 0.3, 1, 'gl') */\nexport function color(\n\tchannel0: number,\n\tchannel1: number,\n\tchannel2: number,\n\tchannel3: number,\n\tformat: ColorFormat,\n): Color\nexport function color(...args: any[]) {\n\tif (args[0] instanceof Color) {\n\t\treturn args[0]\n\t}\n\tif (args.length > 1 && \"string\" == typeof args[args.length - 1]) {\n\t\treturn guess(args.slice(0, args.length - 1), args[args.length - 1])\n\t} else if (Array.isArray(args[0])) {\n\t\treturn guess(args[0])\n\t} else {\n\t\treturn guess(args)\n\t}\n}\n/**\n * A Chromable is any value which can be converted to a color. For ease of use, most functions accept these instead of\n * only Color values.\n */\nexport type Chromable = number | string | Color | number[]\n\nexport class Color {\n\t/** @internal */\n\tconstructor(\n\t\tprivate readonly r: number,\n\t\tprivate readonly g: number,\n\t\tprivate readonly b: number,\n\t\tprivate readonly a = 1,\n\t) {}\n\n\t// public shade() {\n\t// \tconst shades: [string, string, number][] = [\n\t// \t\t[\"ff0000\", \"red\"],\n\t// \t\t[\"ffa500\", \"orange\"],\n\t// \t\t[\"ffff00\", \"yellow\"],\n\t// \t\t[\"008000\", \"green\"],\n\t// \t\t[\"0000ff\", \"blue\"],\n\t// \t\t[\"ee82ee\", \"violet\"],\n\t// \t\t[\"a52a2a\", \"brown\"],\n\t// \t\t[\"000000\", \"black\"],\n\t// \t\t[\"808080\", \"grey\"],\n\t// \t\t[\"ffffff\", \"white\"],\n\t// \t] as any\n\t// \tfunction angleDiff(a: number, b: number) {\n\t// \t\tconst d = (a - b) % 360\n\t// \t\tif (d > 180) return d - 360\n\t// \t\tif (d < -180) return d + 360\n\t// \t\treturn d\n\t// \t}\n\t// \tshades.forEach(arr => arr.push(color(arr[0]).hsl()[0]))\n\t// \tconst [h, s, l] = this.hsl()\n\t// \tif (l > 0.9) return \"white\"\n\t// \tif (l > 0.8 && s < 0.2) return \"white\"\n\t// \tif (s < 0.1) return \"grey\"\n\t// \tif (s < 0.4 && h > 0 && h < 48) return \"brown\"\n\n\t// \tconst distanceInXYZ: { [hue: number]: number } = { 0: 0 }\n\t// \tfor (let i = 60; i <= 360; i += 60) {\n\t// \t\tdistanceInXYZ[i] =\n\t// \t\t\tdistanceInXYZ[i - 60] + distance(hsl(i - 60, 1, 0.5), hsl(i, 1, 0.5), \"xyz\")\n\t// \t}\n\t// \t// console.log(distanceInXYZ)\n\n\t// \tconst shadeEnds: { [hue: number]: number } = {\n\t// \t\t0: 9,\n\t// \t\t38: 48,\n\t// \t\t60: 65,\n\t// \t\t120: 165,\n\t// \t\t240: 245,\n\t// \t\t300: 338,\n\t// \t\t360: 369,\n\t// \t}\n\n\t// \tconst getColorDistanceAlongXYZHue = (hueDegrees: number) => {\n\t// \t\tconst base = hueDegrees - (hueDegrees % 60)\n\t// \t\treturn (\n\t// \t\t\tdistanceInXYZ[base] + distance(hsl(base, 1, 0.5), hsl(hueDegrees, 1, 0.5), \"xyz\")\n\t// \t\t)\n\t// \t}\n\t// \tconst colorXYZD = getColorDistanceAlongXYZHue(this.hsl()[0])\n\t// \tconst md = distanceInXYZ[360]\n\t// \tconst shadeHue =\n\t// \t\t(Object.keys(shadeEnds) as any[]).find(shadeHue => shadeEnds[shadeHue | 0] >= this.hsl()[0])! % 360\n\t// \treturn shades.find(([_hex, _name, _hue]) => (_hue | 0) === shadeHue)![1]\n\t// \t// process.exit()\n\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\n\t// \t\treturn -abs(angleDiff(this.hsl()[0], _hue))\n\t// \t})[1]\n\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\n\t// \t\tconst [thisL, thisA, thisB] = this.lab()\n\t// \t\tconst [L, A, B] = color(_hex).lab()\n\t// \t\treturn -hypot(thisL - L, thisA - A, thisB - B)\n\t// \t})[1]\n\t// }\n\n\t/**\n\t * @see [[mix]]\n\t */\n\tpublic mix(col2: Chromable, f: number, m: InterpolationMode = \"rgb\") {\n\t\treturn mix(this, col2, f, m)\n\t}\n\tpublic rgb(doRound = true, clamp_ = true): RGB {\n\t\tconst f = (t: number) => {\n\t\t\tif (doRound) t = round(t)\n\t\t\tif (clamp_) t = clamp(t, 0, 255)\n\t\t\treturn t\n\t\t}\n\t\tconst { r, g, b } = this\n\t\treturn [f(r), f(g), f(b)]\n\t}\n\tpublic rgba(doRound = true, clamp_ = true): RGBA {\n\t\tconst f = (t: number) => {\n\t\t\tif (doRound) t = round(t)\n\t\t\tif (clamp_) t = clamp(t, 0, 255)\n\t\t\treturn t\n\t\t}\n\t\tconst { r, g, b, a } = this\n\t\treturn [f(r), f(g), f(b), a]\n\t}\n\n\t/**\n\t * Return a hex-string representation of this color.\n\t *\n\t * @param mode\n\t * @see #num for a hex-number representation.\n\t * @example chroma.color('yellow').alpha(0.7).hex()\n\t * @example chroma.color('yellow').alpha(0.7).hex('rgba')\n\t * @example chroma.color('yellow').alpha(0.7).hex('argb')\n\t */\n\tpublic hex(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\t\tconst { r, g, b, a } = this\n\t\treturn rgb2hex(r, g, b, a, mode)\n\t}\n\n\t/**\n\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hsl()\n\t */\n\tpublic hsl(): HSL {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hsl(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hsv()\n\t */\n\tpublic hsv() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hsv(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hcg()\n\t */\n\tpublic hcg() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hcg(r, g, b)\n\t}\n\n\t/**\n\t * Returns a CSS `rgb(...)` or `hsl(...)` string representation that can be used as CSS-color definition. The alpha\n\t * value is not output if it 1.\n\t * @example chroma.color('teal').css() // == \"rgb(0,128,128)\"\n\t * @example chroma.color('teal').alpha(0.5).css() // == \"rgba(0,128,128,0.5)\"\n\t * @example chroma.color('teal').css('hsl') // == \"hsl(180,100%,25.1%)\"\n\t */\n\tpublic css(mode: \"rgb\" | \"hsl\" = \"rgb\") {\n\t\tif (\"rgb\" == mode) {\n\t\t\tconst { r, g, b, a } = this\n\t\t\treturn rgb2css(r, g, b, a)\n\t\t} else if (\"hsl\" == mode) {\n\t\t\treturn hsl2css(this.hsl(), this.alpha())\n\t\t} else {\n\t\t\tthrow new Error()\n\t\t}\n\t}\n\n\tpublic name(closest: true): string\n\t/**\n\t * Get the name of a color. By default, this method will try to match the color exactly (comparing rounded RGB\n\t * values). Pass `true` to return the name of the color which is closest to `this` in CIELAB color space. CIELAB is\n\t * used as it is perceptually uniform.\n\t * @param closest Whether this should find the closest color name. default=false\n\t * @return If `closest == false`, the name of this color or `undefined` if there is no match. Otherwise, will always\n\t * return a color name.\n\t * @example chroma.color('#ff0000').name() // == \"red\"\n\t * @example chroma.color('#ff0001').name() // == undefined\n\t * @example chroma.color('#ff0001').name(true) // == \"red\"\n\t */\n\tpublic name(closest?: boolean): string | undefined\n\tpublic name(closest: boolean = false): string | undefined {\n\t\tconst thisNum = this.num()\n\t\tconst name = Object.keys(w3cx11).find((name) => (w3cx11 as any)[name] == thisNum)\n\t\tif (!name && closest) {\n\t\t\tconst [thisLStar, thisAStar, thisBStar] = this.lab()\n\t\t\treturn withMax(Object.keys(w3cx11) as (keyof typeof w3cx11)[], (name) => {\n\t\t\t\tconst [lStar, aStar, bStar] = num(w3cx11[name]).lab()\n\t\t\t\treturn -hypot(thisLStar - lStar, thisAStar - aStar, thisBStar - bStar)\n\t\t\t})\n\t\t}\n\t\treturn name\n\t}\n\n\t/**\n\t * Get the [CMYK](#CMYK) representation of this color.\n\t *\n\t * @example chroma.color('red').cmyk()\n\t */\n\tpublic cmyk() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2cmyk(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [GL] representation of this color.\n\t * @example chroma.color('33cc00').gl()\n\t */\n\tpublic gl(): GL {\n\t\tconst { r, g, b, a } = this\n\t\treturn [r / 255, g / 255, b / 255, a]\n\t}\n\n\t/**\n\t * Get luminance of the color. This is equal to the Y channel of the XYZ color space.\n\t * @example chroma.color('black').luminance() // == 0\n\t * @example chroma.color('white').luminance() // == 1\n\t * @example chroma.color('red').luminance() // == ~0.21\n\t * @see https://en.wikipedia.org/wiki/Relative_luminance\n\t */\n\tpublic luminance(): number\n\t/**\n\t * Return a new [Color] with `lum1` by linearly interpolating `this` with white (when increasing the luminance) or\n\t * black (otherwise) in the [XYZ] color space.\n\t * @see https://en.wikipedia.org/wiki/Relative_luminance\n\t * @example // Approximately doubling the luminance of red\n\t * @example chroma.color('red').luminance(0.4) // == #ff8686 // \"Vivid Tangerine\"\n\t * @param lum1 The desired luminance.\n\t */\n\tpublic luminance(lum1: number): this\n\tpublic luminance(lum1?: number) {\n\t\tconst { r, g, b, a } = this\n\t\tconst [, Y] = rgb2xyz(r, g, b)\n\t\tif (undefined === lum1) {\n\t\t\treturn Y\n\t\t}\n\t\tconst inverseLerp = (a: number, b: number, val: number) => (val - a) / (b - a)\n\t\tif (lum1 > Y) {\n\t\t\t// lerp to white\n\t\t\treturn mix(this, white, inverseLerp(Y, 1, lum1), \"xyz\").alpha(a)\n\t\t} else {\n\t\t\t// lerp to black\n\t\t\treturn mix(black, this, inverseLerp(0, Y, lum1), \"xyz\").alpha(a)\n\t\t}\n\t}\n\n\t/**\n\t * Get color temperature of this color in Kelvin. This only makes sense for colors close to those output by\n\t * kelvin\n\t *\n\t * @example [c = chroma.color('#ff3300'), c.temperature()]\n\t * @example [c = chroma.color('#ffe3cd'), c.temperature()]\n\t * @example [c = chroma.color('#b3ccff'), c.temperature()]\n\t */\n\tpublic temperature() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2kelvin(r, g, b)\n\t}\n\n\t/**\n\t * Returns a new [Color] with a channel changed.\n\t * @example chroma.color('skyblue').set('hsl.h', 0) // change hue to 0 deg (=red)\n\t * @example chroma.color('hotpink').set('lch.c', 30) // set chromaticity to 30\n\t * @example chroma.color('orangered').set('lab.l', x => x / 2) // half Lab lightness\n\t * @example chroma.color('darkseagreen').set('lch.c', x => x * 2) // double Lch saturation\n\t */\n\tpublic set(modeAndChannel: string, value: number | ((channel: number) => number)) {\n\t\tconst [mode, channel] = modeAndChannel.split(\".\") as [ColorMode, string]\n\t\tconst src = this[mode]()\n\t\tconst i = mode.indexOf(channel)\n\t\tif (-1 == i) throw new Error(\"invalid channel\")\n\t\tsrc[i] = \"number\" == typeof value ? value : value(src[i])\n\t\treturn color(src, mode).alpha(this.a)\n\t}\n\n\t/**\n\t * Returns whether this color is outside the RGB color cube and will be clipped/clamped when calling .rgb()\n\t *\n\t * @example [c = chroma.lch( 20, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch( 40, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch( 60, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch( 80, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch(100, 40, 50), c.clipped()]\n\t */\n\tpublic clipped() {\n\t\tconst { r, g, b } = this\n\t\treturn !(0 <= r && r <= 255 && 0 <= g && g <= 255 && 0 <= b && b <= 255)\n\t}\n\n\t/**\n\t * Returns black or white, whichever has the highest contrast to `this`.\n\t * In the readme you should see the result of this.\n\t *\n\t * @example chroma.color('red')\n\t * @example chroma.color('yellow')\n\t */\n\tpublic textColor() {\n\t\treturn this.luminance() > 0.5 ? black : white\n\t}\n\n\t/**\n\t * Get alpha value of color.\n\t * @example chroma.rgb(0, 0, 255, 0.5).alpha() // == 0.5\n\t */\n\tpublic alpha(): number\n\t/**\n\t * Return new [Color] with given alpha value.\n\t * @example chroma.color('green').alpha(0.3)\n\t * @example chroma.color('green').alpha(0.3).hex('rgba') // == \"#00ff004d\"\n\t * @param alpha1 The desired alpha value.\n\t */\n\tpublic alpha(alpha1: number): Color\n\tpublic alpha(alpha1?: number): number | Color {\n\t\tif (undefined === alpha1) {\n\t\t\treturn this.a\n\t\t}\n\t\tconst { r, g, b } = this\n\t\treturn rgb(r, g, b, alpha1)\n\t}\n\n\tpublic darker(amount = 1) {\n\t\tconst [l, a, b] = this.lab()\n\t\treturn lab(l - LAB_Kn * amount, a, b, this.alpha())\n\t}\n\n\t/**\n\t *\n\t * @param amount\n\t * @example chroma.color('hotpink')\n\t * @example chroma.color('hotpink').brighter()\n\t * @example chroma.color('hotpink').brighter(2)\n\t * @example chroma.color('hotpink').brighter(3)\n\t */\n\tpublic brighter(amount = 1) {\n\t\treturn this.darker(-amount)\n\t}\n\n\t/**\n\t * Returns a new [Color] with increased saturation.\n\t * @param amount How much.\n\t * @example chroma.color('slategray')\n\t * @example chroma.color('slategray').saturate()\n\t * @example chroma.color('slategray').saturate(2)\n\t * @example chroma.color('slategray').saturate(3)\n\t */\n\tpublic saturate(amount = 1) {\n\t\tconst [l, c, h] = this.lch()\n\t\treturn lch(l, max(0, c + amount * LAB_Kn), h, this.alpha())\n\t}\n\n\t/**\n\t * Equivalent to `saturate(-amount)`.\n\t * @see #saturate\n\t */\n\tpublic desaturate(amount = 1) {\n\t\treturn this.saturate(-amount)\n\t}\n\n\tpublic premultiplied() {\n\t\tconst { r, g, b, a } = this\n\t\treturn rgb(r * a, g * a, b * a, a)\n\t}\n\n\t/**\n\t * Returns the [HSI] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hsi()\n\t */\n\tpublic hsi() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hsi(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [LAB] representation of this color.\n\t *\n\t * @example chroma.color('purple').lab()\n\t */\n\tpublic lab() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2lab(r, g, b)\n\t}\n\n\t/**\n\t * Return a hex-num of this color.\n\t *\n\t * @param mode\n\t * @see #num for a hex-number representation.\n\t * @example chroma.color('yellow').alpha(0.7).hex()\n\t * @example chroma.color('yellow').alpha(0.7).hex('rgba')\n\t * @example chroma.color('yellow').alpha(0.7).hex('argb')\n\t */\n\tpublic num(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\t\tconst { r, g, b, a } = this\n\t\treturn rgb2num(r, g, b, a, mode)\n\t}\n\n\t/**\n\t * Returns the [LCH] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').lch()\n\t */\n\tpublic lch() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2lch(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [XYZ] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').xyz()\n\t */\n\tpublic xyz() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2xyz(r, g, b)\n\t}\n\n\t/**\n\t * Whether this [Color](#Color) is identical (strict equality of r, g, b, a) to `color`.\n\t */\n\tpublic equals(color: Color) {\n\t\tconst { r, g, b, a } = this\n\t\tconst { r: r2, g: g2, b: b2, a: a2 } = color\n\t\treturn r == r2 && g == g2 && b == b2 && a == a2\n\t}\n\n\tpublic hashCode() {\n\t\treturn this.num(\"rgba\")\n\t}\n\n\t/**\n\t * @example chroma.color('red').toSource() // == \"rgb(255, 0, 0)\"\n\t * @example chroma.rgb(-2, 100.02, 200, 0.5).toSource() // == \"rgb(-2, 100.02, 200, 0.5)\"\n\t */\n\tpublic toSource() {\n\t\tconst { r, g, b, a } = this\n\t\treturn \"chroma.rgb(\" + r + \", \" + g + \", \" + b + (a === 1 ? \")\" : \", \" + a + \")\")\n\t}\n}\nexport interface Color {\n\ttoString(): string\n\t//darker(amount: number): Color\n\t//brighter(amount: number): Color\n\tkelvin(): number\n}\nColor.prototype.toString = Color.prototype.css\nColor.prototype.kelvin = Color.prototype.temperature\n/**\n * @example chroma.black\n */\nexport const black = new Color(0, 0, 0, 1)\n\n/**\n * @example chroma.black\n */\nexport const white = new Color(255, 255, 255, 1)\n\nexport const brewer = {\n\tOrRd: [0xfff7ec, 0xfee8c8, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0xb30000, 0x7f0000],\n\tPuBu: [0xfff7fb, 0xece7f2, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x0570b0, 0x045a8d, 0x023858],\n\tBuPu: [0xf7fcfd, 0xe0ecf4, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x810f7c, 0x4d004b],\n\tOranges: [0xfff5eb, 0xfee6ce, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0xa63603, 0x7f2704],\n\tBuGn: [0xf7fcfd, 0xe5f5f9, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x006d2c, 0x00441b],\n\tYlOrBr: [0xffffe5, 0xfff7bc, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x993404, 0x662506],\n\tYlGn: [0xffffe5, 0xf7fcb9, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x006837, 0x004529],\n\tReds: [0xfff5f0, 0xfee0d2, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0xa50f15, 0x67000d],\n\tRdPu: [0xfff7f3, 0xfde0dd, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177, 0x49006a],\n\tGreens: [0xf7fcf5, 0xe5f5e0, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x006d2c, 0x00441b],\n\tYlGnBu: [0xffffd9, 0xedf8b1, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0x253494, 0x081d58],\n\tPurples: [0xfcfbfd, 0xefedf5, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x54278f, 0x3f007d],\n\tGnBu: [0xf7fcf0, 0xe0f3db, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x0868ac, 0x084081],\n\tGreys: [0xffffff, 0xf0f0f0, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525, 0x000000],\n\tYlOrRd: [0xffffcc, 0xffeda0, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xbd0026, 0x800026],\n\tPuRd: [0xf7f4f9, 0xe7e1ef, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x980043, 0x67001f],\n\tBlues: [0xf7fbff, 0xdeebf7, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x08519c, 0x08306b],\n\tPuBuGn: [0xfff7fb, 0xece2f0, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x02818a, 0x016c59, 0x014636],\n\tViridis: [0x440154, 0x482777, 0x3f4a8a, 0x31678e, 0x26838f, 0x1f9d8a, 0x6cce5a, 0xb6de2b, 0xfee825],\n\tSpectral: [\n\t\t0x9e0142,\n\t\t0xd53e4f,\n\t\t0xf46d43,\n\t\t0xfdae61,\n\t\t0xfee08b,\n\t\t0xffffbf,\n\t\t0xe6f598,\n\t\t0xabdda4,\n\t\t0x66c2a5,\n\t\t0x3288bd,\n\t\t0x5e4fa2,\n\t],\n\tRdYlGn: [\n\t\t0xa50026,\n\t\t0xd73027,\n\t\t0xf46d43,\n\t\t0xfdae61,\n\t\t0xfee08b,\n\t\t0xffffbf,\n\t\t0xd9ef8b,\n\t\t0xa6d96a,\n\t\t0x66bd63,\n\t\t0x1a9850,\n\t\t0x006837,\n\t],\n\tRdBu: [\n\t\t0x67001f,\n\t\t0xb2182b,\n\t\t0xd6604d,\n\t\t0xf4a582,\n\t\t0xfddbc7,\n\t\t0xf7f7f7,\n\t\t0xd1e5f0,\n\t\t0x92c5de,\n\t\t0x4393c3,\n\t\t0x2166ac,\n\t\t0x053061,\n\t],\n\tPiYG: [\n\t\t0x8e0152,\n\t\t0xc51b7d,\n\t\t0xde77ae,\n\t\t0xf1b6da,\n\t\t0xfde0ef,\n\t\t0xf7f7f7,\n\t\t0xe6f5d0,\n\t\t0xb8e186,\n\t\t0x7fbc41,\n\t\t0x4d9221,\n\t\t0x276419,\n\t],\n\tPRGn: [\n\t\t0x40004b,\n\t\t0x762a83,\n\t\t0x9970ab,\n\t\t0xc2a5cf,\n\t\t0xe7d4e8,\n\t\t0xf7f7f7,\n\t\t0xd9f0d3,\n\t\t0xa6dba0,\n\t\t0x5aae61,\n\t\t0x1b7837,\n\t\t0x00441b,\n\t],\n\tRdYlBu: [\n\t\t0xa50026,\n\t\t0xd73027,\n\t\t0xf46d43,\n\t\t0xfdae61,\n\t\t0xfee090,\n\t\t0xffffbf,\n\t\t0xe0f3f8,\n\t\t0xabd9e9,\n\t\t0x74add1,\n\t\t0x4575b4,\n\t\t0x313695,\n\t],\n\tBrBG: [\n\t\t0x543005,\n\t\t0x8c510a,\n\t\t0xbf812d,\n\t\t0xdfc27d,\n\t\t0xf6e8c3,\n\t\t0xf5f5f5,\n\t\t0xc7eae5,\n\t\t0x80cdc1,\n\t\t0x35978f,\n\t\t0x01665e,\n\t\t0x003c30,\n\t],\n\tRdGy: [\n\t\t0x67001f,\n\t\t0xb2182b,\n\t\t0xd6604d,\n\t\t0xf4a582,\n\t\t0xfddbc7,\n\t\t0xffffff,\n\t\t0xe0e0e0,\n\t\t0xbababa,\n\t\t0x878787,\n\t\t0x4d4d4d,\n\t\t0x1a1a1a,\n\t],\n\tPuOr: [\n\t\t0x7f3b08,\n\t\t0xb35806,\n\t\t0xe08214,\n\t\t0xfdb863,\n\t\t0xfee0b6,\n\t\t0xf7f7f7,\n\t\t0xd8daeb,\n\t\t0xb2abd2,\n\t\t0x8073ac,\n\t\t0x542788,\n\t\t0x2d004b,\n\t],\n\tSet2: [0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b3],\n\tAccent: [0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f, 0xbf5b17, 0x666666],\n\tSet1: [0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628, 0xf781bf, 0x999999],\n\tSet3: [\n\t\t0x8dd3c7,\n\t\t0xffffb3,\n\t\t0xbebada,\n\t\t0xfb8072,\n\t\t0x80b1d3,\n\t\t0xfdb462,\n\t\t0xb3de69,\n\t\t0xfccde5,\n\t\t0xd9d9d9,\n\t\t0xbc80bd,\n\t\t0xccebc5,\n\t\t0xffed6f,\n\t],\n\tDark2: [0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02, 0xa6761d, 0x666666],\n\tPaired: [\n\t\t0xa6cee3,\n\t\t0x1f78b4,\n\t\t0xb2df8a,\n\t\t0x33a02c,\n\t\t0xfb9a99,\n\t\t0xe31a1c,\n\t\t0xfdbf6f,\n\t\t0xff7f00,\n\t\t0xcab2d6,\n\t\t0x6a3d9a,\n\t\t0xffff99,\n\t\t0xb15928,\n\t],\n\tPastel2: [0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc, 0xcccccc],\n\tPastel1: [0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd, 0xfddaec, 0xf2f2f2],\n}\n\n/**\n * X11 color names\n * http://www.w3.org/TR/css3-color/#svg-color\n *\n * @example chroma.Object.keys(w3cx11).slice(0, 4)\n */\nexport const w3cx11 = {\n\taliceblue: 0xf0f8ff,\n\tantiquewhite: 0xfaebd7,\n\taqua: 0x00ffff,\n\taquamarine: 0x7fffd4,\n\tazure: 0xf0ffff,\n\tbeige: 0xf5f5dc,\n\tbisque: 0xffe4c4,\n\tblack: 0x000000,\n\tblanchedalmond: 0xffebcd,\n\tblue: 0x0000ff,\n\tblueviolet: 0x8a2be2,\n\tbrown: 0xa52a2a,\n\tburlywood: 0xdeb887,\n\tcadetblue: 0x5f9ea0,\n\tchartreuse: 0x7fff00,\n\tchocolate: 0xd2691e,\n\tcoral: 0xff7f50,\n\tcornflower: 0x6495ed,\n\tcornflowerblue: 0x6495ed,\n\tcornsilk: 0xfff8dc,\n\tcrimson: 0xdc143c,\n\tcyan: 0x00ffff,\n\tdarkblue: 0x00008b,\n\tdarkcyan: 0x008b8b,\n\tdarkgoldenrod: 0xb8860b,\n\tdarkgray: 0xa9a9a9,\n\tdarkgreen: 0x006400,\n\tdarkgrey: 0xa9a9a9,\n\tdarkkhaki: 0xbdb76b,\n\tdarkmagenta: 0x8b008b,\n\tdarkolivegreen: 0x556b2f,\n\tdarkorange: 0xff8c00,\n\tdarkorchid: 0x9932cc,\n\tdarkred: 0x8b0000,\n\tdarksalmon: 0xe9967a,\n\tdarkseagreen: 0x8fbc8f,\n\tdarkslateblue: 0x483d8b,\n\tdarkslategray: 0x2f4f4f,\n\tdarkslategrey: 0x2f4f4f,\n\tdarkturquoise: 0x00ced1,\n\tdarkviolet: 0x9400d3,\n\tdeeppink: 0xff1493,\n\tdeepskyblue: 0x00bfff,\n\tdimgray: 0x696969,\n\tdimgrey: 0x696969,\n\tdodgerblue: 0x1e90ff,\n\tfirebrick: 0xb22222,\n\tfloralwhite: 0xfffaf0,\n\tforestgreen: 0x228b22,\n\tfuchsia: 0xff00ff,\n\tgainsboro: 0xdcdcdc,\n\tghostwhite: 0xf8f8ff,\n\tgold: 0xffd700,\n\tgoldenrod: 0xdaa520,\n\tgray: 0x808080,\n\tgreen: 0x008000,\n\tgreenyellow: 0xadff2f,\n\tgrey: 0x808080,\n\thoneydew: 0xf0fff0,\n\thotpink: 0xff69b4,\n\tindianred: 0xcd5c5c,\n\tindigo: 0x4b0082,\n\tivory: 0xfffff0,\n\tkhaki: 0xf0e68c,\n\tlaserlemon: 0xffff54,\n\tlavender: 0xe6e6fa,\n\tlavenderblush: 0xfff0f5,\n\tlawngreen: 0x7cfc00,\n\tlemonchiffon: 0xfffacd,\n\tlightblue: 0xadd8e6,\n\tlightcoral: 0xf08080,\n\tlightcyan: 0xe0ffff,\n\tlightgoldenrod: 0xfafad2,\n\tlightgoldenrodyellow: 0xfafad2,\n\tlightgray: 0xd3d3d3,\n\tlightgreen: 0x90ee90,\n\tlightgrey: 0xd3d3d3,\n\tlightpink: 0xffb6c1,\n\tlightsalmon: 0xffa07a,\n\tlightseagreen: 0x20b2aa,\n\tlightskyblue: 0x87cefa,\n\tlightslategray: 0x778899,\n\tlightslategrey: 0x778899,\n\tlightsteelblue: 0xb0c4de,\n\tlightyellow: 0xffffe0,\n\tlime: 0x00ff00,\n\tlimegreen: 0x32cd32,\n\tlinen: 0xfaf0e6,\n\tmagenta: 0xff00ff,\n\tmaroon: 0x800000,\n\tmaroon2: 0x7f0000,\n\tmaroon3: 0xb03060,\n\tmediumaquamarine: 0x66cdaa,\n\tmediumblue: 0x0000cd,\n\tmediumorchid: 0xba55d3,\n\tmediumpurple: 0x9370db,\n\tmediumseagreen: 0x3cb371,\n\tmediumslateblue: 0x7b68ee,\n\tmediumspringgreen: 0x00fa9a,\n\tmediumturquoise: 0x48d1cc,\n\tmediumvioletred: 0xc71585,\n\tmidnightblue: 0x191970,\n\tmintcream: 0xf5fffa,\n\tmistyrose: 0xffe4e1,\n\tmoccasin: 0xffe4b5,\n\tnavajowhite: 0xffdead,\n\tnavy: 0x000080,\n\toldlace: 0xfdf5e6,\n\tolive: 0x808000,\n\tolivedrab: 0x6b8e23,\n\torange: 0xffa500,\n\torangered: 0xff4500,\n\torchid: 0xda70d6,\n\tpalegoldenrod: 0xeee8aa,\n\tpalegreen: 0x98fb98,\n\tpaleturquoise: 0xafeeee,\n\tpalevioletred: 0xdb7093,\n\tpapayawhip: 0xffefd5,\n\tpeachpuff: 0xffdab9,\n\tperu: 0xcd853f,\n\tpink: 0xffc0cb,\n\tplum: 0xdda0dd,\n\tpowderblue: 0xb0e0e6,\n\tpurple: 0x800080,\n\tpurple2: 0x7f007f,\n\tpurple3: 0xa020f0,\n\trebeccapurple: 0x663399,\n\tred: 0xff0000,\n\trosybrown: 0xbc8f8f,\n\troyalblue: 0x4169e1,\n\tsaddlebrown: 0x8b4513,\n\tsalmon: 0xfa8072,\n\tsandybrown: 0xf4a460,\n\tseagreen: 0x2e8b57,\n\tseashell: 0xfff5ee,\n\tsienna: 0xa0522d,\n\tsilver: 0xc0c0c0,\n\tskyblue: 0x87ceeb,\n\tslateblue: 0x6a5acd,\n\tslategray: 0x708090,\n\tslategrey: 0x708090,\n\tsnow: 0xfffafa,\n\tspringgreen: 0x00ff7f,\n\tsteelblue: 0x4682b4,\n\ttan: 0xd2b48c,\n\tteal: 0x008080,\n\tthistle: 0xd8bfd8,\n\ttomato: 0xff6347,\n\tturquoise: 0x40e0d0,\n\tviolet: 0xee82ee,\n\twheat: 0xf5deb3,\n\twhite: 0xffffff,\n\twhitesmoke: 0xf5f5f5,\n\tyellow: 0xffff00,\n\tyellowgreen: 0x9acd32,\n}\n\n/**\n * Return a new [[CubeHelix]].\n *\n * @example chroma.cubehelix() // use the default helix\n * @example chroma.cubehelix().start(200).rotations(-0.5).gamma(0.8).lightness([0.3, 0.8])\n */\nexport function cubehelix(\n\tstart = 300,\n\trotations = -1.5,\n\thue: number | [number, number] = 1,\n\tgamma = 1,\n\tlightness: number | [number, number] = [0, 1],\n) {\n\tconst f: CubeHelix = ((t) => f.at(t)) as CubeHelix\n\t;(Object.getOwnPropertyNames(CubeHelix.prototype) as (keyof typeof CubeHelix)[]).forEach(\n\t\t(key) => (f[key] = CubeHelix.prototype[key]),\n\t)\n\tf.start(start)\n\tf.rotations(rotations)\n\tf.hue(hue)\n\tf.gamma(gamma)\n\tf.lightness(lightness)\n\treturn f\n}\n\n/**\n * [Dave Green's cubehelix color scheme](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/)!\n *\n * A CubeHelix is a function defined on [0, 1] which returns colors.\n */\nexport interface CubeHelix {\n\t(f: number): Color\n}\nexport class CubeHelix {\n\tprivate _start!: number\n\tprivate _rotations!: number\n\tprivate _gamma!: number\n\tprivate _hue!: [number, number]\n\tprivate _lightness!: [number, number]\n\n\tpublic start(): number\n\tpublic start(s: number): this\n\tpublic start(s?: number) {\n\t\tif (undefined === s) {\n\t\t\treturn this._start\n\t\t}\n\t\tthis._start = s\n\t\treturn this\n\t}\n\n\tpublic rotations(): number\n\tpublic rotations(r: number): this\n\tpublic rotations(r?: number) {\n\t\tif (undefined === r) {\n\t\t\treturn this._rotations\n\t\t}\n\t\tthis._rotations = r\n\t\treturn this\n\t}\n\n\tpublic gamma(): number\n\tpublic gamma(g: number): this\n\tpublic gamma(g?: number) {\n\t\tif (undefined === g) {\n\t\t\treturn this._gamma\n\t\t}\n\t\tthis._gamma = g\n\t\treturn this\n\t}\n\n\tpublic hue(): [number, number]\n\tpublic hue(h: number | [number, number]): this\n\tpublic hue(h?: number | [number, number]) {\n\t\tif (undefined === h) {\n\t\t\treturn this._hue\n\t\t}\n\t\tthis._hue = Array.isArray(h) ? h : [h, h]\n\t\treturn this\n\t}\n\n\tpublic lightness(): [number, number]\n\tpublic lightness(h: number | [number, number]): this\n\tpublic lightness(h?: number | [number, number]) {\n\t\tif (undefined === h) {\n\t\t\treturn this._lightness\n\t\t}\n\t\tthis._lightness = Array.isArray(h) ? h : [h, h]\n\t\treturn this\n\t}\n\n\t/**\n\t * Convert to a [[Scale]].\n\t *\n\t * @example chroma.cubehelix().scale().correctLightness().domain(2, 22)\n\t */\n\tpublic scale() {\n\t\treturn scale(this)\n\t}\n\n\tpublic at(fract: number) {\n\t\tconst a = TWOPI * ((this._start + 120) / 360 + this._rotations * fract)\n\t\tconst l = lerp(this._lightness[0], this._lightness[1], fract) ** this._gamma\n\t\tconst h = lerp(this._hue[0], this._hue[1], fract)\n\t\tconst amp = (h * l * (1 - l)) / 2\n\t\tconst cos_a = cos(a)\n\t\tconst sin_a = sin(a)\n\t\tconst r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a)\n\t\tconst g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a)\n\t\tconst b = l + amp * (+1.97294 * cos_a)\n\t\treturn rgb([r * 255, g * 255, b * 255, 1])\n\t}\n}\n\n/**\n * Create a new random [Color] from a random point in the RGB color space.\n * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\n *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\n */\nexport function random(randomSource = Math.random) {\n\treturn num((randomSource() * 0x1_00_00_00) | 0)\n}\n\n/**\n * Create a valid RGB color (`.clipped() == false`) from a random point in the CIELAB color space. This results in\n * more colors in the RGB color space where humans can perceive more differences.\n * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\n *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\n * @example chroma.random((() => { let i = 0; return () => (i = (i *Math.SQRT2) % 1); })())\n */\n// export function randomLab(randomSource = Math.random) {\n// \tconst labAMin = -87,\n// \t\tlabAMax = 99,\n// \t\tlabBMin = -108,\n// \t\tlabBMax = 95\n// \tlet maxIterations = 100\n// \twhile (maxIterations--) {\n// \t\tconst u = randomSource(),\n// \t\t\tv = randomSource(),\n// \t\t\tw = randomSource()\n// \t\t// The following matrix multiplication transform the random point (u v w) in the unit cube into the\n// \t\t// oriented bounding box (OBB) of the projection of the RGB space into the LAB space. This is necessary to\n// \t\t// avoid a huge number of misses.\n// \t\tconst color = lab(\n// \t\t\tu * -53.903 + v * -88.755 + w * 71.7 + 99.707,\n// \t\t\tu * -82.784 + v * 187.036 + w * -2.422 + -28.17,\n// \t\t\tu * -75.813 + v * -141.406 + w * -48.261 + 152.469,\n// \t\t)\n// \t\tconsole.log(color.lab())\n// \t\tconsole.log(color.rgba(false, false))\n// \t\tif (!color.clipped()) return color\n// \t}\n// \tthrow new Error(\"Could find a random color in 100 iterations\")\n// }\n\n/**\n * Mixes two colors. The mix ratio is a value between 0 and 1.\n * The color mixing produces different results based the color space used for interpolation.\n *\n * @param col2\n * @param f\n * @param m\n * @example chroma.mix('red', 'blue')\n * @example chroma.mix('red', 'blue', 0.25)\n * @example chroma.mix('red', 'blue', 0.75)\n *\n * @example chroma.mix('red', 'blue', 0.5, 'rgb')\n * @example chroma.mix('red', 'blue', 0.5, 'hsl')\n * @example chroma.mix('red', 'blue', 0.5, 'lab')\n * @example chroma.mix('red', 'blue', 0.5, 'lch')\n * @example chroma.mix('red', 'blue', 0.5, 'lrgb')\n */\nexport function mix(col1: Chromable, col2: Chromable, f = 0.5, m: InterpolationMode = \"rgb\") {\n\tconst c1 = color(col1)\n\tconst c2 = color(col2)\n\tconst res = interpolators[m] && ((interpolators as any)[m](c1, c2, f, m) as Color)\n\tif (!res) {\n\t\tthrow new Error(\"color mode \" + m + \" is not supported\")\n\t}\n\treturn res.alpha(lerp(c1.alpha(), c2.alpha(), f))\n}\n\n/**\n * Parse a CSS color. See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color) for all the possible\n * variants.\n *\n * @example chroma.css('hsl(2rad 90% 50% / 0.9)')\n * @example chroma.css('laserlemon')\n */\nexport function css(cssString: string) {\n\tconst [r, g, b, a] = css2rgb(cssString)\n\treturn new Color(r, g, b, a)\n}\n\n/**\n * @example chroma.cmyk(0.2, 0.8, 0, 0)\n * @example chroma.color(0.2, 0.8, 0, 0, 'cmyk')\n */\nexport function cmyk(cmyk: CMYK): Color\nexport function cmyk(cyan1: number, magenta1: number, yellow1: number, key1: number): Color\nexport function cmyk(...args: any[]) {\n\treturn guess(args, \"cmyk\")\n}\n\n/**\n * @example chroma.gl(1, 1, 0, 1)\n */\nexport function gl(gl: RGBA | RGB): Color\n/**\n * @example chroma.gl([1, 0, 1, 0.5])\n */\nexport function gl(red1: number, green1: number, blue1: number, alpha1: number): Color\nexport function gl(...args: any[]) {\n\treturn guess(args, \"gl\")\n}\n\nexport function hcg(hcg: HCG): Color\n/**\n * @param alpha1 default=1\n */\nexport function hcg(h: number, c: number, g: number, alpha1?: number): Color\nexport function hcg(...args: any[]) {\n\treturn guess(args, \"hcg\")\n}\n\nexport function lch(lch: LCH): Color\n/**\n * @param alpha1 default=1\n */\nexport function lch(h: number, c: number, l: number, alpha1?: number): Color\nexport function lch(...args: any[]) {\n\treturn guess(args, \"lch\")\n}\n\nexport function hsi(hsi: HSI): Color\n/**\n * @param alpha1 default=1\n */\nexport function hsi(h: number, s: number, i: number, alpha1?: number): Color\nexport function hsi(...args: any[]) {\n\treturn guess(args, \"hsi\")\n}\n\nexport function hsl(hsl: HSL): Color\n/**\n * @param alpha1 default=1\n * @example chroma.hsl(30, 1, 0.5)\n * @example chroma.hsl(30, 0.6, 0.5)\n */\nexport function hsl(hueDegrees: number, saturation1: number, lightness1: number, alpha1?: number): Color\nexport function hsl(...args: any[]) {\n\treturn guess(args, \"hsl\")\n}\n\nexport function hsv(hsv: LAB): Color\nexport function hsv(h: number, s: number, v: number): Color\nexport function hsv(...args: any[]) {\n\treturn guess(args, \"hsv\")\n}\n\n/**\n *\n * @param temperature\n * @example chroma.kelvin(2000) // candle light\n * @example chroma.kelvin(3500) // sunset\n * @example chroma.kelvin(6500) // daylight\n * @example x0_1 => chroma.kelvin(x0_1 * 30000) // effective range: [0; 30000]\n */\nexport function kelvin(temperature: number) {\n\tconst [r, g, b] = kelvin2rgb(temperature)\n\treturn new Color(r, g, b)\n}\n\nexport function lab(lab: LAB): Color\n/**\n * @param alpha1 default=1\n */\nexport function lab(lightness1: number, a1: number, b: number, alpha1?: number): Color\nexport function lab(...args: any[]) {\n\treturn guess(args, \"lab\")\n}\n\n/**\n * @example chroma.num(0x663399) // rebeccapurple\n */\nexport function num(num: number) {\n\tconst [r, g, b] = num2rgb(num)\n\treturn new Color(r, g, b)\n}\n\nexport function rgb(rgb: RGBA | RGB): Color\n/**\n * @param alpha1 default=1\n * @example chroma.rgb(0, 100, 200)\n */\nexport function rgb(red255: number, green255: number, blue255: number, alpha1?: number): Color\nexport function rgb(...args: any[]) {\n\treturn guess(args, \"rgb\")\n}\n\nexport function xyz(xyz: XYZ): Color\n/** @param alpha1 default=1 */\nexport function xyz(x1: number, y1: number, z1: number, alpha1?: number): Color\nexport function xyz(...args: any[]) {\n\treturn guess(args, \"xyz\")\n}\n\n/**\n * Similar to mix, but accepts more than two colors.\n *\n * @example colors = ['#ddd', 'yellow', 'red', 'teal']\n * @example chroma.average(colors) // default = 'rgb'\n * @example chroma.average(colors, 'lab')\n * @example chroma.average(colors, 'lch')\n * @example chroma.average(colors, 'lrgb')\n * @example chroma.average(['red', 'rgba(0,0,0,0.5)']).css()\n */\nexport function average(chromables: Chromable[], mode: InterpolationMode = \"rgb\") {\n\tconst colors = chromables.map((c) => color(c))\n\tif (mode == \"lrgb\") {\n\t\treturn _average_lrgb(colors)\n\t}\n\tif (mode == \"num\") {\n\t\tlet numSum = 0,\n\t\t\talphaSum = 0\n\t\tfor (const col of colors) {\n\t\t\tnumSum += col.num()\n\t\t\talphaSum += col.alpha()\n\t\t}\n\t\treturn num(numSum / colors.length).alpha(alphaSum / colors.length)\n\t}\n\tconst xyz = [0, 0, 0]\n\tlet dx = 0\n\tlet dy = 0\n\tlet alphaSum = 0\n\tfor (const c of colors) {\n\t\tconst xyz2 = c[mode]()\n\t\talphaSum += c.alpha()\n\n\t\tfor (let i = 0; i < xyz.length; i++) {\n\t\t\tif (mode.charAt(i) == \"h\") {\n\t\t\t\tconst A = xyz2[i] * DEG2RAD\n\t\t\t\tdx += cos(A)\n\t\t\t\tdy += sin(A)\n\t\t\t} else {\n\t\t\t\txyz[i] += xyz2[i]\n\t\t\t}\n\t\t}\n\t}\n\tfor (let i = 0; i < xyz.length; i++) {\n\t\tif (mode.charAt(i) == \"h\") {\n\t\t\tconst A = atan2(dy / colors.length, dx / colors.length) * RAD2DEG\n\t\t\txyz[i] = (A + 360) % 360\n\t\t} else {\n\t\t\txyz[i] = xyz[i] / colors.length\n\t\t}\n\t}\n\treturn guess(xyz, mode).alpha(alphaSum / colors.length)\n}\n\n/**\n *\n * @param chromables\n * @example chroma.scale('black', 'red', 'gold') // linear interpolation\n * @example chroma.bezier('black', 'red', 'gold') // bezier interpolation\n */\nexport function bezier(chromables: Chromable[]): { (t: number): Color; scale(): Scale }\nexport function bezier(...chromables: Chromable[]): { (t: number): Color; scale(): Scale }\nexport function bezier(...args: any[]) {\n\tconst chromables: Chromable[] = Array.isArray(args[0]) ? args[0] : args\n\tconst f = _bezier(chromables) as { (t: number): Color; scale(): Scale }\n\tf.scale = CubeHelix.prototype.scale\n\treturn f\n}\n\n/**\n * Blends two colors using RGB channel-wise blend functions.\n * @param bottom\n * @param top\n * @param mode\n * @example chroma.blend('4CBBFC', 'EEEE22', 'multiply')\n * @example chroma.blend('4CBBFC', 'EEEE22', 'darken')\n * @example chroma.blend('4CBBFC', 'EEEE22', 'lighten')\n */\nexport function blend(bottom: Chromable, top: Chromable, mode: BlendMode) {\n\tif (!blend_fs[mode]) {\n\t\tthrow new Error(\"unknown blend mode \" + mode)\n\t}\n\treturn blend_fs[mode](bottom, top)\n}\nexport type BlendMode = keyof typeof blend_fs\nconst blend_fs = {\n\tnormal: blend_f(each((a, _) => a)),\n\tmultiply: blend_f(each((a, b) => (a * b) / 255)),\n\tscreen: blend_f(each(_screen)),\n\toverlay: blend_f(each(_overlay)),\n\tdarken: blend_f(each(min)),\n\tlighten: blend_f(each(max)),\n\tdodge: blend_f(each(_dodge)),\n\tburn: blend_f(each(_burn)),\n}\n\n/**\n * @param colors\n * @example scale = chroma.scale(['yellow', '008ae5'])\n * @example scale(0.25)\n * @example scale(0.5)\n * @example scale(0.75)\n * @example chroma.scale('Viridis')\n */\nexport function scale(colors: Chromable[] | keyof typeof brewer | ((f: number) => Color)): Scale\nexport function scale(...colors: Chromable[]): Scale\nexport function scale(...args: any[]) {\n\tconst f: Scale = ((t) => (f as any)._at(t)) as Scale\n\t;(Object.getOwnPropertyNames(Scale.prototype) as (keyof typeof Scale)[]).forEach(\n\t\t(key) => (f[key] = Scale.prototype[key]),\n\t)\n\tif (Array.isArray(args[0])) args = args[0]\n\tif (args.length == 1 && \"string\" == typeof args[0]) args = brewer[args[0] as keyof typeof brewer]\n\t;(f as any)._init(\"function\" == typeof args[0] ? args[0] : args.map((a) => color(a)))\n\t//f.setColors(args.length > 1 ? args : args[0])\n\treturn f\n}\n/**\n * A color scale, created with scale, is a function that maps numeric values to a color palette.\n *\n * The type parameter describes the output type and can be changed with out(). Defaults to Color objects.\n *\n * @param T The output format. default=Color\n * @example chroma.scale('Purples')\n * @example chroma.scale('Purples')(0.4)\n */\nexport interface Scale<T = Color> {\n\t(val: number): T\n}\nexport class Scale<T = Color> {\n\tprivate _colors!: Color[] | ((t: number) => Color)\n\tprivate _classes!: number[] | undefined\n\t/**\n\t * Color cache. undefined if the cache should not be used.\n\t */\n\tprivate _cache!: Map<number, Color> | undefined\n\tprivate _correctLightness!: boolean\n\tprivate _gamma!: number\n\tprivate _mode!: InterpolationMode\n\tprivate _out!: ColorFormat | undefined\n\tprivate _min!: number\n\tprivate _max!: number\n\tprivate _paddingLeft!: number\n\tprivate _paddingRight!: number\n\t// positions of the colors on the interval [0, 1]. guaranteed to have the same length as _colors\n\t// undefined when _colors is a function\n\tprivate _pos: number[] | undefined\n\n\t/**\n\t * Get the current scale classes.\n\t */\n\tpublic classes(): number[]\n\t/**\n\t * Make the scale return a number of distint color instead of a continuous gradient.\n\t * If you pass a number the scale will broken into equi-distant classes:\n\t *\n\t * @example chroma.scale('OrRd') // continous\n\t * @example chroma.scale('OrRd').classes(5) // equidistant classes\n\t * @example chroma.scale('OrRd').classes(8)\n\t *\n\t * @example chroma.scale('OrRd').classes([0, 6, 11, 17, 20]) // also sets domain\n\t */\n\tpublic classes(classes: number | number[]): this\n\tpublic classes(classes?: number | number[]) {\n\t\tif (undefined === classes) {\n\t\t\treturn this._classes\n\t\t}\n\t\tif (Array.isArray(classes)) {\n\t\t\tthis._classes = classes\n\t\t\tthis.domain(classes[0], classes[classes.length - 1])\n\t\t} else {\n\t\t\tif (classes % 1 != 0 || classes < 1) throw new Error(\"invalid classes param\")\n\t\t\t// const d = analyze(this.domain())\n\t\t\tthis._classes = limits(this.domain(), \"e\", classes)\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the domain.\n\t * @return If _colors is a function, [this._min, this._max]. If _colors is an array of colors, an array with the\n\t * same length as the number of colors.\n\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 20).domain() // == [0, 10, 20]\n\t */\n\tpublic domain(): number[]\n\t/**\n\t * Set the domain interval on which the scale is defined. Colors are distributed equidistantly along the\n\t * interval.\n\t * @param start\n\t * @param end\n\t * @return `this`\n\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 100)(50) // == white\n\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 0.25, 1).domain(0, 100).domain() // == [0, 25, 100]\n\t */\n\tpublic domain(start: number, end: number): this\n\t/**\n\t * Set the domain interval and the individual positions of the colors. The number of passed values must match\n\t * the number of colors which define the scale. Not valid if the scale is defined by a function.\n\t * @param domain The positions of all scale colors. Values must be in ascending order and should not have\n\t * duplicates.\n\t * @return `this`\n\t * @example scale = chroma.scale(\"red\", \"white\", \"blue\").domain(0, 25, 100)\n\t * @example scale(25) // == white\n\t * @example scale(100) // == blue\n\t * @example scale(50) // == #aaaaff\n\t */\n\tpublic domain(...domain: number[]): this\n\tpublic domain(...domain: number[]): number[] | this {\n\t\tif (undefined === domain[0]) {\n\t\t\treturn \"function\" !== typeof this._colors\n\t\t\t\t? this._pos!.map((p) => lerp(this._min, this._max, p))\n\t\t\t\t: [this._min, this._max]\n\t\t}\n\t\tthis._min = domain[0]\n\t\tthis._max = domain[domain.length - 1]\n\t\tif (2 == domain.length) {\n\t\t\tif (\"function\" !== typeof this._colors) {\n\t\t\t\t// equidistant positions\n\t\t\t\tthis._pos = this._colors.map((_, c) => c / (this._colors.length - 1))\n\t\t\t}\n\t\t} else if (\"function\" !== typeof this._colors && domain.length == this._colors.length) {\n\t\t\tthis._pos = domain.map((d) => lerpInv(this._min, this._max, d))\n\t\t} else {\n\t\t\tthrow new Error(\"invalid domain \" + domain)\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the interpolation mode used when calculating colors.\n\t */\n\tpublic mode(): InterpolationMode\n\t/**\n\t * Set the interpolation mode used when calculating colors. The defaut mode is \"rgb\".\n\t * See also {@link chroma#mix}\n\t * @param mode the mode to set.\n\t * @return `this`\n\t * @example chroma.scale(\"red\", \"green\").mode(\"lab\")\n\t * @example chroma.scale(\"red\", \"green\").mode(\"lrgb\")\n\t */\n\tpublic mode(mode: InterpolationMode): this\n\tpublic mode(mode?: InterpolationMode) {\n\t\tif (undefined === mode) {\n\t\t\treturn this._mode\n\t\t}\n\t\tthis._mode = mode\n\t\tthis._resetCache()\n\t\treturn this\n\t}\n\n\t/**\n\t * Set the output format return by `this(x)` and `this.colors(n)`.\n\t * @param outputFormat The color format to use. Pass `undefined` to return [Color] objects.\n\t * @return `this`\n\t * @example chroma.scale(\"red\", \"white\").out(\"hex\")(0) // == \"#ff0000\"\n\t * @example chroma.scale(\"red\", \"white\").out(\"num\").colors(2) // == [0xff0000, 0xffffff]\n\t */\n\tpublic out<M extends ColorFormat | undefined>(\n\t\toutputFormat: M,\n\t): Scale<M extends ColorFormat ? ReturnType<Color[M]> : Color> {\n\t\tthis._out = outputFormat\n\t\treturn this as any\n\t}\n\n\t/**\n\t * This makes sure the lightness range is spread evenly across a color scale. Especially useful when working\n\t * with [multi-hue color scales](https://www.vis4.net/blog/2013/09/mastering-multi-hued-color-scales/), where\n\t * simple gamma correction can't help you very much.\n\t *\n\t * @example chroma.scale('black','red','yellow','white')\n\t * @example chroma.scale('black','red','yellow','white').correctLightness()\n\t */\n\tpublic correctLightness(enableCorrectLightness = true) {\n\t\tif (this._correctLightness != enableCorrectLightness) {\n\t\t\tthis._resetCache()\n\t\t\tconst colors = this._colors\n\t\t\tif (enableCorrectLightness && \"function\" !== typeof colors) {\n\t\t\t\t// make sure that the colors have ascending or descending lightnesses\n\t\t\t\tlet sign = 0\n\t\t\t\tfor (let i = 1; i < colors.length; i++) {\n\t\t\t\t\tconst sign2 = colors[i].lab()[0] - colors[i - 1].lab()[0]\n\t\t\t\t\tif (0 == sign) {\n\t\t\t\t\t\tsign = sign2\n\t\t\t\t\t} else if (sign * sign2 < 0) {\n\t\t\t\t\t\tthrow new Error(\"scale color lightnesses must be monotonic\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._correctLightness = enableCorrectLightness\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the padding.\n\t * @returns [paddingLeft, paddingRight]\n\t */\n\tpublic padding(): [number, number]\n\t/**\n\t * Set the padding. Positive values will \"cut off\" the ends of gradient, while negative values will add a\n\t * section of constant color at the ends.\n\t * @example chroma.scale(\"red\", \"white\").padding(0.2)\n\t * @example chroma.scale(\"red\", \"white\").padding(0.1)(0) // == color('#ff1a1a'), instead of red\n\t * @example chroma.scale(\"red\", \"white\").padding(-0.1)(0) // == color('red')\n\t * @param paddingLeft padding on left side.(lower-valued end of the interval).\n\t * @param paddingRight padding on right (higher-valued end of the interval).\n\t * default=paddingLeft\n\t */\n\tpublic padding(paddingLeft: number, paddingRight?: number): this\n\tpublic padding(paddingLeft?: number, paddingRight: number | undefined = paddingLeft) {\n\t\tif (!paddingLeft) {\n\t\t\treturn [this._paddingLeft, this._paddingRight]\n\t\t}\n\t\tthis._paddingLeft = paddingLeft\n\t\tthis._paddingRight = paddingRight!\n\t\treturn this\n\t}\n\n\t/**\n\t * Get a number of equidistant colors.\n\t * @param numColors The number of colors to return.\n\t * @param format Output format. Defaults to `\"hex\"`. Pass `\"color\"` to get {@link Color} objects.\n\t * @returns If `numColors` is `undefined`, the colors which define this [Scale]. If `numColors` is 1,\n\t * `[this((min + max) / 2)]`. Otherwise, an array where the first element is `this(min)`, the last one is\n\t * `this(max)` and the rest are equidistant samples between min and max.\n\t * @example chroma.scale('OrRd').colors(5)\n\t * @example chroma.scale(['white', 'black']).colors(12)\n\t */\n\tpublic colors<M extends ColorFormat | \"color\" | undefined = \"hex\">(\n\t\tnumColors?: number,\n\t\tformat: M = \"hex\" as any,\n\t): Array<M extends ColorFormat ? ReturnType<Color[M]> : M extends \"color\" ? Color : string> {\n\t\tlet result: Color[]\n\t\tif (undefined === numColors) {\n\t\t\tresult = (this._colors as Color[]).slice()\n\t\t} else if (numColors == 1) {\n\t\t\tresult = [this._color((this._min + this._max) / 2)]\n\t\t} else if (numColors > 1) {\n\t\t\tresult = Array.from({ length: numColors }, (_, i) =>\n\t\t\t\tthis._color(lerp(this._min, this._max, i / (numColors - 1))),\n\t\t\t)\n\t\t} else {\n\t\t\t// returns all colors based on the defined classes\n\t\t\tlet samples\n\t\t\tif (this._classes && this._classes.length > 2) {\n\t\t\t\tsamples = Array.from(\n\t\t\t\t\t{ length: this._classes.length - 1 },\n\t\t\t\t\t(_, i) => (this._classes![i] + this._classes![i + 1]) * 0.5,\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tsamples = this.domain() // TODO?!\n\t\t\t}\n\t\t\tresult = samples.map((s) => this._color(s))\n\t\t}\n\n\t\treturn (format != \"color\" ? result.map((c) => c[format as \"hex\"]()) : result) as any\n\t}\n\n\t/**\n\t * Get whether the cache is enabled. Defaults to true.\n\t */\n\tpublic cache(): boolean\n\t/**\n\t * Enable or disable the cache.\n\t * @param enableCache Whether the cache should be enabled.\n\t */\n\tpublic cache(enableCache: boolean): this\n\tpublic cache(enableCache?: boolean) {\n\t\tif (undefined === enableCache) {\n\t\t\treturn !!this._cache\n\t\t}\n\t\tthis._cache = enableCache ? this._cache || new Map() : undefined\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the current gamma value. Defaults to 1.\n\t */\n\tpublic gamma(): number\n\t/**\n\t * Set the gamma value. Gamma-correction can be used to \"shift\" a scale's center more the the beginning (gamma <\n\t * 1) or end (gamma > 1), typically used to \"even\" the lightness gradient. Default is 1.\n\t * @example chroma.scale('YlGn').gamma(0.5)\n\t * @example chroma.scale('YlGn').gamma(1)\n\t * @example chroma.scale('YlGn').gamma(2)\n\t */\n\tpublic gamma(gamma: number): this\n\tpublic gamma(gamma?: number) {\n\t\tif (undefined === gamma) {\n\t\t\treturn this._gamma\n\t\t}\n\t\tthis._gamma = gamma\n\t\treturn this\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _at(t: number) {\n\t\tconst c = this._color(t)\n\t\treturn this._out ? c[this._out]() : c\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _init(colorsOrFunction: Color[] | ((t: number) => Color)) {\n\t\tthis._colors = colorsOrFunction\n\t\tif (\"function\" != typeof colorsOrFunction) {\n\t\t\tthis._pos = colorsOrFunction.map((_, i) => i / (colorsOrFunction.length - 1))\n\t\t}\n\t\tthis._mode = \"rgb\"\n\t\tthis.domain(0, 1)\n\t\tthis._paddingLeft = 0\n\t\tthis._paddingRight = 0\n\t\tthis._correctLightness = false\n\t\tthis._cache = new Map()\n\t\tthis._gamma = 1\n\t}\n\n\tprivate _getClass(value: number) {\n\t\treturn this._classes!.findIndex((cls) => value <= cls) - 1\n\t}\n\n\tprivate _color(val: number, bypassMap = false) {\n\t\tlet t\n\t\tif (!bypassMap) {\n\t\t\tconst min = this._min,\n\t\t\t\tmax = this._max\n\t\t\tif (this._classes && this._classes.length > 2) {\n\t\t\t\tconst c = this._getClass(val)\n\t\t\t\tt = c / (this._classes.length - 2)\n\t\t\t} else if (max !== min) {\n\t\t\t\tt = (val - min) / (max - min)\n\t\t\t} else {\n\t\t\t\tt = 1\n\t\t\t}\n\t\t\tif (this._correctLightness) {\n\t\t\t\tt = this._tCorrectedLightness(t)\n\t\t\t}\n\t\t} else {\n\t\t\tt = val\n\t\t}\n\t\tt = t ** this._gamma\n\t\tt = (this._paddingLeft + t) / (1 + this._paddingLeft + this._paddingRight)\n\t\t//\tt = this._paddingLeft + t * (1 - this._paddingLeft - this._paddingRight)\n\t\tt = clamp(t, 0, 1)\n\t\tconst tHash = t\n\t\tconst cacheResult = this._cache && this._cache.get(tHash)\n\t\tif (cacheResult) {\n\t\t\treturn cacheResult\n\t\t} else {\n\t\t\tlet col: Color\n\t\t\tif (Array.isArray(this._colors)) {\n\t\t\t\tfor (let i = 0; i < this._pos!.length; i++) {\n\t\t\t\t\tconst p = this._pos![i]\n\t\t\t\t\tif (t <= p) {\n\t\t\t\t\t\tcol = this._colors[i]\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif (t >= p && i == this._pos!.length - 1) {\n\t\t\t\t\t\tcol = this._colors[i]\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif (t > p && t < this._pos![i + 1]) {\n\t\t\t\t\t\tt = (t - p) / (this._pos![i + 1] - p)\n\t\t\t\t\t\tcol = mix(this._colors[i], this._colors[i + 1], t, this._mode)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcol = this._colors(t)\n\t\t\t}\n\t\t\tif (this._cache) {\n\t\t\t\t// tslint:disable-next-line\n\t\t\t\tthis._cache.set(tHash, col!)\n\t\t\t}\n\t\t\t// tslint:disable-next-line\n\t\t\treturn col!\n\t\t}\n\t}\n\tprivate _tCorrectedLightness(t0_1: number) {\n\t\tconst L0 = this._color(0, true).lab()[0]\n\t\tconst L1 = this._color(1, true).lab()[0]\n\t\tconst L_ideal = lerp(L0, L1, t0_1)\n\t\treturn bisect((t) => this._color(t, true).lab()[0] - L_ideal, 0, 1, 8)\n\t}\n\tprivate _resetCache() {\n\t\tif (this._cache) this._cache.clear()\n\t}\n}\n\nexport namespace scales {\n\t/**\n\t * @example chroma.scales.cool()\n\t */\n\texport function cool() {\n\t\treturn scale([hsl(180, 1, 0.9), hsl(250, 0.7, 0.4)])\n\t}\n\n\t/**\n\t * @example chroma.scales.hot()\n\t */\n\texport function hot() {\n\t\treturn scale([\"#000\", \"#f00\", \"#ff0\", \"#fff\"]).mode(\"rgb\")\n\t}\n}\n\n/**\n * Computes the WCAG contrast ratio between two colors. A minimum contrast of 4.5:1\n * [is recommended](http://www.w3.org/TR/WCAG20-TECHS/G18.html) to ensure that text is still readable against a\n * background color.\n *\n * @param a\n * @param b\n */\nexport function contrast(a: Chromable, b: Chromable) {\n\tconst l1 = color(a).luminance()\n\tconst l2 = color(b).luminance()\n\tif (l1 > l2) {\n\t\treturn (l1 + 0.05) / (l2 + 0.05)\n\t} else {\n\t\treturn (l2 + 0.05) / (l1 + 0.05)\n\t}\n}\n\n/**\n * Compute the [euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance#Three_dimensions) between two\n * colors in a given color space.\n * @param a First color.\n * @param b Second color.\n * @param mode The color space in which to compute the distance. Defaults to \"lab\".\n * @example chroma.distance('#fff', '#ff0', 'rgb')\n * @example chroma.distance('#fff', '#f0f', 'rgb')\n * @example chroma.distance('#fff', '#ff0')\n * @example chroma.distance('#fff', '#f0f')\n */\nexport function distance(a: Chromable, b: Chromable, mode: ColorMode = \"lab\") {\n\tconst l1 = color(a)[mode]()\n\tconst l2 = color(b)[mode]()\n\tconst channelDifferences = l1.map((channelValue: number, channelIndex: number) => channelValue - l2[channelIndex])\n\treturn hypot(...channelDifferences)\n}\n\n/**\n * Computes color difference as developed by the Colour Measurement Committee of the Society of Dyers and Colourists\n * (CMC) in 1984. The implementation is adapted from Bruce Lindbloom. The parameters L and C are weighting factors\n * for lightness and chromaticity.\n * @param reference\n * @param sample\n * @param L\n * @param C\n * @example [r = '#ededee', s = '#edeeed', chroma.deltaE(r, s)]\n * @example [r = '#ececee', s = '#eceeec', chroma.deltaE(r, s)]\n * @example [r = '#e9e9ee', s = '#e9eee9', chroma.deltaE(r, s)]\n * @example [r = '#e4e4ee', s = '#e4eee4', chroma.deltaE(r, s)]\n * @example [r = '#e0e0ee', s = '#e0eee0', chroma.deltaE(r, s)]\n */\nexport function deltaE(reference: Chromable, sample: Chromable, L = 1, C = 1) {\n\tconst [L1, a1, b1] = color(reference).lab()\n\tconst [L2, a2, b2] = color(sample).lab()\n\tconst c1 = sqrt(a1 * a1 + b1 * b1)\n\tconst c2 = sqrt(a2 * a2 + b2 * b2)\n\tconst sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1)\n\tconst sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638\n\tconst h1 = norm360(c1 < 0.000001 ? 0.0 : atan2(b1, a1) * RAD2DEG)\n\tconst t =\n\t\th1 >= 164.0 && h1 <= 345.0\n\t\t\t? 0.56 + abs(0.2 * cos((h1 + 168.0) * DEG2RAD))\n\t\t\t: 0.36 + abs(0.4 * cos((h1 + 35.0) * DEG2RAD))\n\tconst c4 = c1 * c1 * c1 * c1\n\tconst f = sqrt(c4 / (c4 + 1900.0))\n\tconst sh = sc * (f * t + 1.0 - f)\n\tconst delL = L1 - L2\n\tconst delC = c1 - c2\n\tconst delA = a1 - a2\n\tconst delB = b1 - b2\n\tconst dH2 = delA * delA + delB * delB - delC * delC\n\tconst v1 = delL / (L * sl)\n\tconst v2 = delC / (C * sc)\n\tconst v3 = sh\n\treturn sqrt(v1 * v1 + v2 * v2 + dH2 / (v3 * v3))\n}\ntype DataInfo = {\n\tmin: number\n\tmax: number\n\tsum: number\n\tvalues: number[]\n\tcount: number\n\tdomain: [number, number]\n\tlimits(mode: LimitsMode, num: number): number[]\n}\nexport function analyze(data: number[]): DataInfo {\n\tconst r: DataInfo = {\n\t\tmin: Infinity,\n\t\tmax: -Infinity,\n\t\tsum: 0,\n\t\tvalues: [] as number[],\n\t\tcount: 0,\n\t} as DataInfo\n\tfunction add(val: number) {\n\t\tif (val != undefined && !isNaN(val)) {\n\t\t\tr.values.push(val)\n\t\t\tr.sum += val\n\t\t\tif (val < r.min) r.min = val\n\t\t\tif (val > r.max) r.max = val\n\t\t\tr.count += 1\n\t\t}\n\t}\n\tdata.forEach((val) => add(val))\n\tr.domain = [r.min, r.max]\n\tr.limits = function (mode, num) {\n\t\treturn limits(this, mode, num)\n\t}\n\treturn r\n}\n\ntype LimitsMode = \"c\" | \"e\" | \"q\" | \"l\" | \"k\"\nexport function limits(data: number[] | DataInfo, mode: LimitsMode = \"e\", num = 7): number[] {\n\tconst info = Array.isArray(data) ? analyze(data) : data\n\tconst { min, max, values } = info\n\tvalues.sort((a, b) => a - b)\n\tif (num == 1) {\n\t\treturn [min, max]\n\t}\n\tif (mode.startsWith(\"c\")) {\n\t\treturn [min, max]\n\t} else if (mode.startsWith(\"e\")) {\n\t\treturn Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\n\t} else if (mode.startsWith(\"l\")) {\n\t\tif (min <= 0) {\n\t\t\tthrow new Error(\"Logarithmic scales are only possible for values > 0\")\n\t\t}\n\t\tconst min_log = Math.LOG10E * log(min)\n\t\tconst max_log = Math.LOG10E * log(max)\n\t\treturn Array.from({ length: num + 1 }, (_, i) => 10 ** lerp(min_log, max_log, i / num))\n\t} else if (mode.startsWith(\"q\")) {\n\t\treturn Array.from({ length: num + 1 }, (_, i) => {\n\t\t\tconst p = ((values.length - 1) * i) / num\n\t\t\tconst pb = floor(p)\n\t\t\treturn pb == p ? values[pb] : lerp(values[pb], values[pb + 1], p - pb)\n\t\t})\n\t} else if (mode.startsWith(\"k\")) {\n\t\t// implementation based on\n\t\t// http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n\t\t// simplified for 1-d input values\n\t\tconst n = values.length\n\t\tconst assignments = new Array(n)\n\t\tconst clusterSizes = new Array(num)\n\t\tlet repeat = true\n\t\tlet nb_iters = 0\n\t\tlet centroids = Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\n\t\tdo {\n\t\t\t// assignment step\n\t\t\tclusterSizes.fill(0)\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tconst value = values[i]\n\t\t\t\tconst minDistIndex = indexOfMax(centroids, (c) => -abs(c - value))\n\t\t\t\tclusterSizes[minDistIndex]++\n\t\t\t\tassignments[i] = minDistIndex\n\t\t\t}\n\n\t\t\t// update centroids step\n\t\t\tconst newCentroids = new Array(num).fill(0)\n\t\t\tfor (let i = 0; i < assignments.length; i++) {\n\t\t\t\tconst cluster = assignments[i]\n\t\t\t\tnewCentroids[cluster] += values[i]\n\t\t\t}\n\t\t\tfor (let j = 0; j < newCentroids.length; j++) {\n\t\t\t\tnewCentroids[j] /= clusterSizes[j]\n\t\t\t}\n\n\t\t\t// check convergence\n\t\t\trepeat = newCentroids.some((nc, j) => nc != centroids[j])\n\t\t\tcentroids = newCentroids\n\t\t} while (nb_iters++ < 200 && repeat)\n\n\t\t// finished k-means clustering\n\t\t// the next part is borrowed from gabrielflor.it\n\t\tconst kClusters: number[][] = Array.from({ length: num }, () => [])\n\t\tfor (let i = 0; i < assignments.length; i++) {\n\t\t\tconst cluster = assignments[i]\n\t\t\tkClusters[cluster].push(values[i])\n\t\t}\n\t\tconst tmpKMeansBreaks = []\n\t\tfor (const kCluster of kClusters) {\n\t\t\ttmpKMeansBreaks.push(kCluster[0], kCluster[kCluster.length - 1])\n\t\t}\n\t\ttmpKMeansBreaks.sort((a, b) => a - b)\n\n\t\tconst limits = []\n\t\tlimits.push(tmpKMeansBreaks[0])\n\t\tfor (let i = 1; i < tmpKMeansBreaks.length; i += 2) {\n\t\t\tconst v = tmpKMeansBreaks[i]\n\t\t\tif (!isNaN(v) && limits.indexOf(v) == -1) {\n\t\t\t\tlimits.push(v)\n\t\t\t}\n\t\t}\n\t\treturn limits\n\t} else {\n\t\tthrow new Error(\"unknown mode\")\n\t}\n}\n\nconst interpolators: { [K in InterpolationMode]?: (color1: Color, color2: Color, f: number, mode: K) => Color } = {}\n\n// const _guess_formats: { p: number; test: (args: any[]) => ColorFormat | undefined }[] = []\nconst _input: {\n\t[mode: string]: (...args: any[]) => RGB | RGBA\n} = {}\n\nfunction linear_interpolator(col1: Color, col2: Color, f: number, m: ColorMode) {\n\tconst xyz1 = col1[m]()\n\tconst xyz2 = col2[m]()\n\treturn guess(\n\t\t[\n\t\t\tlerp(xyz1[0], xyz2[0], f),\n\t\t\tlerp(xyz1[1], xyz2[1], f),\n\t\t\tlerp(xyz1[2], xyz2[2], f),\n\t\t\tlerp(col1.alpha(), col2.alpha(), f),\n\t\t],\n\t\tm,\n\t)\n}\ninterpolators.xyz = interpolators.rgb = interpolators.lab = linear_interpolator\n\ninterpolators.num = function (col1, col2, f) {\n\tconst n1 = col1.num()\n\tconst n2 = col2.num()\n\treturn num(lerp(n1, n2, f))\n}\n\ninterpolators.lrgb = function (col1, col2, f) {\n\tconst [r1, g1, b1, a1] = col1.rgba(false, false)\n\tconst [r2, g2, b2, a2] = col2.rgba(false, false)\n\treturn new Color(\n\t\tsqrt(r1 ** 2 * (1 - f) + r2 ** 2 * f),\n\t\tsqrt(g1 ** 2 * (1 - f) + g2 ** 2 * f),\n\t\tsqrt(b1 ** 2 * (1 - f) + b2 ** 2 * f),\n\t\tlerp(a1, a2, f),\n\t)\n}\n\nfunction _bezier(chromables: Chromable[]): (t: number) => Color {\n\tconst colors = chromables.map((c) => color(c))\n\tconst [lab0, lab1, lab2, lab3] = colors.map((c) => c.lab())\n\tif (2 == chromables.length) {\n\t\t// linear interpolation\n\t\treturn (t) => {\n\t\t\treturn lab([0, 1, 2].map((i) => lerp(lab0[i], lab1[i], t)) as LAB)\n\t\t}\n\t} else if (3 == chromables.length) {\n\t\t// quadratic bezier interpolation\n\t\tconst bezier2 = (p0: number, p1: number, p2: number, t: number) =>\n\t\t\t(1 - t) ** 2 * p0 + 2 * (1 - t) * t * p1 + t ** 2 * p2\n\t\treturn (t) => lab([0, 1, 2].map((i) => bezier2(lab0[i], lab1[i], lab2[i], t)) as LAB)\n\t} else if (4 == chromables.length) {\n\t\t// cubic bezier interpolation\n\t\tconst bezier3 = (p0: number, p1: number, p2: number, p3: number, t: number) =>\n\t\t\t(1 - t) ** 3 * p0 + 3 * (1 - t) ** 2 * t * p1 + 3 * (1 - t) * t ** 2 * p2 + t ** 3 * p3\n\t\treturn (t) => lab([0, 1, 2].map((i) => bezier3(lab0[i], lab1[i], lab2[i], lab3[i], t)) as LAB)\n\t} else if (5 == chromables.length) {\n\t\tconst I0 = _bezier(colors.slice(0, 3))\n\t\tconst I1 = _bezier(colors.slice(2, 5))\n\t\treturn (t) => (t < 0.5 ? I0(t * 2) : I1((t - 0.5) * 2))\n\t} else throw new Error()\n}\n\nfunction guess(args: any[], mode?: ColorFormat): Color {\n\tif (Array.isArray(args[0])) args = args[0]\n\tif (!mode) {\n\t\tif (args.length == 1 && args[0] in w3cx11) {\n\t\t\tmode = \"name\"\n\t\t} else if (args.length == 1 && \"string\" == typeof args[0]) {\n\t\t\tmode = \"css\"\n\t\t} else if (args.length == 3) {\n\t\t\tmode = \"rgb\"\n\t\t} else if (args.length == 4 && \"number\" == typeof args[3] && args[3] >= 0 && args[3] <= 1) {\n\t\t\tmode = \"rgb\"\n\t\t} else if (args.length == 1 && \"number\" == typeof args[0] && args[0] >= 0 && args[0] <= 0xffffff) {\n\t\t\tmode = \"num\"\n\t\t} else throw new Error(\"could not guess mode. args \" + JSON.stringify(args))\n\t}\n\tconst channels = _input[mode](...args)\n\treturn new Color(channels[0], channels[1], channels[2], undefined !== channels[3] ? channels[3] : 1)\n}\n\nfunction _average_lrgb(colors: Color[]) {\n\tlet rSquareSum = 0,\n\t\tgSquareSum = 0,\n\t\tbSquareSum = 0,\n\t\talphaSum = 0\n\tfor (const col of colors) {\n\t\tconst [r, g, b, alpha] = col.rgba(false, false)\n\t\trSquareSum += r ** 2\n\t\tgSquareSum += g ** 2\n\t\tbSquareSum += b ** 2\n\t\talphaSum += alpha\n\t}\n\treturn new Color(\n\t\tsqrt(rSquareSum) / colors.length,\n\t\tsqrt(gSquareSum) / colors.length,\n\t\tsqrt(bSquareSum) / colors.length,\n\t\talphaSum / colors.length,\n\t)\n}\n\nfunction hex2rgb(hex: string): RGBA {\n\tlet m\n\tif ((m = hex.match(/^#?([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})?$/i))) {\n\t\treturn [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), m[4] ? parseInt(m[4], 16) / 255 : 1]\n\t} else if ((m = hex.match(/^#?([A-F\\d])([A-F\\d])([A-F\\d])([A-F\\d])?$/i))) {\n\t\treturn [\n\t\t\tparseInt(m[1], 16) * 0x11,\n\t\t\tparseInt(m[2], 16) * 0x11,\n\t\t\tparseInt(m[3], 16) * 0x11,\n\t\t\tm[4] ? (parseInt(m[4], 16) * 0x11) / 255 : 1,\n\t\t]\n\t}\n\tthrow new Error(\"invalid hex color: \" + hex)\n}\n// color mode, i.e. representation as array of number\nexport type ColorMode = \"rgb\" | \"cmyk\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"gl\" | \"lch\" | \"xyz\"\nexport type InterpolationMode = \"rgb\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"lch\" | \"xyz\" | \"lrgb\" | \"num\"\nexport type ColorFormat = ColorMode | \"hex\" | \"num\" | \"name\" | \"kelvin\" | \"css\"\n/**\n * CMYK color space\n * @see https://en.wikipedia.org/wiki/cmyk_color_model\n * [cyan, magenta, yellow, alpha1]\n */\ntype CMYK = [number, number, number, number]\n/**\n * WebGL colors. Like RGB, but floats in [0; 1] instead of 0-255.\n * [red255, green255, blue255, alpha1]\n */\ntype GL = [number, number, number, number]\n/**\n * Red, green, blue ranging from 0-255.\n * Can be floats and outside the above range internally.\n */\ntype RGB = [number, number, number]\n/**\n * RGB plus alpha ranging from 0-1\n * [red255, green255, blue255, alpha1]\n */\ntype RGBA = [number, number, number, number]\n/**\n * CIELAB color space\n * [lightness, A*, B*]\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space\n */\ntype LAB = [number, number, number]\n/**\n * Cylindrical representation of CIELAB\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC\n *\n */\ntype LCH = [number, number, number]\n/**\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * [hueDegrees, saturation1, lightness1]\n */\ntype HSL = [number, number, number]\n/**\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * [hueDegrees, saturation1, value1]\n */\ntype HSV = [number, number, number]\n/**\n * @see https://en.wikipedia.org/w/index.php?title=HSI_color_space&redirect=no\n * [hueDegrees, saturation1, intensity1]\n */\ntype HSI = [number, number, number]\ntype XYZ = [number, number, number]\n/**\n * HCG Color Model\n * See https://github.com/acterhd/hcg-color\n * A color value in the HCG format is an array of three numbers [h, c, g], where\n * `h` is the hue as an angle in degrees [0; 360)\n * `c` is the chroma value in [0; 1]\n * `g` is the gray value in [0; 1]\n */\ntype HCG = [number, number, number]\n\n// interface ColorModes {\n// \tcmyk: CMYK\n// \tgl: GL\n// \trgb: RGB\n// \trgba: RGBA\n// \tlab: LAB\n// \thsl: HSL\n// \thsv: HSV\n// \thsi: HSI\n// \txyz: XYZ\n// \thcg: HCG\n// \tlch: LCH\n// \thex: string\n// \tnum: number\n// \tname: string\n// \tkelvin: number\n// \tcss: string\n// }\nfunction rgb2hex(r255: number, g255: number, b255: number, a1: number, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\tr255 = clamp(round(r255), 0, 255)\n\tg255 = clamp(round(g255), 0, 255)\n\tb255 = clamp(round(b255), 0, 255)\n\tconst rgb = (r255 << 16) | (g255 << 8) | b255\n\tconst rgbString = rgb.toString(16).padStart(6, \"0\")\n\tconst alphaString = round(clamp(a1) * 255)\n\t\t.toString(16)\n\t\t.padStart(2, \"0\")\n\treturn \"#\" + (\"argb\" == mode ? alphaString + rgbString : \"rgba\" == mode ? rgbString + alphaString : rgbString)\n}\n\n_input.lrgb = _input.rgb\n\n_input.hex = hex2rgb\n_input.hsl = hsl2rgb\nfunction norm360(degrees: number) {\n\treturn ((degrees % 360) + 360) % 360\n}\n\n_input.hsv = hsv2rgb\n\nfunction num2rgb(num: number): RGBA {\n\tif (!(\"number\" == typeof num && num >= 0 && num <= 0xffffff)) {\n\t\tthrow new Error(\"unknown num color: \" + num)\n\t}\n\tconst r = num >> 16\n\tconst g = (num >> 8) & 0xff\n\tconst b = num & 0xff\n\treturn [r, g, b, 1]\n}\n\nfunction rgb2num(r255: number, g255: number, b255: number, a1: number = 1, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\tconst rgbNum = (round(r255) << 16) | (round(g255) << 8) | round(b255)\n\tif (\"rgb\" === mode) {\n\t\treturn rgbNum\n\t} else if (\"rgba\" === mode) {\n\t\treturn (rgbNum << 8) | (round(a1 * 255) << 24)\n\t} else {\n\t\treturn (round(a1 * 255) << 24) | rgbNum\n\t}\n}\n\n_input.num = num2rgb\n\nconst WS = \"\\\\s*\"\nconst FLOAT = \"([+-]?(?:\\\\d*\\\\.?)?\\\\d+(?:[eE][+-]?\\\\d+)?)\"\nconst CSS_RGB_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT, \",\", FLOAT, \",\", FLOAT, \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_RGB_WS_REGEX = new RegExp([\"^rgba?\\\\(\", FLOAT, FLOAT, FLOAT, \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS), \"i\")\nconst CSS_RGB_PERCENT_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_RGB_WS_PERCENT_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_HSL_REGEX = new RegExp(\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(\n\t\tWS,\n\t),\n\t\"i\",\n)\nconst CSS_HSL_WS_REGEX = new RegExp(\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\\\\s+\" + FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nfunction css2rgb(css: string): RGBA {\n\tif (w3cx11 && w3cx11.hasOwnProperty(css)) {\n\t\treturn num2rgb((w3cx11 as any)[css.toLowerCase()])\n\t}\n\tlet m\n\tif ((m = css.match(CSS_RGB_REGEX) || css.match(CSS_RGB_WS_REGEX))) {\n\t\treturn [\n\t\t\tclamp(+m[1], 0, 255),\n\t\t\tclamp(+m[2], 0, 255),\n\t\t\tclamp(+m[3], 0, 255),\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\n\t\t]\n\t} else if ((m = css.match(CSS_RGB_PERCENT_REGEX) || css.match(CSS_RGB_WS_PERCENT_REGEX))) {\n\t\treturn [\n\t\t\tclamp(+m[1] / 100) * 255,\n\t\t\tclamp(+m[2] / 100) * 255,\n\t\t\tclamp(+m[3] / 100) * 255,\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\n\t\t]\n\t} else if ((m = css.match(CSS_HSL_REGEX) || css.match(CSS_HSL_WS_REGEX))) {\n\t\tconst CONVERSION = { deg: 1, rad: RAD2DEG, turn: 360 }\n\t\tconst angleUnit = (m[2] ? m[2].toLowerCase() : \"deg\") as \"deg\" | \"rad\" | \"turn\"\n\t\treturn hsl2rgb(\n\t\t\t(((+m[1] * CONVERSION[angleUnit]) % 360) + 360) % 360,\n\t\t\tclamp(+m[3] / 100),\n\t\t\tclamp(+m[4] / 100),\n\t\t\tm[5] ? clamp(m[6] ? +m[5] / 100 : +m[5]) : 1,\n\t\t)\n\t} else {\n\t\treturn hex2rgb(css)\n\t}\n}\n\nfunction rgb2css(r: number, g: number, b: number, a = 1) {\n\tif (a >= 1) {\n\t\treturn \"rgb(\" + [r, g, b].map(round).join(\",\") + \")\"\n\t} else {\n\t\treturn \"rgba(\" + [r, g, b].map(round).join(\",\") + \",\" + a + \")\"\n\t}\n}\n\nfunction rnd(a: any) {\n\treturn round(a * 100) / 100\n}\n\nfunction hsl2css([h, s, l]: HSL, alpha: number) {\n\tconst mode = alpha < 1 ? \"hsla\" : \"hsl\"\n\treturn (\n\t\tmode +\n\t\t\"(\" +\n\t\trnd(h) +\n\t\t\",\" +\n\t\trnd(s * 100) +\n\t\t\"%\" +\n\t\t\",\" +\n\t\trnd(l * 100) +\n\t\t\"%\" +\n\t\t(\"hsla\" == mode ? \",\" + rnd(alpha) : \"\") +\n\t\t\")\"\n\t)\n}\n\n_input.css = css2rgb\n\n_input.name = function (name) {\n\treturn num2rgb((w3cx11 as any)[name])\n}\n\nfunction lch2lab(l: number, c: number, hueDegrees: number): LAB {\n\t/*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n\n    A saturation multiplier was added by Gregor Aisch\n     */\n\treturn [l, cos(hueDegrees * DEG2RAD) * c, sin(hueDegrees * DEG2RAD) * c]\n}\n\nfunction lch2rgb(l: number, c: number, hDegrees: number, alpha1 = 1): RGBA {\n\tconst [, a, b] = lch2lab(l, c, hDegrees)\n\treturn cielab2rgb(l, a, b, alpha1)\n}\n\nfunction lab2lch(l: number, a: number, b: number): LCH {\n\tconst c = hypot(a, b)\n\tconst h = (atan2(b, a) * RAD2DEG + 360) % 360\n\treturn [l, c, h]\n}\n\nfunction rgb2lch(r255: number, g255: number, b255: number) {\n\tconst [l, a, b2] = rgb2lab(r255, g255, b255)\n\treturn lab2lch(l, a, b2)\n}\n\n_input.lch = lch2rgb\n\nfunction rgb2cmyk(r255: number, g255: number, b255: number): CMYK {\n\tr255 /= 255\n\tg255 /= 255\n\tb255 /= 255\n\tconst k = 1 - max(r255, g255, b255)\n\tif (1 == k) return [0, 0, 0, 1]\n\tconst c = (1 - r255 - k) / (1 - k)\n\tconst m = (1 - g255 - k) / (1 - k)\n\tconst y = (1 - b255 - k) / (1 - k)\n\treturn [c, m, y, k]\n}\n\nfunction cmyk2rgb(c1: number, m1: number, y1: number, k1: number, alpha1 = 1): RGBA {\n\tif (k1 == 1) {\n\t\treturn [0, 0, 0, alpha1]\n\t}\n\tconst r255 = 255 * (1 - c1) * (1 - k1)\n\tconst g255 = 255 * (1 - m1) * (1 - k1)\n\tconst b255 = 255 * (1 - y1) * (1 - k1)\n\treturn [r255, g255, b255, alpha1]\n}\n\n_input.cmyk = cmyk2rgb\n\n_input.gl = function (r: number, g: number, b: number, a: number = 1): RGBA {\n\treturn [r * 255, g * 255, b * 255, a]\n}\n\n//function rgb2luminance(r: number, g: number, b: number) {\n//\t// https://en.wikipedia.org/wiki/Relative_luminance\n//\tconst [, Y] = rgb2xyz(r, g, b)\n//\treturn Y\n//}\n\nfunction rgbChannel2RgbLinear(x255: number) {\n\tconst x1 = x255 / 255\n\t// http://entropymine.com/imageworsener/srgbformula/\n\tif (x1 <= 0.04045) {\n\t\treturn x1 / 12.92\n\t} else {\n\t\treturn ((x1 + 0.055) / 1.055) ** 2.4\n\t}\n}\nfunction rgbLinearChannel2Rgb(xLinear1: number) {\n\tif (xLinear1 <= 0.0031308) {\n\t\treturn 255 * (12.92 * xLinear1)\n\t} else {\n\t\treturn 255 * ((1 + 0.055) * xLinear1 ** (1 / 2.4) - 0.055)\n\t}\n}\n\nfunction kelvin2rgb(kelvin: number): RGB {\n\tconst t = kelvin / 100\n\tlet r, g, b\n\tif (t < 66) {\n\t\tr = 255\n\t\tg = -155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)\n\t\tb = t < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)\n\t} else {\n\t\tr = 351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)\n\t\tg = 325.4494125711974 + 0.07943456536662342 * (t - 50) - 28.0852963507957 * log(t - 50)\n\t\tb = 255\n\t}\n\treturn [r, g, b]\n}\n\n_input.rgb = (...args: number[]) => args as RGB\n\nfunction rgb2kelvin(r255: number, g255: number, b255: number) {\n\tconsole.log(b255 - r255)\n\tif (g255 + b255 < 158.61) {\n\t\tconsole.log(\"0 < t < 20\")\n\t\t// calc from green\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\t(t) => g255 - (-155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)),\n\t\t\t\t15,\n\t\t\t\t4,\n\t\t\t) * 100,\n\t\t)\n\t\treturn (Math.E ** ((g255 + 155.25485562709179 + 0.44596950469579133 * (15 - 2)) / 104.49216199393888) + 2) * 100\n\t} else if (b255 - r255 < 0) {\n\t\tconsole.log(\"20 < t < 66\")\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\t(t) => b255 - (-254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)),\n\t\t\t\t43,\n\t\t\t\t4,\n\t\t\t) * 100,\n\t\t)\n\t\treturn (\n\t\t\t(Math.E ** ((b255 + 254.76935184120902 - 0.8274096064007395 * (43 - 10)) / 115.67994401066147) + 10) * 100\n\t\t)\n\t} else {\n\t\tconsole.log(\"0 < t < 400, start= \" + (-1.4 * (r255 + g255) + 755))\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\t(t) => r255 - (351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)),\n\t\t\t\t-1.4 * (r255 + g255) + 755,\n\t\t\t\t8,\n\t\t\t) * 100,\n\t\t)\n\t\treturn ((r255 / 329.698727446) ** (1 / -0.1332047592) + 60) * 100\n\t}\n\treturn newtonIterate1d(\n\t\t(k) => {\n\t\t\tconst eps = 1e-9\n\t\t\tconst [kr, kg, kb] = kelvin2rgb(k)\n\t\t\tconst [kr2, kg2, kb2] = kelvin2rgb(k + eps)\n\t\t\tconst dkr = (kr2 - kr) / eps,\n\t\t\t\tdkg = (kg2 - kg) / eps,\n\t\t\t\tdkb = (kb2 - kb) / eps\n\t\t\treturn dkr * (kr - r255) + dkg * (kg - g255) + dkb * (kb - b255)\n\n\t\t\treturn kb / kr - b255 / r255\n\t\t},\n\t\t//1000,\n\t\t//40000,\n\t\tMath.E ** ((b255 / r255 + 2.5) / 0.4),\n\t\t20,\n\t\t//1e-6,\n\t)\n\tlet maxTemp = 40000\n\tlet minTemp = 1000\n\tconst eps = 0.4\n\tlet temp: number = 0\n\tlet rgb\n\twhile (maxTemp - minTemp > eps) {\n\t\ttemp = (maxTemp + minTemp) * 0.5\n\t\trgb = kelvin2rgb(temp)\n\t\tif (rgb[2] / rgb[0] >= b255 / r255) {\n\t\t\tmaxTemp = temp\n\t\t} else {\n\t\t\tminTemp = temp\n\t\t}\n\t}\n\treturn round(temp)\n}\n\n_input.temperature = _input.kelvin = _input.K = kelvin2rgb\n\nfunction blend_f(f: (c1: RGB, c2: RGB) => RGB) {\n\treturn function (bottom: Chromable, top: Chromable) {\n\t\tconst [r, g, b] = f(color(top).rgb(), color(bottom).rgb())\n\t\treturn rgb(r, g, b)\n\t}\n}\n\nfunction each(f: (a: number, b: number) => number) {\n\treturn function (c1: RGB, c2: RGB): RGB {\n\t\treturn c1.map((e, i) => f(e, c2[i])) as RGB\n\t}\n}\n\nfunction _screen(a: number, b: number) {\n\treturn 255 * (1 - (1 - a / 255) * (1 - b / 255))\n}\n\nfunction _overlay(a: number, b: number) {\n\tif (b < 128) {\n\t\treturn (2 * a * b) / 255\n\t} else {\n\t\treturn 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255))\n\t}\n}\n\nfunction _burn(a: number, b: number) {\n\treturn 255 * (1 - (1 - b / 255) / (a / 255))\n}\n\nfunction _dodge(a: number, b: number) {\n\tif (a == 255) {\n\t\treturn 255\n\t}\n\treturn 255 * min(1, b / 255 / (1 - a / 255))\n}\n\n/**\n * r, g, b can be in any interval (0-1 or 0-255)\n * @param r\n * @param g\n * @param b\n */\nfunction rgb2hexhue(r: number, g: number, b: number) {\n\tconst m = min(r, g, b)\n\tconst M = max(r, g, b)\n\tconst delta = M - m\n\tlet hueTurnX6 // angle as value between 0 and 6\n\tif (0 == delta) {\n\t\thueTurnX6 = 0\n\t} else if (r == M) {\n\t\t// second term to make sure the value is > 0\n\t\thueTurnX6 = (g - b) / delta + (g < b ? 6 : 0)\n\t} else if (g == M) {\n\t\thueTurnX6 = 2 + (b - r) / delta\n\t} else {\n\t\thueTurnX6 = 4 + (r - g) / delta\n\t}\n\treturn [hueTurnX6 * 60, m, M]\n}\nfunction hcxm2rgb(hueDegrees: number, c1: number, x1: number, m1: number, alpha1: number): RGBA {\n\tconst m255 = m1 * 255\n\tconst cm255 = c1 * 255 + m255\n\tconst xm255 = x1 * 255 + m255\n\tif (hueDegrees < 60) {\n\t\treturn [cm255, xm255, m255, alpha1]\n\t} else if (hueDegrees < 120) {\n\t\treturn [xm255, cm255, m255, alpha1]\n\t} else if (hueDegrees < 180) {\n\t\treturn [m255, cm255, xm255, alpha1]\n\t} else if (hueDegrees < 240) {\n\t\treturn [m255, xm255, cm255, alpha1]\n\t} else if (hueDegrees < 300) {\n\t\treturn [xm255, m255, cm255, alpha1]\n\t} else {\n\t\treturn [cm255, m255, xm255, alpha1]\n\t}\n}\n\n/**\n * https://en.wikipedia.org/w/index.php?title=HSL_and_HSV&oldid=856714654#From_HSL\n */\nfunction hsl2rgb(hueDegrees: number, s1: number, l1: number, alpha1 = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst c1 = (1 - abs(2 * l1 - 1)) * s1\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), l1 - c1 / 2, alpha1)\n}\nfunction rgb2hsl(r255: number, g255: number, b255: number): HSL {\n\tconst [hue, min1, max1] = rgb2hexhue(r255 / 255, g255 / 255, b255 / 255)\n\tconst l1 = (max1 + min1) / 2\n\tlet s1: number\n\tif (max1 == min1) {\n\t\ts1 = 0\n\t} else {\n\t\ts1 = l1 < 0.5 ? (max1 - min1) / (max1 + min1) : (max1 - min1) / (2 - max1 - min1)\n\t}\n\treturn [hue, s1, l1]\n}\n\nfunction hsv2rgb(hueDegrees: number, s1: number, v1: number, alpha1: number = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst c1 = v1 * s1\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), v1 - c1, alpha1)\n}\n\nfunction rgb2hsv(r255: number, g255: number, b255: number): HSV {\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\n\tconst delta255 = max255 - min255\n\tconst v1 = max255 / 255.0\n\tconst s1 = max255 == 0 ? 0 : delta255 / max255\n\treturn [hue, s1, v1]\n}\n\nfunction hcg2rgb(hueDegrees: number, c1: number, g1: number, alpha1 = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst p = g1 * (1 - c1)\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), p, alpha1)\n}\n\nfunction rgb2hcg(r255: number, g255: number, b255: number): HCG {\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\n\tconst c1 = (max255 - min255) / 255\n\tconst _g1 = c1 < 1 ? min255 / 255 / (1 - c1) : 0\n\treturn [hue, c1, _g1]\n}\n\n_input.hcg = hcg2rgb\n\nfunction cielab2rgb(LStar100: number, aStar: number, bStar: number, alpha = 1): RGBA {\n\tconst [x, y, z] = cielab2xyz(LStar100, aStar, bStar)\n\treturn xyz2rgb(x, y, z, alpha)\n}\n\nfunction cielab2xyz(LStar100: number, aStar: number, bStar: number) {\n\tfunction fInv(t: number) {\n\t\tif (t > LAB_delta) {\n\t\t\treturn t ** 3\n\t\t} else {\n\t\t\treturn LAB_3DeltaPow2 * (t - 4 / 29)\n\t\t}\n\t}\n\treturn [\n\t\tLAB_Xn * fInv((LStar100 + 16) / 116 + aStar / 500),\n\t\tLAB_Yn * fInv((LStar100 + 16) / 116),\n\t\tLAB_Zn * fInv((LStar100 + 16) / 116 - bStar / 200),\n\t]\n}\nfunction xyz2cielab(x: number, y: number, z: number): LAB {\n\t// https://en.wikipedia.org/w/index.php?title=CIELAB_color_space&oldid=849576085#Forward_transformation\n\tfunction f(t: number) {\n\t\tif (t > LAB_deltaPow3) {\n\t\t\treturn cbrt(t)\n\t\t} else {\n\t\t\treturn t / LAB_3DeltaPow2 + 4 / 29\n\t\t}\n\t}\n\treturn [116 * f(y / LAB_Yn) - 16, 500 * (f(x / LAB_Xn) - f(y / LAB_Yn)), 200 * (f(y / LAB_Yn) - f(z / LAB_Zn))]\n}\n\n// const LAB_CONSTANTS = {\nconst LAB_Kn = 18\nconst LAB_Xn = 0.95047\nconst LAB_Yn = 1\nconst LAB_Zn = 1.08883\nconst LAB_delta = 0.206896552 // delta = 6 / 29\nconst LAB_3DeltaPow2 = 0.12841855 // 3 * delta ** 2\nconst LAB_deltaPow3 = 0.008856452 // delta ** 3\n// }\n\nfunction rgb2lab(r255: number, g255: number, b255: number): RGB {\n\tconst [x, y, z] = rgb2xyz(r255, g255, b255)\n\treturn xyz2cielab(x, y, z)\n}\n\nfunction rgb2xyz(r255: number, g255: number, b255: number): XYZ {\n\t// https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\n\tconst r1Linear = rgbChannel2RgbLinear(r255)\n\tconst g1Linear = rgbChannel2RgbLinear(g255)\n\tconst b1Linear = rgbChannel2RgbLinear(b255)\n\tconst X = 0.4124564 * r1Linear + 0.3575761 * g1Linear + 0.1804375 * b1Linear\n\tconst Y = 0.2126729 * r1Linear + 0.7151522 * g1Linear + 0.072175 * b1Linear\n\tconst Z = 0.0193339 * r1Linear + 0.119192 * g1Linear + 0.9503041 * b1Linear\n\treturn [X, Y, Z]\n}\nfunction xyz2rgb(X1: number, Y1: number, Z1: number, alpha1 = 1): RGBA {\n\t// https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)\n\tconst r1Linear = 3.2404542 * X1 - 1.5371385 * Y1 - 0.4985314 * Z1\n\tconst g1Linear = -0.969266 * X1 + 1.8760108 * Y1 + 0.041556 * Z1\n\tconst b1Linear = 0.0556434 * X1 - 0.2040259 * Y1 + 1.0572252 * Z1\n\treturn [rgbLinearChannel2Rgb(r1Linear), rgbLinearChannel2Rgb(g1Linear), rgbLinearChannel2Rgb(b1Linear), alpha1]\n}\n\n_input.xyz = xyz2rgb\n_input.lab = cielab2rgb\n\n/**\n * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use\n * hcxm2rgb.\n */\nfunction hsi2rgb(hueDegrees: number, s1: number, i1: number, alpha1 = 1): RGBA {\n\t/*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n     */\n\tlet r, g, b\n\tlet hRad = hueDegrees * DEG2RAD\n\tif (hRad < (2 * PI) / 3) {\n\t\tb = (1 - s1) / 3\n\t\tr = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tg = 1 - (b + r)\n\t} else if (hRad < (4 * PI) / 3) {\n\t\thRad -= (2 * PI) / 3\n\t\tr = (1 - s1) / 3\n\t\tg = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tb = 1 - (r + g)\n\t} else {\n\t\thRad -= (4 * PI) / 3\n\t\tg = (1 - s1) / 3\n\t\tb = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tr = 1 - (g + b)\n\t}\n\treturn [3 * i1 * r * 255, 3 * i1 * g * 255, 3 * i1 * b * 255, alpha1]\n}\n\n/**\n * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use\n * rgb2hexhue.\n */\nfunction rgb2hsi(r255: number, g255: number, b255: number): HSI {\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Lightness\n\tconst r1 = r255 / 255\n\tconst g1 = g255 / 255\n\tconst b1 = b255 / 255\n\tconst i1 = (r1 + g1 + b1) / 3\n\tif (r1 == g1 && g1 == b1) {\n\t\treturn [0, 0, i1]\n\t} else {\n\t\tconst alpha = (1 / 2) * (2 * r1 - g1 - b1)\n\t\tconst beta = (sqrt(3) / 2) * (g1 - b1)\n\t\tconst hRad = atan2(beta, alpha)\n\t\tconst min1 = min(r1, g1, b1)\n\t\tconst s1 = 1 - min1 / i1\n\t\treturn [(hRad < 0 ? 2 * PI + hRad : hRad) * RAD2DEG, s1, i1]\n\t}\n}\n\n_input.hsi = hsi2rgb\n\ninterpolators.hsv = interpolators.hsl = interpolators.hsi = interpolators.lch = interpolators.hcg = function interpolate_hsx(\n\tcolor1: Color,\n\tcolor2: Color,\n\tf: number,\n\tm: \"hsv\" | \"hsl\" | \"hsi\" | \"lch\" | \"hcg\",\n) {\n\tconst [a1, b1, c1] = color1[m]()\n\tconst [a2, b2, c2] = color2[m]()\n\tfunction lerpHue(hue1: number, hue2: number, f: number) {\n\t\tconst dh = norm360(hue2 - hue1 + 180) - 180\n\t\treturn hue1 + f * dh\n\t}\n\treturn color(\n\t\t(\"h\" == m.charAt(0) ? lerpHue : lerp)(a1, a2, f),\n\t\tlerp(b1, b2, f),\n\t\t(\"h\" == m.charAt(2) ? lerpHue : lerp)(c1, c2, f),\n\t\tm,\n\t)\n}\n\nfunction indexOfMax<T>(arr: ArrayLike<T>, f: (el: T) => number) {\n\tlet maxValue = -Infinity,\n\t\tmaxValueIndex = -1\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst value = f(arr[i])\n\t\tif (value > maxValue) {\n\t\t\tmaxValue = value\n\t\t\tmaxValueIndex = i\n\t\t}\n\t}\n\treturn maxValueIndex\n}\nfunction withMax<T>(arr: ArrayLike<T>, f: (el: T) => number): T {\n\treturn arr[indexOfMax(arr, f)]\n}\n","module.exports = {\n  0: 'NONE',\n  1: 'ONE',\n  2: 'LINE_LOOP',\n  3: 'LINE_STRIP',\n  4: 'TRIANGLES',\n  5: 'TRIANGLE_STRIP',\n  6: 'TRIANGLE_FAN',\n  256: 'DEPTH_BUFFER_BIT',\n  512: 'NEVER',\n  513: 'LESS',\n  514: 'EQUAL',\n  515: 'LEQUAL',\n  516: 'GREATER',\n  517: 'NOTEQUAL',\n  518: 'GEQUAL',\n  519: 'ALWAYS',\n  768: 'SRC_COLOR',\n  769: 'ONE_MINUS_SRC_COLOR',\n  770: 'SRC_ALPHA',\n  771: 'ONE_MINUS_SRC_ALPHA',\n  772: 'DST_ALPHA',\n  773: 'ONE_MINUS_DST_ALPHA',\n  774: 'DST_COLOR',\n  775: 'ONE_MINUS_DST_COLOR',\n  776: 'SRC_ALPHA_SATURATE',\n  1024: 'STENCIL_BUFFER_BIT',\n  1028: 'FRONT',\n  1029: 'BACK',\n  1032: 'FRONT_AND_BACK',\n  1280: 'INVALID_ENUM',\n  1281: 'INVALID_VALUE',\n  1282: 'INVALID_OPERATION',\n  1285: 'OUT_OF_MEMORY',\n  1286: 'INVALID_FRAMEBUFFER_OPERATION',\n  2304: 'CW',\n  2305: 'CCW',\n  2849: 'LINE_WIDTH',\n  2884: 'CULL_FACE',\n  2885: 'CULL_FACE_MODE',\n  2886: 'FRONT_FACE',\n  2928: 'DEPTH_RANGE',\n  2929: 'DEPTH_TEST',\n  2930: 'DEPTH_WRITEMASK',\n  2931: 'DEPTH_CLEAR_VALUE',\n  2932: 'DEPTH_FUNC',\n  2960: 'STENCIL_TEST',\n  2961: 'STENCIL_CLEAR_VALUE',\n  2962: 'STENCIL_FUNC',\n  2963: 'STENCIL_VALUE_MASK',\n  2964: 'STENCIL_FAIL',\n  2965: 'STENCIL_PASS_DEPTH_FAIL',\n  2966: 'STENCIL_PASS_DEPTH_PASS',\n  2967: 'STENCIL_REF',\n  2968: 'STENCIL_WRITEMASK',\n  2978: 'VIEWPORT',\n  3024: 'DITHER',\n  3042: 'BLEND',\n  3088: 'SCISSOR_BOX',\n  3089: 'SCISSOR_TEST',\n  3106: 'COLOR_CLEAR_VALUE',\n  3107: 'COLOR_WRITEMASK',\n  3317: 'UNPACK_ALIGNMENT',\n  3333: 'PACK_ALIGNMENT',\n  3379: 'MAX_TEXTURE_SIZE',\n  3386: 'MAX_VIEWPORT_DIMS',\n  3408: 'SUBPIXEL_BITS',\n  3410: 'RED_BITS',\n  3411: 'GREEN_BITS',\n  3412: 'BLUE_BITS',\n  3413: 'ALPHA_BITS',\n  3414: 'DEPTH_BITS',\n  3415: 'STENCIL_BITS',\n  3553: 'TEXTURE_2D',\n  4352: 'DONT_CARE',\n  4353: 'FASTEST',\n  4354: 'NICEST',\n  5120: 'BYTE',\n  5121: 'UNSIGNED_BYTE',\n  5122: 'SHORT',\n  5123: 'UNSIGNED_SHORT',\n  5124: 'INT',\n  5125: 'UNSIGNED_INT',\n  5126: 'FLOAT',\n  5386: 'INVERT',\n  5890: 'TEXTURE',\n  6401: 'STENCIL_INDEX',\n  6402: 'DEPTH_COMPONENT',\n  6406: 'ALPHA',\n  6407: 'RGB',\n  6408: 'RGBA',\n  6409: 'LUMINANCE',\n  6410: 'LUMINANCE_ALPHA',\n  7680: 'KEEP',\n  7681: 'REPLACE',\n  7682: 'INCR',\n  7683: 'DECR',\n  7936: 'VENDOR',\n  7937: 'RENDERER',\n  7938: 'VERSION',\n  9728: 'NEAREST',\n  9729: 'LINEAR',\n  9984: 'NEAREST_MIPMAP_NEAREST',\n  9985: 'LINEAR_MIPMAP_NEAREST',\n  9986: 'NEAREST_MIPMAP_LINEAR',\n  9987: 'LINEAR_MIPMAP_LINEAR',\n  10240: 'TEXTURE_MAG_FILTER',\n  10241: 'TEXTURE_MIN_FILTER',\n  10242: 'TEXTURE_WRAP_S',\n  10243: 'TEXTURE_WRAP_T',\n  10497: 'REPEAT',\n  10752: 'POLYGON_OFFSET_UNITS',\n  16384: 'COLOR_BUFFER_BIT',\n  32769: 'CONSTANT_COLOR',\n  32770: 'ONE_MINUS_CONSTANT_COLOR',\n  32771: 'CONSTANT_ALPHA',\n  32772: 'ONE_MINUS_CONSTANT_ALPHA',\n  32773: 'BLEND_COLOR',\n  32774: 'FUNC_ADD',\n  32777: 'BLEND_EQUATION_RGB',\n  32778: 'FUNC_SUBTRACT',\n  32779: 'FUNC_REVERSE_SUBTRACT',\n  32819: 'UNSIGNED_SHORT_4_4_4_4',\n  32820: 'UNSIGNED_SHORT_5_5_5_1',\n  32823: 'POLYGON_OFFSET_FILL',\n  32824: 'POLYGON_OFFSET_FACTOR',\n  32854: 'RGBA4',\n  32855: 'RGB5_A1',\n  32873: 'TEXTURE_BINDING_2D',\n  32926: 'SAMPLE_ALPHA_TO_COVERAGE',\n  32928: 'SAMPLE_COVERAGE',\n  32936: 'SAMPLE_BUFFERS',\n  32937: 'SAMPLES',\n  32938: 'SAMPLE_COVERAGE_VALUE',\n  32939: 'SAMPLE_COVERAGE_INVERT',\n  32968: 'BLEND_DST_RGB',\n  32969: 'BLEND_SRC_RGB',\n  32970: 'BLEND_DST_ALPHA',\n  32971: 'BLEND_SRC_ALPHA',\n  33071: 'CLAMP_TO_EDGE',\n  33170: 'GENERATE_MIPMAP_HINT',\n  33189: 'DEPTH_COMPONENT16',\n  33306: 'DEPTH_STENCIL_ATTACHMENT',\n  33635: 'UNSIGNED_SHORT_5_6_5',\n  33648: 'MIRRORED_REPEAT',\n  33901: 'ALIASED_POINT_SIZE_RANGE',\n  33902: 'ALIASED_LINE_WIDTH_RANGE',\n  33984: 'TEXTURE0',\n  33985: 'TEXTURE1',\n  33986: 'TEXTURE2',\n  33987: 'TEXTURE3',\n  33988: 'TEXTURE4',\n  33989: 'TEXTURE5',\n  33990: 'TEXTURE6',\n  33991: 'TEXTURE7',\n  33992: 'TEXTURE8',\n  33993: 'TEXTURE9',\n  33994: 'TEXTURE10',\n  33995: 'TEXTURE11',\n  33996: 'TEXTURE12',\n  33997: 'TEXTURE13',\n  33998: 'TEXTURE14',\n  33999: 'TEXTURE15',\n  34000: 'TEXTURE16',\n  34001: 'TEXTURE17',\n  34002: 'TEXTURE18',\n  34003: 'TEXTURE19',\n  34004: 'TEXTURE20',\n  34005: 'TEXTURE21',\n  34006: 'TEXTURE22',\n  34007: 'TEXTURE23',\n  34008: 'TEXTURE24',\n  34009: 'TEXTURE25',\n  34010: 'TEXTURE26',\n  34011: 'TEXTURE27',\n  34012: 'TEXTURE28',\n  34013: 'TEXTURE29',\n  34014: 'TEXTURE30',\n  34015: 'TEXTURE31',\n  34016: 'ACTIVE_TEXTURE',\n  34024: 'MAX_RENDERBUFFER_SIZE',\n  34041: 'DEPTH_STENCIL',\n  34055: 'INCR_WRAP',\n  34056: 'DECR_WRAP',\n  34067: 'TEXTURE_CUBE_MAP',\n  34068: 'TEXTURE_BINDING_CUBE_MAP',\n  34069: 'TEXTURE_CUBE_MAP_POSITIVE_X',\n  34070: 'TEXTURE_CUBE_MAP_NEGATIVE_X',\n  34071: 'TEXTURE_CUBE_MAP_POSITIVE_Y',\n  34072: 'TEXTURE_CUBE_MAP_NEGATIVE_Y',\n  34073: 'TEXTURE_CUBE_MAP_POSITIVE_Z',\n  34074: 'TEXTURE_CUBE_MAP_NEGATIVE_Z',\n  34076: 'MAX_CUBE_MAP_TEXTURE_SIZE',\n  34338: 'VERTEX_ATTRIB_ARRAY_ENABLED',\n  34339: 'VERTEX_ATTRIB_ARRAY_SIZE',\n  34340: 'VERTEX_ATTRIB_ARRAY_STRIDE',\n  34341: 'VERTEX_ATTRIB_ARRAY_TYPE',\n  34342: 'CURRENT_VERTEX_ATTRIB',\n  34373: 'VERTEX_ATTRIB_ARRAY_POINTER',\n  34466: 'NUM_COMPRESSED_TEXTURE_FORMATS',\n  34467: 'COMPRESSED_TEXTURE_FORMATS',\n  34660: 'BUFFER_SIZE',\n  34661: 'BUFFER_USAGE',\n  34816: 'STENCIL_BACK_FUNC',\n  34817: 'STENCIL_BACK_FAIL',\n  34818: 'STENCIL_BACK_PASS_DEPTH_FAIL',\n  34819: 'STENCIL_BACK_PASS_DEPTH_PASS',\n  34877: 'BLEND_EQUATION_ALPHA',\n  34921: 'MAX_VERTEX_ATTRIBS',\n  34922: 'VERTEX_ATTRIB_ARRAY_NORMALIZED',\n  34930: 'MAX_TEXTURE_IMAGE_UNITS',\n  34962: 'ARRAY_BUFFER',\n  34963: 'ELEMENT_ARRAY_BUFFER',\n  34964: 'ARRAY_BUFFER_BINDING',\n  34965: 'ELEMENT_ARRAY_BUFFER_BINDING',\n  34975: 'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING',\n  35040: 'STREAM_DRAW',\n  35044: 'STATIC_DRAW',\n  35048: 'DYNAMIC_DRAW',\n  35632: 'FRAGMENT_SHADER',\n  35633: 'VERTEX_SHADER',\n  35660: 'MAX_VERTEX_TEXTURE_IMAGE_UNITS',\n  35661: 'MAX_COMBINED_TEXTURE_IMAGE_UNITS',\n  35663: 'SHADER_TYPE',\n  35664: 'FLOAT_VEC2',\n  35665: 'FLOAT_VEC3',\n  35666: 'FLOAT_VEC4',\n  35667: 'INT_VEC2',\n  35668: 'INT_VEC3',\n  35669: 'INT_VEC4',\n  35670: 'BOOL',\n  35671: 'BOOL_VEC2',\n  35672: 'BOOL_VEC3',\n  35673: 'BOOL_VEC4',\n  35674: 'FLOAT_MAT2',\n  35675: 'FLOAT_MAT3',\n  35676: 'FLOAT_MAT4',\n  35678: 'SAMPLER_2D',\n  35680: 'SAMPLER_CUBE',\n  35712: 'DELETE_STATUS',\n  35713: 'COMPILE_STATUS',\n  35714: 'LINK_STATUS',\n  35715: 'VALIDATE_STATUS',\n  35716: 'INFO_LOG_LENGTH',\n  35717: 'ATTACHED_SHADERS',\n  35718: 'ACTIVE_UNIFORMS',\n  35719: 'ACTIVE_UNIFORM_MAX_LENGTH',\n  35720: 'SHADER_SOURCE_LENGTH',\n  35721: 'ACTIVE_ATTRIBUTES',\n  35722: 'ACTIVE_ATTRIBUTE_MAX_LENGTH',\n  35724: 'SHADING_LANGUAGE_VERSION',\n  35725: 'CURRENT_PROGRAM',\n  36003: 'STENCIL_BACK_REF',\n  36004: 'STENCIL_BACK_VALUE_MASK',\n  36005: 'STENCIL_BACK_WRITEMASK',\n  36006: 'FRAMEBUFFER_BINDING',\n  36007: 'RENDERBUFFER_BINDING',\n  36048: 'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE',\n  36049: 'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME',\n  36050: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL',\n  36051: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE',\n  36053: 'FRAMEBUFFER_COMPLETE',\n  36054: 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',\n  36055: 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',\n  36057: 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',\n  36061: 'FRAMEBUFFER_UNSUPPORTED',\n  36064: 'COLOR_ATTACHMENT0',\n  36096: 'DEPTH_ATTACHMENT',\n  36128: 'STENCIL_ATTACHMENT',\n  36160: 'FRAMEBUFFER',\n  36161: 'RENDERBUFFER',\n  36162: 'RENDERBUFFER_WIDTH',\n  36163: 'RENDERBUFFER_HEIGHT',\n  36164: 'RENDERBUFFER_INTERNAL_FORMAT',\n  36168: 'STENCIL_INDEX8',\n  36176: 'RENDERBUFFER_RED_SIZE',\n  36177: 'RENDERBUFFER_GREEN_SIZE',\n  36178: 'RENDERBUFFER_BLUE_SIZE',\n  36179: 'RENDERBUFFER_ALPHA_SIZE',\n  36180: 'RENDERBUFFER_DEPTH_SIZE',\n  36181: 'RENDERBUFFER_STENCIL_SIZE',\n  36194: 'RGB565',\n  36336: 'LOW_FLOAT',\n  36337: 'MEDIUM_FLOAT',\n  36338: 'HIGH_FLOAT',\n  36339: 'LOW_INT',\n  36340: 'MEDIUM_INT',\n  36341: 'HIGH_INT',\n  36346: 'SHADER_COMPILER',\n  36347: 'MAX_VERTEX_UNIFORM_VECTORS',\n  36348: 'MAX_VARYING_VECTORS',\n  36349: 'MAX_FRAGMENT_UNIFORM_VECTORS',\n  37440: 'UNPACK_FLIP_Y_WEBGL',\n  37441: 'UNPACK_PREMULTIPLY_ALPHA_WEBGL',\n  37442: 'CONTEXT_LOST_WEBGL',\n  37443: 'UNPACK_COLORSPACE_CONVERSION_WEBGL',\n  37444: 'BROWSER_DEFAULT_WEBGL'\n}\n","var gl10 = require('./1.0/numbers')\n\nmodule.exports = function lookupConstant (number) {\n  return gl10[number]\n}\n","\nvar sprintf = require('sprintf-js').sprintf;\nvar glConstants = require('gl-constants/lookup');\nvar shaderName = require('glsl-shader-name');\nvar addLineNumbers = require('add-line-numbers');\n\nmodule.exports = formatCompilerError;\n\nfunction formatCompilerError(errLog, src, type) {\n    \"use strict\";\n\n    var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';\n\n    var typeName = 'unknown type';\n    if (type !== undefined) {\n        typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex'\n    }\n\n    var longForm = sprintf('Error compiling %s shader %s:\\n', typeName, name);\n    var shortForm = sprintf(\"%s%s\", longForm, errLog);\n\n    var errorStrings = errLog.split('\\n');\n    var errors = {};\n\n    for (var i = 0; i < errorStrings.length; i++) {\n        var errorString = errorStrings[i];\n        if (errorString === '' || errorString === \"\\0\") continue;\n        var lineNo = parseInt(errorString.split(':')[2]);\n        if (isNaN(lineNo)) {\n            throw new Error(sprintf('Could not parse error: %s', errorString));\n        }\n        errors[lineNo] = errorString;\n    }\n\n    var lines = addLineNumbers(src).split('\\n');\n\n    for (var i = 0; i < lines.length; i++) {\n        if (!errors[i+3] && !errors[i+2] && !errors[i+1]) continue;\n        var line = lines[i];\n        longForm += line + '\\n';\n        if (errors[i+1]) {\n            var e = errors[i+1];\n            e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n            longForm += sprintf('^^^ %s\\n\\n', e);\n        }\n    }\n\n    return {\n        long: longForm.trim(),\n        short: shortForm.trim()\n    };\n}\n\n","var tokenize = require('glsl-tokenizer')\nvar atob     = require('atob-lite')\n\nmodule.exports = getName\n\nfunction getName(src) {\n  var tokens = Array.isArray(src)\n    ? src\n    : tokenize(src)\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    if (token.type !== 'preprocessor') continue\n    var match = token.data.match(/\\#define\\s+SHADER_NAME(_B64)?\\s+(.+)$/)\n    if (!match) continue\n    if (!match[2]) continue\n\n    var b64  = match[1]\n    var name = match[2]\n\n    return (b64 ? atob(name) : name).trim()\n  }\n}\n","module.exports = tokenize\r\n\r\nvar literals100 = require('./lib/literals')\r\n  , operators = require('./lib/operators')\r\n  , builtins100 = require('./lib/builtins')\r\n  , literals300es = require('./lib/literals-300es')\r\n  , builtins300es = require('./lib/builtins-300es')\r\n\r\nvar NORMAL = 999          // <-- never emitted\r\n  , TOKEN = 9999          // <-- never emitted\r\n  , BLOCK_COMMENT = 0\r\n  , LINE_COMMENT = 1\r\n  , PREPROCESSOR = 2\r\n  , OPERATOR = 3\r\n  , INTEGER = 4\r\n  , FLOAT = 5\r\n  , IDENT = 6\r\n  , BUILTIN = 7\r\n  , KEYWORD = 8\r\n  , WHITESPACE = 9\r\n  , EOF = 10\r\n  , HEX = 11\r\n\r\nvar map = [\r\n    'block-comment'\r\n  , 'line-comment'\r\n  , 'preprocessor'\r\n  , 'operator'\r\n  , 'integer'\r\n  , 'float'\r\n  , 'ident'\r\n  , 'builtin'\r\n  , 'keyword'\r\n  , 'whitespace'\r\n  , 'eof'\r\n  , 'integer'\r\n]\r\n\r\nfunction tokenize(opt) {\r\n  var i = 0\r\n    , total = 0\r\n    , mode = NORMAL\r\n    , c\r\n    , last\r\n    , content = []\r\n    , tokens = []\r\n    , token_idx = 0\r\n    , token_offs = 0\r\n    , line = 1\r\n    , col = 0\r\n    , start = 0\r\n    , isnum = false\r\n    , isoperator = false\r\n    , input = ''\r\n    , len\r\n\r\n  opt = opt || {}\r\n  var allBuiltins = builtins100\r\n  var allLiterals = literals100\r\n  if (opt.version === '300 es') {\r\n    allBuiltins = builtins300es\r\n    allLiterals = literals300es\r\n  }\r\n\r\n  // cache by name\r\n  var builtinsDict = {}, literalsDict = {}\r\n  for (var i = 0; i < allBuiltins.length; i++) {\r\n    builtinsDict[allBuiltins[i]] = true\r\n  }\r\n  for (var i = 0; i < allLiterals.length; i++) {\r\n    literalsDict[allLiterals[i]] = true\r\n  }\r\n\r\n  return function(data) {\r\n    tokens = []\r\n    if (data !== null) return write(data)\r\n    return end()\r\n  }\r\n\r\n  function token(data) {\r\n    if (data.length) {\r\n      tokens.push({\r\n        type: map[mode]\r\n      , data: data\r\n      , position: start\r\n      , line: line\r\n      , column: col\r\n      })\r\n    }\r\n  }\r\n\r\n  function write(chunk) {\r\n    i = 0\r\n\r\n    if (chunk.toString) chunk = chunk.toString()\r\n\r\n    input += chunk.replace(/\\r\\n/g, '\\n')\r\n    len = input.length\r\n\r\n\r\n    var last\r\n\r\n    while(c = input[i], i < len) {\r\n      last = i\r\n\r\n      switch(mode) {\r\n        case BLOCK_COMMENT: i = block_comment(); break\r\n        case LINE_COMMENT: i = line_comment(); break\r\n        case PREPROCESSOR: i = preprocessor(); break\r\n        case OPERATOR: i = operator(); break\r\n        case INTEGER: i = integer(); break\r\n        case HEX: i = hex(); break\r\n        case FLOAT: i = decimal(); break\r\n        case TOKEN: i = readtoken(); break\r\n        case WHITESPACE: i = whitespace(); break\r\n        case NORMAL: i = normal(); break\r\n      }\r\n\r\n      if(last !== i) {\r\n        switch(input[last]) {\r\n          case '\\n': col = 0; ++line; break\r\n          default: ++col; break\r\n        }\r\n      }\r\n    }\r\n\r\n    total += i\r\n    input = input.slice(i)\r\n    return tokens\r\n  }\r\n\r\n  function end(chunk) {\r\n    if(content.length) {\r\n      token(content.join(''))\r\n    }\r\n\r\n    mode = EOF\r\n    token('(eof)')\r\n    return tokens\r\n  }\r\n\r\n  function normal() {\r\n    content = content.length ? [] : content\r\n\r\n    if(last === '/' && c === '*') {\r\n      start = total + i - 1\r\n      mode = BLOCK_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      start = total + i - 1\r\n      mode = LINE_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === '#') {\r\n      mode = PREPROCESSOR\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    if(/\\s/.test(c)) {\r\n      mode = WHITESPACE\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    isnum = /\\d/.test(c)\r\n    isoperator = /[^\\w_]/.test(c)\r\n\r\n    start = total + i\r\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN\r\n    return i\r\n  }\r\n\r\n  function whitespace() {\r\n    if(/[^\\s]/g.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function preprocessor() {\r\n    if((c === '\\r' || c === '\\n') && last !== '\\\\') {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function line_comment() {\r\n    return preprocessor()\r\n  }\r\n\r\n  function block_comment() {\r\n    if(c === '/' && last === '*') {\r\n      content.push(c)\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function operator() {\r\n    if(last === '.' && /\\d/.test(c)) {\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '*') {\r\n      mode = BLOCK_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      mode = LINE_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(c === '.' && content.length) {\r\n      while(determine_operator(content));\r\n\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(c === ';' || c === ')' || c === '(') {\r\n      if(content.length) while(determine_operator(content));\r\n      token(c)\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    var is_composite_operator = content.length === 2 && c !== '='\r\n    if(/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\r\n      while(determine_operator(content));\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function determine_operator(buf) {\r\n    var j = 0\r\n      , idx\r\n      , res\r\n\r\n    do {\r\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''))\r\n      res = operators[idx]\r\n\r\n      if(idx === -1) {\r\n        if(j-- + buf.length > 0) continue\r\n        res = buf.slice(0, 1).join('')\r\n      }\r\n\r\n      token(res)\r\n\r\n      start += res.length\r\n      content = content.slice(res.length)\r\n      return content.length\r\n    } while(1)\r\n  }\r\n\r\n  function hex() {\r\n    if(/[^a-fA-F0-9]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function integer() {\r\n    if(c === '.') {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === 'x' && content.length === 1 && content[0] === '0') {\r\n      mode = HEX\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function decimal() {\r\n    if(c === 'f') {\r\n      content.push(c)\r\n      last = c\r\n      i += 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if ((c === '-' || c === '+') && /[eE]/.test(last)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function readtoken() {\r\n    if(/[^\\d\\w_]/.test(c)) {\r\n      var contentstr = content.join('')\r\n      if(literalsDict[contentstr]) {\r\n        mode = KEYWORD\r\n      } else if(builtinsDict[contentstr]) {\r\n        mode = BUILTIN\r\n      } else {\r\n        mode = IDENT\r\n      }\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n}\r\n","// 300es builtins/reserved words that were previously valid in v100\r\nvar v100 = require('./builtins')\r\n\r\n// The texture2D|Cube functions have been removed\r\n// And the gl_ features are updated\r\nv100 = v100.slice().filter(function (b) {\r\n  return !/^(gl\\_|texture)/.test(b)\r\n})\r\n\r\nmodule.exports = v100.concat([\r\n  // the updated gl_ constants\r\n    'gl_VertexID'\r\n  , 'gl_InstanceID'\r\n  , 'gl_Position'\r\n  , 'gl_PointSize'\r\n  , 'gl_FragCoord'\r\n  , 'gl_FrontFacing'\r\n  , 'gl_FragDepth'\r\n  , 'gl_PointCoord'\r\n  , 'gl_MaxVertexAttribs'\r\n  , 'gl_MaxVertexUniformVectors'\r\n  , 'gl_MaxVertexOutputVectors'\r\n  , 'gl_MaxFragmentInputVectors'\r\n  , 'gl_MaxVertexTextureImageUnits'\r\n  , 'gl_MaxCombinedTextureImageUnits'\r\n  , 'gl_MaxTextureImageUnits'\r\n  , 'gl_MaxFragmentUniformVectors'\r\n  , 'gl_MaxDrawBuffers'\r\n  , 'gl_MinProgramTexelOffset'\r\n  , 'gl_MaxProgramTexelOffset'\r\n  , 'gl_DepthRangeParameters'\r\n  , 'gl_DepthRange'\r\n\r\n  // other builtins\r\n  , 'trunc'\r\n  , 'round'\r\n  , 'roundEven'\r\n  , 'isnan'\r\n  , 'isinf'\r\n  , 'floatBitsToInt'\r\n  , 'floatBitsToUint'\r\n  , 'intBitsToFloat'\r\n  , 'uintBitsToFloat'\r\n  , 'packSnorm2x16'\r\n  , 'unpackSnorm2x16'\r\n  , 'packUnorm2x16'\r\n  , 'unpackUnorm2x16'\r\n  , 'packHalf2x16'\r\n  , 'unpackHalf2x16'\r\n  , 'outerProduct'\r\n  , 'transpose'\r\n  , 'determinant'\r\n  , 'inverse'\r\n  , 'texture'\r\n  , 'textureSize'\r\n  , 'textureProj'\r\n  , 'textureLod'\r\n  , 'textureOffset'\r\n  , 'texelFetch'\r\n  , 'texelFetchOffset'\r\n  , 'textureProjOffset'\r\n  , 'textureLodOffset'\r\n  , 'textureProjLod'\r\n  , 'textureProjLodOffset'\r\n  , 'textureGrad'\r\n  , 'textureGradOffset'\r\n  , 'textureProjGrad'\r\n  , 'textureProjGradOffset'\r\n])\r\n","module.exports = [\r\n  // Keep this list sorted\r\n  'abs'\r\n  , 'acos'\r\n  , 'all'\r\n  , 'any'\r\n  , 'asin'\r\n  , 'atan'\r\n  , 'ceil'\r\n  , 'clamp'\r\n  , 'cos'\r\n  , 'cross'\r\n  , 'dFdx'\r\n  , 'dFdy'\r\n  , 'degrees'\r\n  , 'distance'\r\n  , 'dot'\r\n  , 'equal'\r\n  , 'exp'\r\n  , 'exp2'\r\n  , 'faceforward'\r\n  , 'floor'\r\n  , 'fract'\r\n  , 'gl_BackColor'\r\n  , 'gl_BackLightModelProduct'\r\n  , 'gl_BackLightProduct'\r\n  , 'gl_BackMaterial'\r\n  , 'gl_BackSecondaryColor'\r\n  , 'gl_ClipPlane'\r\n  , 'gl_ClipVertex'\r\n  , 'gl_Color'\r\n  , 'gl_DepthRange'\r\n  , 'gl_DepthRangeParameters'\r\n  , 'gl_EyePlaneQ'\r\n  , 'gl_EyePlaneR'\r\n  , 'gl_EyePlaneS'\r\n  , 'gl_EyePlaneT'\r\n  , 'gl_Fog'\r\n  , 'gl_FogCoord'\r\n  , 'gl_FogFragCoord'\r\n  , 'gl_FogParameters'\r\n  , 'gl_FragColor'\r\n  , 'gl_FragCoord'\r\n  , 'gl_FragData'\r\n  , 'gl_FragDepth'\r\n  , 'gl_FragDepthEXT'\r\n  , 'gl_FrontColor'\r\n  , 'gl_FrontFacing'\r\n  , 'gl_FrontLightModelProduct'\r\n  , 'gl_FrontLightProduct'\r\n  , 'gl_FrontMaterial'\r\n  , 'gl_FrontSecondaryColor'\r\n  , 'gl_LightModel'\r\n  , 'gl_LightModelParameters'\r\n  , 'gl_LightModelProducts'\r\n  , 'gl_LightProducts'\r\n  , 'gl_LightSource'\r\n  , 'gl_LightSourceParameters'\r\n  , 'gl_MaterialParameters'\r\n  , 'gl_MaxClipPlanes'\r\n  , 'gl_MaxCombinedTextureImageUnits'\r\n  , 'gl_MaxDrawBuffers'\r\n  , 'gl_MaxFragmentUniformComponents'\r\n  , 'gl_MaxLights'\r\n  , 'gl_MaxTextureCoords'\r\n  , 'gl_MaxTextureImageUnits'\r\n  , 'gl_MaxTextureUnits'\r\n  , 'gl_MaxVaryingFloats'\r\n  , 'gl_MaxVertexAttribs'\r\n  , 'gl_MaxVertexTextureImageUnits'\r\n  , 'gl_MaxVertexUniformComponents'\r\n  , 'gl_ModelViewMatrix'\r\n  , 'gl_ModelViewMatrixInverse'\r\n  , 'gl_ModelViewMatrixInverseTranspose'\r\n  , 'gl_ModelViewMatrixTranspose'\r\n  , 'gl_ModelViewProjectionMatrix'\r\n  , 'gl_ModelViewProjectionMatrixInverse'\r\n  , 'gl_ModelViewProjectionMatrixInverseTranspose'\r\n  , 'gl_ModelViewProjectionMatrixTranspose'\r\n  , 'gl_MultiTexCoord0'\r\n  , 'gl_MultiTexCoord1'\r\n  , 'gl_MultiTexCoord2'\r\n  , 'gl_MultiTexCoord3'\r\n  , 'gl_MultiTexCoord4'\r\n  , 'gl_MultiTexCoord5'\r\n  , 'gl_MultiTexCoord6'\r\n  , 'gl_MultiTexCoord7'\r\n  , 'gl_Normal'\r\n  , 'gl_NormalMatrix'\r\n  , 'gl_NormalScale'\r\n  , 'gl_ObjectPlaneQ'\r\n  , 'gl_ObjectPlaneR'\r\n  , 'gl_ObjectPlaneS'\r\n  , 'gl_ObjectPlaneT'\r\n  , 'gl_Point'\r\n  , 'gl_PointCoord'\r\n  , 'gl_PointParameters'\r\n  , 'gl_PointSize'\r\n  , 'gl_Position'\r\n  , 'gl_ProjectionMatrix'\r\n  , 'gl_ProjectionMatrixInverse'\r\n  , 'gl_ProjectionMatrixInverseTranspose'\r\n  , 'gl_ProjectionMatrixTranspose'\r\n  , 'gl_SecondaryColor'\r\n  , 'gl_TexCoord'\r\n  , 'gl_TextureEnvColor'\r\n  , 'gl_TextureMatrix'\r\n  , 'gl_TextureMatrixInverse'\r\n  , 'gl_TextureMatrixInverseTranspose'\r\n  , 'gl_TextureMatrixTranspose'\r\n  , 'gl_Vertex'\r\n  , 'greaterThan'\r\n  , 'greaterThanEqual'\r\n  , 'inversesqrt'\r\n  , 'length'\r\n  , 'lessThan'\r\n  , 'lessThanEqual'\r\n  , 'log'\r\n  , 'log2'\r\n  , 'matrixCompMult'\r\n  , 'max'\r\n  , 'min'\r\n  , 'mix'\r\n  , 'mod'\r\n  , 'normalize'\r\n  , 'not'\r\n  , 'notEqual'\r\n  , 'pow'\r\n  , 'radians'\r\n  , 'reflect'\r\n  , 'refract'\r\n  , 'sign'\r\n  , 'sin'\r\n  , 'smoothstep'\r\n  , 'sqrt'\r\n  , 'step'\r\n  , 'tan'\r\n  , 'texture2D'\r\n  , 'texture2DLod'\r\n  , 'texture2DProj'\r\n  , 'texture2DProjLod'\r\n  , 'textureCube'\r\n  , 'textureCubeLod'\r\n  , 'texture2DLodEXT'\r\n  , 'texture2DProjLodEXT'\r\n  , 'textureCubeLodEXT'\r\n  , 'texture2DGradEXT'\r\n  , 'texture2DProjGradEXT'\r\n  , 'textureCubeGradEXT'\r\n]\r\n","var v100 = require('./literals')\r\n\r\nmodule.exports = v100.slice().concat([\r\n   'layout'\r\n  , 'centroid'\r\n  , 'smooth'\r\n  , 'case'\r\n  , 'mat2x2'\r\n  , 'mat2x3'\r\n  , 'mat2x4'\r\n  , 'mat3x2'\r\n  , 'mat3x3'\r\n  , 'mat3x4'\r\n  , 'mat4x2'\r\n  , 'mat4x3'\r\n  , 'mat4x4'\r\n  , 'uvec2'\r\n  , 'uvec3'\r\n  , 'uvec4'\r\n  , 'samplerCubeShadow'\r\n  , 'sampler2DArray'\r\n  , 'sampler2DArrayShadow'\r\n  , 'isampler2D'\r\n  , 'isampler3D'\r\n  , 'isamplerCube'\r\n  , 'isampler2DArray'\r\n  , 'usampler2D'\r\n  , 'usampler3D'\r\n  , 'usamplerCube'\r\n  , 'usampler2DArray'\r\n  , 'coherent'\r\n  , 'restrict'\r\n  , 'readonly'\r\n  , 'writeonly'\r\n  , 'resource'\r\n  , 'atomic_uint'\r\n  , 'noperspective'\r\n  , 'patch'\r\n  , 'sample'\r\n  , 'subroutine'\r\n  , 'common'\r\n  , 'partition'\r\n  , 'active'\r\n  , 'filter'\r\n  , 'image1D'\r\n  , 'image2D'\r\n  , 'image3D'\r\n  , 'imageCube'\r\n  , 'iimage1D'\r\n  , 'iimage2D'\r\n  , 'iimage3D'\r\n  , 'iimageCube'\r\n  , 'uimage1D'\r\n  , 'uimage2D'\r\n  , 'uimage3D'\r\n  , 'uimageCube'\r\n  , 'image1DArray'\r\n  , 'image2DArray'\r\n  , 'iimage1DArray'\r\n  , 'iimage2DArray'\r\n  , 'uimage1DArray'\r\n  , 'uimage2DArray'\r\n  , 'image1DShadow'\r\n  , 'image2DShadow'\r\n  , 'image1DArrayShadow'\r\n  , 'image2DArrayShadow'\r\n  , 'imageBuffer'\r\n  , 'iimageBuffer'\r\n  , 'uimageBuffer'\r\n  , 'sampler1DArray'\r\n  , 'sampler1DArrayShadow'\r\n  , 'isampler1D'\r\n  , 'isampler1DArray'\r\n  , 'usampler1D'\r\n  , 'usampler1DArray'\r\n  , 'isampler2DRect'\r\n  , 'usampler2DRect'\r\n  , 'samplerBuffer'\r\n  , 'isamplerBuffer'\r\n  , 'usamplerBuffer'\r\n  , 'sampler2DMS'\r\n  , 'isampler2DMS'\r\n  , 'usampler2DMS'\r\n  , 'sampler2DMSArray'\r\n  , 'isampler2DMSArray'\r\n  , 'usampler2DMSArray'\r\n])\r\n","module.exports = [\r\n  // current\r\n    'precision'\r\n  , 'highp'\r\n  , 'mediump'\r\n  , 'lowp'\r\n  , 'attribute'\r\n  , 'const'\r\n  , 'uniform'\r\n  , 'varying'\r\n  , 'break'\r\n  , 'continue'\r\n  , 'do'\r\n  , 'for'\r\n  , 'while'\r\n  , 'if'\r\n  , 'else'\r\n  , 'in'\r\n  , 'out'\r\n  , 'inout'\r\n  , 'float'\r\n  , 'int'\r\n  , 'uint'\r\n  , 'void'\r\n  , 'bool'\r\n  , 'true'\r\n  , 'false'\r\n  , 'discard'\r\n  , 'return'\r\n  , 'mat2'\r\n  , 'mat3'\r\n  , 'mat4'\r\n  , 'vec2'\r\n  , 'vec3'\r\n  , 'vec4'\r\n  , 'ivec2'\r\n  , 'ivec3'\r\n  , 'ivec4'\r\n  , 'bvec2'\r\n  , 'bvec3'\r\n  , 'bvec4'\r\n  , 'sampler1D'\r\n  , 'sampler2D'\r\n  , 'sampler3D'\r\n  , 'samplerCube'\r\n  , 'sampler1DShadow'\r\n  , 'sampler2DShadow'\r\n  , 'struct'\r\n\r\n  // future\r\n  , 'asm'\r\n  , 'class'\r\n  , 'union'\r\n  , 'enum'\r\n  , 'typedef'\r\n  , 'template'\r\n  , 'this'\r\n  , 'packed'\r\n  , 'goto'\r\n  , 'switch'\r\n  , 'default'\r\n  , 'inline'\r\n  , 'noinline'\r\n  , 'volatile'\r\n  , 'public'\r\n  , 'static'\r\n  , 'extern'\r\n  , 'external'\r\n  , 'interface'\r\n  , 'long'\r\n  , 'short'\r\n  , 'double'\r\n  , 'half'\r\n  , 'fixed'\r\n  , 'unsigned'\r\n  , 'input'\r\n  , 'output'\r\n  , 'hvec2'\r\n  , 'hvec3'\r\n  , 'hvec4'\r\n  , 'dvec2'\r\n  , 'dvec3'\r\n  , 'dvec4'\r\n  , 'fvec2'\r\n  , 'fvec3'\r\n  , 'fvec4'\r\n  , 'sampler2DRect'\r\n  , 'sampler3DRect'\r\n  , 'sampler2DRectShadow'\r\n  , 'sizeof'\r\n  , 'cast'\r\n  , 'namespace'\r\n  , 'using'\r\n]\r\n","module.exports = [\r\n    '<<='\r\n  , '>>='\r\n  , '++'\r\n  , '--'\r\n  , '<<'\r\n  , '>>'\r\n  , '<='\r\n  , '>='\r\n  , '=='\r\n  , '!='\r\n  , '&&'\r\n  , '||'\r\n  , '+='\r\n  , '-='\r\n  , '*='\r\n  , '/='\r\n  , '%='\r\n  , '&='\r\n  , '^^'\r\n  , '^='\r\n  , '|='\r\n  , '('\r\n  , ')'\r\n  , '['\r\n  , ']'\r\n  , '.'\r\n  , '!'\r\n  , '~'\r\n  , '*'\r\n  , '/'\r\n  , '%'\r\n  , '+'\r\n  , '-'\r\n  , '<'\r\n  , '>'\r\n  , '&'\r\n  , '^'\r\n  , '|'\r\n  , '?'\r\n  , ':'\r\n  , '='\r\n  , ','\r\n  , ';'\r\n  , '{'\r\n  , '}'\r\n]\r\n","var tokenize = require('./index')\r\n\r\nmodule.exports = tokenizeString\r\n\r\nfunction tokenizeString(str, opt) {\r\n  var generator = tokenize(opt)\r\n  var tokens = []\r\n\r\n  tokens = tokens.concat(generator(str))\r\n  tokens = tokens.concat(generator(null))\r\n\r\n  return tokens\r\n}\r\n","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  ch = typeof ch !== 'undefined' ? (ch + '') : ' ';\n  return repeat(ch, num) + str;\n};","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","/// <reference types=\"webgl-strict-types\" />\nimport { assert, int, NLA_DEBUG, V3 } from \"ts3dutils\"\nimport { currentGL, TSGLContext } from \"./index\"\n\nimport GL = WebGLRenderingContextStrict\nconst WGL =\n  WebGLRenderingContext as any as WebGLRenderingContextStrict.Constants\n\nexport class Buffer {\n  buffer: WebGLBuffer | undefined = undefined\n  data: any[] = []\n\n  /** Number of elements in buffer. 2 V3s is still 2, not 6. */\n  count: int = 0\n\n  /** Space between elements in buffer. 3 for V3s. */\n  spacing: 1 | 2 | 3 | 4 = 1\n\n  hasBeenCompiled: boolean = false\n\n  name?: string\n\n  maxValue?: number\n\n  bindSize: GL[\"UNSIGNED_INT\"] | GL[\"UNSIGNED_SHORT\"]\n\n  /**\n   * Provides a simple method of uploading data to a GPU buffer.\n   *\n   * @example\n   *     const vertices = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n   *     vertices.data = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]\n   *     vertices.compile()\n   *\n   * @example\n   *     const indices = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n   *     indices.data = [[0, 1, 2], [2, 1, 3]]\n   *     indices.compile()\n   *\n   * @param target Specifies the target to which the buffer object is bound.\n   * @param type\n   */\n  constructor(\n    public readonly target: GL.BufferTarget,\n    public readonly type:\n      | typeof Float32Array\n      | typeof Uint16Array\n      | typeof Uint32Array,\n  ) {\n    assert(\n      target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER,\n      \"target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER\",\n    )\n    assert(\n      type == Float32Array || type == Uint16Array || type == Uint32Array,\n      \"type == Float32Array || type == Uint16Array || type == Uint32Array\",\n    )\n    if (Uint16Array == type) {\n      this.bindSize = WGL.UNSIGNED_SHORT\n    } else if (Uint32Array == type) {\n      this.bindSize = WGL.UNSIGNED_INT\n    }\n  }\n\n  /**\n   * Upload the contents of `data` to the GPU in preparation for rendering. The data must be a list of lists\n   * where each inner list has the same length. For example, each element of data for vertex normals would be a\n   * list of length three. This will remember the data length and element length for later use by shaders.\n   *\n   * This could have used `[].concat.apply([], this.data)` to flatten the array but Google\n   * Chrome has a maximum number of arguments so the concatenations are chunked to avoid that limit.\n   *\n   * @param usage Either `WGL.STATIC_DRAW` or `WGL.DYNAMIC_DRAW`. Defaults to `WGL.STATIC_DRAW`\n   */\n  compile(\n    usage: GL.BufferDataUsage = WGL.STATIC_DRAW,\n    gl: TSGLContext = currentGL(),\n  ): void {\n    assert(\n      WGL.STATIC_DRAW == usage || WGL.DYNAMIC_DRAW == usage,\n      \"WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type\",\n    )\n    this.buffer = this.buffer || gl.createBuffer()!\n    let buffer: Float32Array | Uint16Array | Uint32Array\n    if (this.data.length == 0) {\n      console.warn(\"empty buffer \" + this.name)\n      //console.trace()\n    }\n    if (this.data.length == 0 || this.data[0] instanceof V3) {\n      assert(!(this.data[0] instanceof V3) || this.type == Float32Array)\n      V3.pack(\n        this.data,\n        (buffer = new this.type(this.data.length * 3) as Float32Array),\n      ) // asserts that all\n      // elements are V3s\n      this.spacing = 3\n      this.count = this.data.length\n      this.maxValue = 0\n    } else {\n      //assert(Array != this.data[0].constructor, this.name + this.data[0])\n      if (Array.isArray(this.data[0])) {\n        const bufferLength = this.data.length * this.data[0].length\n        buffer = new this.type(bufferLength)\n        let i = this.data.length,\n          destPtr = bufferLength\n        while (i--) {\n          const subArray = this.data[i]\n          let j = subArray.length\n          while (j--) {\n            buffer[--destPtr] = subArray[j]\n          }\n        }\n        assert(0 == destPtr)\n      } else {\n        buffer = new this.type(this.data)\n      }\n\n      const spacing = this.data.length ? buffer.length / this.data.length : 0\n      assert(\n        spacing % 1 == 0,\n        `buffer ${this.name} elements not of consistent size, average size is ` +\n          spacing,\n      )\n      if (NLA_DEBUG) {\n        if (10000 <= buffer.length) {\n          this.maxValue = 0\n        } else {\n          this.maxValue = Math.max.apply(undefined, buffer)\n        }\n      }\n      assert([1, 2, 3, 4].includes(spacing))\n      this.spacing = spacing as 1 | 2 | 3 | 4\n      this.count = this.data.length\n    }\n    gl.bindBuffer(this.target, this.buffer)\n    gl.bufferData(this.target, buffer, usage)\n    this.hasBeenCompiled = true\n  }\n}\n","/// <reference types=\"webgl-strict-types\" />\nimport {\n  AABB,\n  arrayFromFunction,\n  assert,\n  assertVectors,\n  eq0,\n  int,\n  lerp,\n  M4,\n  NLA_PRECISION,\n  raddd,\n  TAU,\n  Transformable,\n  Tuple3,\n  V,\n  V3,\n} from \"ts3dutils\"\n\nimport { Buffer, currentGL, GL_COLOR, pushQuad, TSGLContext } from \"./index\"\n\nconst { cos, sin, PI, min, max } = Math\n\nconst WGL =\n  WebGLRenderingContext as any as WebGLRenderingContextStrict.Constants\nimport GL = WebGLRenderingContextStrict\n\nconst tempM4_1 = new M4()\nconst tempM4_2 = new M4()\n\nexport interface MeshData {\n  normals: V3[]\n  coords: [number, number][]\n  colors: GL_COLOR[]\n  TRIANGLES: int[]\n  LINES: int[]\n}\nexport type MeshWith<T extends keyof MeshData = never> = Mesh &\n  Pick<MeshData, T>\n\n/**\n * @example new Mesh()\n *        .addIndexBuffer('TRIANGLES')\n *        .addIndexBuffer('LINES')\n *        .addVertexBuffer('normals', 'ts_Normal')\n */\nexport class Mesh extends Transformable {\n  hasBeenCompiled: boolean = false\n  vertexBuffers: { [name: string]: Buffer } = {}\n  indexBuffers: { [name: string]: Buffer } = {}\n\n  vertices: V3[]\n  normals?: V3[]\n\n  constructor() {\n    super()\n    this.addVertexBuffer(\"vertices\", \"ts_Vertex\")\n  }\n\n  /**\n   * Calculate area, volume and centroid of the mesh.\n   *\n   * The area is the sum of the areas of the triangles.\n   *\n   * For closed meshes, the volume is the contained volume. If the volume is inside-out, i.e. the face normals point\n   * inwards, the returned value is negative. In general, this calculates the sum of the z-direction shadow volumes\n   * of the triangles. The z-dir shadow volume is the cut-off prism with the triangle projected onto the XY plane as\n   * the base face and the triangle itself as the top face.\n   *\n   * The centroid is the \"mean point of all points inside the volume\". If a uniform density is assumed, this is\n   * equivalent to the center of gravity. In general, this calculates the weighted average of the centroids of all the\n   * triangle shadow volumes.\n   */\n  calcVolume(this: Mesh & { TRIANGLES: int[] }): {\n    volume: number\n    centroid: V3\n    area: number\n  } {\n    let totalVolumeX2 = 0,\n      totalCentroidWithZX2 = V3.O,\n      totalAreaX2 = 0\n    const triangles = this.TRIANGLES\n    const vertices = this.vertices\n    for (let i = 0; i < triangles.length; i += 3) {\n      const ai = triangles[i + 0],\n        bi = triangles[i + 1],\n        ci = triangles[i + 2]\n      const a = vertices[ai],\n        b = vertices[bi],\n        c = vertices[ci]\n      const ab = b.minus(a),\n        ac = c.minus(a)\n      const normal = ab.cross(ac)\n      //const centroidZ = (v0.z + v1.z + v2.z) / 3\n      const faceCentroid = V3.add(a, b, c).div(3)\n      //totalVolume += centroidZ * (area === v01.cross(v02).length() / 2) * v01.cross(v02).unit().z\n      totalVolumeX2 += faceCentroid.z * normal.z\n      const faceAreaX2 = normal.length()\n      totalAreaX2 += faceAreaX2\n\n      // NB: the shadow volume centroid does NOT have the same XY coordinates\n      // as the face centroid.\n      // calculate the weighted centroid of the shadow volume:\n      // faceShadowCentroid = INTEGRATE [0; 1] (\n      //   INTEGRATE [0; 1 - s] (\n      //     normal.z *\n      //     ((1 - s - t) a + s b + t c) *\n      //     ((1 - s - t) a + s b + t c).z\n      //   ) dt\n      // ) ds\n      // = (a (2 a.z + b.z + c.z) + b (a.z + 2 b.z + c.z) + c (a.z + b.z + 2 c.z)) / 24\n      const faceShadowCentroid = V3.add(\n        a.times(2 * a.z + b.z + c.z),\n        b.times(a.z + 2 * b.z + c.z),\n        c.times(a.z + b.z + 2 * c.z),\n      ).times(normal.z) // 1/24 factor is done at very end\n      totalCentroidWithZX2 = totalCentroidWithZX2.plus(faceShadowCentroid)\n    }\n    // sumInPlaceTree adds negligible additional accuracy for XY sphere\n    const volume = totalVolumeX2 / 2\n    return {\n      volume,\n      centroid: eq0(volume)\n        ? V3.O\n        : totalCentroidWithZX2.div(24 * volume).schur(new V3(1, 1, 0.5)),\n      area: totalAreaX2 / 2,\n    }\n  }\n\n  /**\n   * Add a new vertex buffer with a list as a property called `name` on this object and map it to\n   * the attribute called `attribute` in all shaders that draw this mesh.\n   * @example new Mesh().addVertexBuffer('coords', 'ts_TexCoord')\n   */\n  addVertexBuffer<K extends string>(\n    name: K,\n    attribute: string,\n  ): this & { [k in K]: any[] } {\n    assert(\n      !this.vertexBuffers[attribute],\n      \"Buffer \" + attribute + \" already exists.\",\n    )\n    //assert(!this[name])\n    this.hasBeenCompiled = false\n    assert(\"string\" == typeof name)\n    assert(\"string\" == typeof attribute)\n    const buffer = (this.vertexBuffers[attribute] = new Buffer(\n      WGL.ARRAY_BUFFER,\n      Float32Array,\n    ))\n    buffer.name = name\n    ;(this as any)[name] = []\n    return this as any\n  }\n\n  /**\n   * Add a new index buffer.\n   * @example new Mesh().addIndexBuffer('TRIANGLES')\n   * @example new Mesh().addIndexBuffer('LINES')\n   */\n  addIndexBuffer<K extends string>(\n    name: K,\n    type: GL[\"UNSIGNED_SHORT\"] | GL[\"UNSIGNED_INT\"] = WGL.UNSIGNED_SHORT,\n  ): this & { [k in K]: int[] } {\n    this.hasBeenCompiled = false\n    const arrayType = WGL.UNSIGNED_SHORT == type ? Uint16Array : Uint32Array\n    const buffer = (this.indexBuffers[name] = new Buffer(\n      WGL.ELEMENT_ARRAY_BUFFER,\n      arrayType,\n    ))\n    buffer.name = name\n    ;(this as any)[name] = []\n    return this as any\n  }\n\n  concat(...others: this[]): this {\n    const result = new Mesh() as any\n    const allMeshes = [this as Mesh].concat(others)\n    Object.getOwnPropertyNames(this.vertexBuffers).forEach((attribute) => {\n      assert(others.every((other) => !!other.vertexBuffers[attribute]))\n      const bufferName = this.vertexBuffers[attribute].name!\n      if (\"ts_Vertex\" !== attribute) {\n        result.addVertexBuffer(bufferName, attribute)\n      }\n      result[bufferName] = [].concat(\n        ...allMeshes.map((mesh) => (mesh as any)[bufferName]),\n      )\n    })\n    Object.getOwnPropertyNames(this.indexBuffers).forEach((name) => {\n      assert(others.every((other) => !!other.indexBuffers[name]))\n      result.addIndexBuffer(name, this.indexBuffers[name].bindSize)\n      const newIndexBufferData = new Array(\n        allMeshes.reduce((sum, mesh) => sum + (mesh as any)[name].length, 0),\n      )\n      let ptr = 0\n      let startIndex = 0\n      for (const mesh of allMeshes) {\n        for (const index of (mesh as any)[name] as int[]) {\n          newIndexBufferData[ptr++] = startIndex + index\n        }\n        startIndex += mesh.vertices.length\n      }\n      result[name] = newIndexBufferData\n    })\n    result.compile()\n    return result\n  }\n\n  /**\n   * Upload all attached buffers to the GPU in preparation for rendering. This doesn't need to be called every\n   * frame, only needs to be done when the data changes.\n   *\n   * Sets `this.hasBeenCompiled` to true.\n   */\n  compile(gl: TSGLContext = currentGL()) {\n    // figure out shortest vertex buffer to make sure indexBuffers are in bounds\n    let minVertexBufferLength = Infinity // TODO, _minBufferName\n    Object.getOwnPropertyNames(this.vertexBuffers).forEach((attribute) => {\n      const buffer = this.vertexBuffers[attribute]\n      buffer.data = (this as any)[buffer.name!]\n      buffer.compile(undefined, gl)\n      if ((this as any)[buffer.name!].length < minVertexBufferLength) {\n        // _minBufferName = attribute\n        minVertexBufferLength = (this as any)[buffer.name!].length\n      }\n    })\n\n    for (const name in this.indexBuffers) {\n      const buffer = this.indexBuffers[name]\n      buffer.data = (this as any)[buffer.name!]\n      buffer.compile(undefined, gl)\n      // if (NLA_DEBUG && buffer.maxValue >= minVertexBufferLength) {\n      // \tthrow new Error(`max index value for buffer ${name}\n      // \tis too large ${buffer.maxValue} min Vbuffer size: ${minVertexBufferLength} ${minBufferName}`)\n      // }\n    }\n    this.hasBeenCompiled = true\n    return this\n  }\n\n  static async fromBinarySTL(stl: Blob) {\n    return new Promise<Mesh & { normals: V3[] }>((resolve, reject) => {\n      const mesh = new Mesh().addVertexBuffer(\"normals\", \"ts_Normal\")\n      const fileReader = new FileReader()\n      fileReader.onerror = reject\n      fileReader.onload = function (_progressEvent) {\n        const dataView = new DataView(this.result as ArrayBuffer)\n        const HEADER_BYTE_SIZE = 80\n        const triangleCount = dataView.getUint32(HEADER_BYTE_SIZE, true)\n        mesh.normals.length = triangleCount * 3\n        mesh.vertices.length = triangleCount * 3\n        let i = triangleCount * 3,\n          bufferPtr = HEADER_BYTE_SIZE + 4\n\n        function readV3() {\n          const x = dataView.getFloat32(bufferPtr, true)\n          bufferPtr += 4\n          const y = dataView.getFloat32(bufferPtr, true)\n          bufferPtr += 4\n          const z = dataView.getFloat32(bufferPtr, true)\n          bufferPtr += 4\n          return new V3(x, y, z)\n        }\n\n        while (i) {\n          i -= 3\n          const normal = readV3()\n          mesh.normals[i + 0] = normal\n          mesh.normals[i + 1] = normal\n          mesh.normals[i + 2] = normal\n          mesh.vertices[i + 0] = readV3()\n          mesh.vertices[i + 1] = readV3()\n          mesh.vertices[i + 2] = readV3()\n\n          bufferPtr += 2\n        }\n        resolve(mesh)\n      }\n      fileReader.readAsArrayBuffer(stl)\n    })\n  }\n\n  toBinarySTL(this: Mesh & { TRIANGLES: number[] }): Blob {\n    if (!this.TRIANGLES) throw new Error(\"TRIANGLES must be defined.\")\n    const HEADER_BYTE_SIZE = 80,\n      FLOAT_BYTE_SIZE = 4\n    const triangles = this.TRIANGLES\n    const triangleCount = triangles.length / 3\n    const buffer = new ArrayBuffer(\n      HEADER_BYTE_SIZE + 4 + triangleCount * (4 * 3 * FLOAT_BYTE_SIZE + 2),\n    )\n    const dataView = new DataView(buffer)\n    dataView.setUint32(HEADER_BYTE_SIZE, triangleCount, true)\n    let bufferPtr = HEADER_BYTE_SIZE + 4\n    let i = triangles.length\n    while (i) {\n      i -= 3\n      const a = this.vertices[triangles[i]],\n        b = this.vertices[triangles[i + 1]],\n        c = this.vertices[triangles[i + 2]]\n      const normal = V3.normalOnPoints(a, b, c)\n      ;[normal, a, b, c].forEach((v) => {\n        dataView.setFloat32(bufferPtr, v.x, true)\n        bufferPtr += 4\n        dataView.setFloat32(bufferPtr, v.y, true)\n        bufferPtr += 4\n        dataView.setFloat32(bufferPtr, v.z, true)\n        bufferPtr += 4\n      })\n      // skip 2 bytes, already initalized to zero\n      bufferPtr += 2\n    }\n    assert(bufferPtr == buffer.byteLength, bufferPtr + \" \" + buffer.byteLength)\n    return new Blob([buffer], { type: \"application/octet-stream\" })\n  }\n\n  /**\n   * Returns a new Mesh with transformed vertices.\n   *\n   * Transform all vertices by `matrix` and all normals by the inverse transpose of `matrix`.\n   *\n   * Index buffer data is referenced.\n   */\n  transform(m4: M4): this {\n    const mesh = new Mesh()\n    mesh.vertices = m4.transformedPoints(this.vertices)\n    if (this.normals) {\n      mesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n      const invTrans = m4\n        .as3x3(tempM4_1)\n        .inversed(tempM4_2)\n        .transposed(tempM4_1)\n      mesh.normals = this.normals.map((n) => invTrans.transformVector(n).unit())\n      // mesh.normals.forEach(n => assert(n.hasLength(1)))\n    }\n    for (const name in this.indexBuffers) {\n      mesh.addIndexBuffer(name)\n      ;(mesh as any)[name] = (this as any)[name]\n    }\n    for (const attribute in this.vertexBuffers) {\n      if (\"ts_Vertex\" !== attribute && \"ts_Normal\" !== attribute) {\n        const name = this.vertexBuffers[attribute].name!\n        mesh.addVertexBuffer(name, attribute)\n        ;(mesh as any)[name] = (this as any)[name]\n      }\n    }\n    // this.hasBeenCompiled && mesh.compile()\n    return mesh as this\n  }\n\n  /**\n   * Computes a new normal for each vertex from the average normal of the neighboring triangles. This means\n   * adjacent triangles must share vertices for the resulting normals to be smooth.\n   */\n  computeNormalsFromFlatTriangles(\n    this: Mesh & { TRIANGLES: int[] },\n  ): this & { normals: V3[] } {\n    if (!this.normals) this.addVertexBuffer(\"normals\", \"ts_Normal\")\n    // tslint:disable:no-string-literal\n    //this.vertexBuffers['ts_Normal'].data = arrayFromFunction(this.vertices.length, i => V3.O)\n\n    const TRIANGLES = this.TRIANGLES,\n      vertices = this.vertices,\n      normals = this.normals!\n    normals.length = vertices.length\n    for (let i = 0; i < TRIANGLES.length; i += 3) {\n      const ai = TRIANGLES[i],\n        bi = TRIANGLES[i + 1],\n        ci = TRIANGLES[i + 2]\n      const a = vertices[ai]\n      const b = vertices[bi]\n      const c = vertices[ci]\n      const normal = b.minus(a).cross(c.minus(a))\n      const normal1 = normal.likeO() ? V3.O : normal.unit()\n      normals[ai] = normals[ai] ? normals[ai].plus(normal1) : normal1\n      normals[bi] = normals[bi] ? normals[bi].plus(normal1) : normal1\n      normals[ci] = normals[ci] ? normals[ci].plus(normal1) : normal1\n    }\n    for (let i = 0; i < vertices.length; i++) {\n      normals[i] = normals[i].unit()\n    }\n    this.hasBeenCompiled = false\n    return this as any\n  }\n\n  /**\n   * Populate the specified index buffer (default 'LINES') from the `triangles` index buffer.\n   */\n  computeWireframeFromFlatTriangles(\n    this: Mesh & { TRIANGLES: int[] },\n  ): this & { LINES: int[] }\n  computeWireframeFromFlatTriangles<T extends string>(\n    this: Mesh & { TRIANGLES: int[] },\n    indexBufferName: T,\n  ): this & { [k in T]: int[] }\n  computeWireframeFromFlatTriangles(\n    this: any,\n    indexBufferName: string = \"LINES\",\n  ): this {\n    if (!this.TRIANGLES) throw new Error(\"TRIANGLES must be defined.\")\n    const canonEdges = new Set<number>()\n\n    function canonEdge(i0: int, i1: int) {\n      const iMin = min(i0, i1),\n        iMax = max(i0, i1)\n      return (iMin << 16) | iMax\n    }\n\n    // function uncanonEdge(key) {\n    // \treturn [key >> 16, key & 0xffff]\n    // }\n    const t = this.TRIANGLES\n    for (let i = 0; i < t.length; i += 3) {\n      canonEdges.add(canonEdge(t[i + 0], t[i + 1]))\n      canonEdges.add(canonEdge(t[i + 1], t[i + 2]))\n      canonEdges.add(canonEdge(t[i + 2], t[i + 0]))\n    }\n    const data = indexBufferName\n    if (!this[data]) this.addIndexBuffer(indexBufferName)\n    //this.LINES = new Array(canonEdges.size)\n    canonEdges.forEach((val) => this[data].push(val >> 16, val & 0xffff))\n    this.hasBeenCompiled = false\n    return this\n  }\n\n  computeWireframeFromFlatTrianglesClosedMesh(\n    this: Mesh & { TRIANGLES: int[] },\n  ): this & { LINES: int[] }\n  computeWireframeFromFlatTrianglesClosedMesh<T extends string>(\n    this: Mesh & { TRIANGLES: int[] },\n    indexBufferName: T,\n  ): this & { [k in T]: int[] }\n  computeWireframeFromFlatTrianglesClosedMesh(\n    this: any,\n    indexBufferName: string = \"LINES\",\n  ): this {\n    if (!this.TRIANGLES) throw new Error(\"TRIANGLES must be defined.\")\n    if (!this.LINES) this.addIndexBuffer(\"LINES\")\n    const tris = this.TRIANGLES\n    if (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n    const lines = this[indexBufferName]\n    for (let i = 0; i < tris.length; i += 3) {\n      if (tris[i + 0] < tris[i + 1]) lines.push(tris[i + 0], tris[i + 1])\n      if (tris[i + 1] < tris[i + 2]) lines.push(tris[i + 1], tris[i + 2])\n      if (tris[i + 2] < tris[i + 0]) lines.push(tris[i + 2], tris[i + 0])\n    }\n    this.hasBeenCompiled = false\n    return this\n  }\n\n  computeNormalLines(\n    this: Mesh & { normals: V3[] },\n    length: number,\n  ): this & { LINES: int[] }\n  computeNormalLines<T extends string>(\n    this: Mesh & { normals: V3[] },\n    length: number,\n    indexBufferName: T,\n  ): this & { [k in T]: int[] }\n  computeNormalLines(\n    this: any,\n    length: number = 1,\n    indexBufferName: string = \"LINES\",\n  ) {\n    if (!this.normals) {\n      throw new Error(\"normals must be defined.\")\n    }\n    const vs = this.vertices,\n      si = this.vertices.length\n    if (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\n    for (let i = 0; i < this.normals.length; i++) {\n      vs[si + i] = vs[i].plus(this.normals[i].toLength(length))\n      this[indexBufferName].push(si + i, i)\n    }\n    this.hasBeenCompiled = false\n    return this\n  }\n\n  getAABB(): AABB {\n    return new AABB().addPoints(this.vertices)\n  }\n\n  getBoundingSphere(): { center: V3; radius: number } {\n    const sphere = { center: this.getAABB().getCenter(), radius: 0 }\n    for (let i = 0; i < this.vertices.length; i++) {\n      sphere.radius = Math.max(\n        sphere.radius,\n        this.vertices[i].minus(sphere.center).length(),\n      )\n    }\n    return sphere\n  }\n\n  /**\n   * Generates a square mesh in the XY plane.\n   * Texture coordinates (buffer \"coords\") are set to go from 0 to 1 in either direction.\n   *\n   * @param options foo\n   * @param options.detail Defaults to 1\n   * @param options.detailX Defaults to options.detail. Number of subdivisions in X direction.\n   * @param options.detailY Defaults to options.detail. Number of subdivisions in Y direction.j\n   * @param options.width defaults to 1\n   * @param options.height defaults to 1\n   * @param options.startX defaults to 0\n   * @param options.startY defaults to 0\n   */\n  static plane(\n    options: {\n      detail?: int\n      detailX?: int\n      detailY?: int\n      width?: number\n      height?: number\n      startX?: number\n      startY?: number\n    } = {},\n  ) {\n    const detailX = options.detailX || options.detail || 1\n    const detailY = options.detailY || options.detail || 1\n    const startX = options.startX || 0\n    const startY = options.startY || 0\n    const width = options.width || 1\n    const height = options.height || 1\n    const mesh = new Mesh()\n      .addIndexBuffer(\"LINES\")\n      .addIndexBuffer(\"TRIANGLES\")\n      .addVertexBuffer(\"normals\", \"ts_Normal\")\n      .addVertexBuffer(\"coords\", \"ts_TexCoord\")\n\n    for (let j = 0; j <= detailY; j++) {\n      const t = j / detailY\n      for (let i = 0; i <= detailX; i++) {\n        const s = i / detailX\n        mesh.vertices.push(new V3(startX + s * width, startY + t * height, 0))\n        mesh.coords.push([s, t])\n        mesh.normals.push(V3.Z)\n        if (i < detailX && j < detailY) {\n          const offset = i + j * (detailX + 1)\n          mesh.TRIANGLES.push(\n            offset,\n            offset + 1,\n            offset + detailX + 1,\n            offset + detailX + 1,\n            offset + 1,\n            offset + detailX + 2,\n          )\n        }\n      }\n    }\n\n    for (let i = 0; i < detailX; i++) {\n      mesh.LINES.push(i, i + 1)\n      mesh.LINES.push(\n        (detailX + 1) * detailY + i,\n        (detailX + 1) * detailY + i + 1,\n      )\n    }\n    for (let j = 0; j < detailY; j++) {\n      mesh.LINES.push(detailX * j, detailX * (j + 1) + 1)\n      mesh.LINES.push(detailX * (j + 1), detailX * (j + 2) + 1)\n    }\n\n    mesh.compile()\n    return mesh\n  }\n\n  // unique corners of a unit cube. Used by Mesh.cube to generate a cube mesh.\n  //  Z            Y\n  //  ^  6      7 /\n  //  |  +------+\n  //  4/ |   5 /|\n  //  +------+  |\n  //  |  +---|--+\n  //  | /2   | /3\n  //  +------+     --> X\n  //  0      1\n  static UNIT_CUBE_CORNERS = [\n    V3.O,\n    new V3(0, 0, 1),\n    new V3(0, 1, 0),\n    new V3(0, 1, 1),\n\n    new V3(1, 0, 0),\n    new V3(1, 0, 1),\n    new V3(1, 1, 0),\n    V3.XYZ,\n  ]\n  static box(xDetail: int = 1, yDetail: int = 1, zDetail: int = 1) {\n    const mesh = new Mesh()\n      .addIndexBuffer(\"LINES\")\n      .addIndexBuffer(\"TRIANGLES\")\n      .addVertexBuffer(\"normals\", \"ts_Normal\")\n    mesh.vertices.length = mesh.normals.length =\n      2 *\n      ((xDetail + 1) * (yDetail + 1) +\n        (yDetail + 1) * (zDetail + 1) +\n        (zDetail + 1) * (xDetail + 1))\n    mesh.TRIANGLES.length =\n      4 * (xDetail * yDetail + yDetail * zDetail + zDetail * xDetail)\n    let vi = 0,\n      ti = 0\n    function x(\n      detailX: int,\n      detailY: int,\n      m: M4,\n      startX = 0,\n      width = 1,\n      startY = 0,\n      height = 1,\n    ) {\n      const normal = m.transformVector(V3.Z)\n      for (let j = 0; j <= detailY; j++) {\n        const t = j / detailY\n        for (let i = 0; i <= detailX; i++) {\n          const s = i / detailX\n          mesh.vertices[vi] = m.transformPoint(\n            new V3(startX + s * width, startY + t * height, 0),\n          )\n          mesh.normals[vi] = normal\n          vi++\n          if (i < detailX && j < detailY) {\n            const offset = i + j * (detailX + 1)\n            mesh.TRIANGLES[ti++] = offset\n            mesh.TRIANGLES[ti++] = offset + detailX + 1\n            mesh.TRIANGLES[ti++] = offset + 1\n            mesh.TRIANGLES[ti++] = offset + detailX + 1\n            mesh.TRIANGLES[ti++] = offset + detailX + 2\n            mesh.TRIANGLES[ti++] = offset + 1\n          }\n        }\n      }\n    }\n    x(yDetail, xDetail, M4.forSys(V3.Y, V3.X, V3.Z.negated()))\n    x(xDetail, yDetail, M4.translate(V3.Z))\n    x(zDetail, yDetail, M4.forSys(V3.Z, V3.Y, V3.X.negated()))\n    x(yDetail, zDetail, M4.forSys(V3.Y, V3.Z, V3.X, V3.X))\n    x(xDetail, zDetail, M4.forSys(V3.X, V3.Z, V3.Y.negated()))\n    x(zDetail, xDetail, M4.forSys(V3.Z, V3.X, V3.Y, V3.Y))\n    return mesh\n  }\n\n  /**\n   * Generates a unit cube (1x1x1) starting at the origin and extending into the (+ + +) octant.\n   * I.e. box from V3.O to V3(1,1,1)\n   * Creates line (only cube edges), triangle, vertex and normal1 buffers.\n   */\n  static cube() {\n    const mesh = new Mesh()\n      .addVertexBuffer(\"normals\", \"ts_Normal\")\n      .addIndexBuffer(\"TRIANGLES\")\n      .addIndexBuffer(\"LINES\")\n\n    // basically indexes for faces of the cube. vertices each need to be added 3 times,\n    // as they have different normals depending on the face being rendered\n    const VERTEX_CORNERS = [\n      [0, 4, 6, 2], // X = 0\n      [1, 3, 7, 5], // X = 1\n\n      [0, 1, 5, 4], // Y = 0\n      [2, 6, 7, 3], // Y = 1\n\n      [0, 2, 3, 1], // Z = 0\n      [4, 5, 7, 6], // Z = 1\n    ]\n\n    const VERTEX_NORMALS = [\n      V3.X.negated(),\n      V3.X,\n      V3.Y.negated(),\n      V3.Y,\n      V3.Z.negated(),\n      V3.Z,\n    ]\n\n    for (let i = 0; i < 6; i++) {\n      pushQuad(\n        mesh.TRIANGLES,\n        true,\n        mesh.vertices.length,\n        mesh.vertices.length + 1,\n        mesh.vertices.length + 3,\n        mesh.vertices.length + 2,\n      )\n      mesh.vertices.push(\n        ...VERTEX_CORNERS[i].map((j) => Mesh.UNIT_CUBE_CORNERS[j]),\n      )\n      mesh.normals.push(\n        VERTEX_NORMALS[i],\n        VERTEX_NORMALS[i],\n        VERTEX_NORMALS[i],\n        VERTEX_NORMALS[i],\n      )\n    }\n    // indexes of LINES relative to UNIT_CUBE_CORNERS. Mapped to VERTEX_CORNERS.indexOf\n    // so they make sense in the context of the mesh\n    mesh.LINES = [\n      [0, 1],\n      [0, 2],\n      [1, 3],\n      [2, 3],\n\n      [0, 4],\n      [1, 5],\n      [2, 6],\n      [3, 7],\n\n      [4, 5],\n      [4, 6],\n      [5, 7],\n      [6, 7],\n    ]\n      .flatMap((x) => x)\n      .map((i) => {\n        let fvi: number = 0\n        const fi = VERTEX_CORNERS.findIndex(\n          (faceVertexIndexes) => (fvi = faceVertexIndexes.indexOf(i)) != -1,\n        )\n        return fi * 4 + fvi\n      })\n\n    mesh.compile()\n    return mesh\n  }\n\n  static isocahedron() {\n    return Mesh.sphere(0)\n  }\n\n  static sphere2(latitudes: int, longitudes: int) {\n    const baseVertices = arrayFromFunction(latitudes, (i) => {\n      const angle = (i / (latitudes - 1)) * PI - PI / 2\n      return new V3(0, cos(angle), sin(angle))\n    })\n    const vqs = arrayFromFunction(latitudes, (i) => {\n      const angle = (i / (latitudes - 1)) * PI - PI / 2\n      const q = cos(angle)\n      return [(i / (latitudes - 1)) * q, q] as [number, number]\n    })\n    return Mesh.rotation(\n      baseVertices,\n      { anchor: V3.O, dir1: V3.Z },\n      2 * PI,\n      longitudes,\n      true,\n      baseVertices,\n      vqs,\n    )\n  }\n\n  /**\n   * Returns a sphere mesh with radius 1 created by subdividing the faces of a isocahedron (20-sided) recursively\n   * The sphere is positioned at the origin\n   * @param subdivisions\n   *      How many recursive divisions to do. A subdivision divides a triangle into 4,\n   *      so the total number of triangles is 20 * 4^subdivisions\n   * @returns\n   *      Contains vertex and normal1 buffers and index buffers for triangles and LINES\n   */\n  static sphere(subdivisions: int = 3) {\n    const golden = (1 + Math.sqrt(5)) / 2,\n      u = new V3(1, golden, 0).unit(),\n      s = u.x,\n      t = u.y\n    // base vertices of isocahedron\n    const vertices = [\n      new V3(-s, t, 0),\n      new V3(s, t, 0),\n      new V3(-s, -t, 0),\n      new V3(s, -t, 0),\n\n      new V3(0, -s, t),\n      new V3(0, s, t),\n      new V3(0, -s, -t),\n      new V3(0, s, -t),\n\n      new V3(t, 0, -s),\n      new V3(t, 0, s),\n      new V3(-t, 0, -s),\n      new V3(-t, 0, s),\n    ]\n    // base triangles of isocahedron\n    // prettier-ignore\n    const triangles = [\n\t\t\t// 5 faces around point 0\n\t\t\t0, 11, 5,\n\t\t\t0, 5, 1,\n\t\t\t0, 1, 7,\n\t\t\t0, 7, 10,\n\t\t\t0, 10, 11,\n\n\t\t\t// 5 adjacent faces\n\t\t\t1, 5, 9,\n\t\t\t5, 11, 4,\n\t\t\t11, 10, 2,\n\t\t\t10, 7, 6,\n\t\t\t7, 1, 8,\n\n\t\t\t// 5 faces around point 3\n\t\t\t3, 9, 4,\n\t\t\t3, 4, 2,\n\t\t\t3, 2, 6,\n\t\t\t3, 6, 8,\n\t\t\t3, 8, 9,\n\n\t\t\t// 5 adjacent faces\n\t\t\t4, 9, 5,\n\t\t\t2, 4, 11,\n\t\t\t6, 2, 10,\n\t\t\t8, 6, 7,\n\t\t\t9, 8, 1,\n\t\t]\n\n    /**\n     * Tesselates triangle a b c\n     * a b c must already be in vertices with the indexes ia ib ic\n     * res is the number of subdivisions to do. 0 just results in triangle and line indexes being added to the\n     * respective buffers.\n     */\n    function tesselateRecursively(\n      a: V3,\n      b: V3,\n      c: V3,\n      res: int,\n      vertices: V3[],\n      triangles: int[],\n      ia: int,\n      ib: int,\n      ic: int,\n      lines: int[],\n    ) {\n      if (0 == res) {\n        triangles.push(ia, ib, ic)\n        if (ia < ib) lines.push(ia, ib)\n        if (ib < ic) lines.push(ib, ic)\n        if (ic < ia) lines.push(ic, ia)\n      } else {\n        // subdivide the triangle abc into 4 by adding a vertex (with the correct distance from the origin)\n        // between each segment ab, bc and cd, then calling the function recursively\n        const abMid1 = a.plus(b).toLength(1),\n          bcMid1 = b.plus(c).toLength(1),\n          caMid1 = c.plus(a).toLength(1)\n        // indexes of new vertices:\n        const iabm = vertices.length,\n          ibcm = iabm + 1,\n          icam = iabm + 2\n        vertices.push(abMid1, bcMid1, caMid1)\n        tesselateRecursively(\n          abMid1,\n          bcMid1,\n          caMid1,\n          res - 1,\n          vertices,\n          triangles,\n          iabm,\n          ibcm,\n          icam,\n          lines,\n        )\n        tesselateRecursively(\n          a,\n          abMid1,\n          caMid1,\n          res - 1,\n          vertices,\n          triangles,\n          ia,\n          iabm,\n          icam,\n          lines,\n        )\n        tesselateRecursively(\n          b,\n          bcMid1,\n          abMid1,\n          res - 1,\n          vertices,\n          triangles,\n          ib,\n          ibcm,\n          iabm,\n          lines,\n        )\n        tesselateRecursively(\n          c,\n          caMid1,\n          bcMid1,\n          res - 1,\n          vertices,\n          triangles,\n          ic,\n          icam,\n          ibcm,\n          lines,\n        )\n      }\n    }\n\n    const mesh = new Mesh()\n      .addVertexBuffer(\"normals\", \"ts_Normal\")\n      .addIndexBuffer(\"TRIANGLES\")\n      .addIndexBuffer(\"LINES\")\n    mesh.vertices.push(...vertices)\n    subdivisions = undefined == subdivisions ? 4 : subdivisions\n    for (let i = 0; i < 20; i++) {\n      const [ia, ic, ib] = triangles.slice(i * 3, i * 3 + 3)\n      tesselateRecursively(\n        vertices[ia],\n        vertices[ic],\n        vertices[ib],\n        subdivisions,\n        mesh.vertices,\n        mesh.TRIANGLES,\n        ia,\n        ic,\n        ib,\n        mesh.LINES,\n      )\n    }\n\n    mesh.normals = mesh.vertices\n    mesh.compile()\n    return mesh\n  }\n\n  static aabb(aabb: AABB) {\n    const matrix = M4.product(\n      M4.translate(aabb.min),\n      M4.scale(\n        aabb.size().max(new V3(NLA_PRECISION, NLA_PRECISION, NLA_PRECISION)),\n      ),\n    )\n    const mesh = Mesh.cube().transform(matrix)\n    // mesh.vertices = aabb.corners()\n    mesh.computeNormalLines(20)\n    mesh.compile()\n\n    return mesh\n  }\n\n  static offsetVertices(\n    vertices: V3[],\n    offset: V3,\n    close: boolean,\n  ): Mesh & { TRIANGLES: int[]; coords: [number, number][] }\n  static offsetVertices(\n    vertices: V3[],\n    offset: V3,\n    close: boolean,\n    normals: V3[],\n  ): Mesh & { TRIANGLES: int[]; coords: [number, number][]; normals: V3[] }\n  static offsetVertices(\n    vertices: V3[],\n    offset: V3,\n    close: boolean,\n    normals?: V3[],\n  ) {\n    assertVectors.apply(undefined, vertices)\n    assertVectors(offset)\n\n    const mesh = new Mesh()\n      .addIndexBuffer(\"TRIANGLES\")\n      .addVertexBuffer(\"coords\", \"ts_TexCoord\")\n    normals && mesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n    mesh.vertices = vertices.concat(vertices.map((v) => v.plus(offset)))\n    const vl = vertices.length\n    mesh.coords = arrayFromFunction(vl * 2, (i): [number, number] => [\n      (i % vl) / vl,\n      (i / vl) | 0,\n    ])\n\n    const triangles = mesh.TRIANGLES\n    for (let i = 0; i < vertices.length - 1; i++) {\n      pushQuad(\n        triangles,\n        false,\n        i,\n        i + 1,\n        vertices.length + i,\n        vertices.length + i + 1,\n      )\n    }\n    if (close) {\n      pushQuad(\n        triangles,\n        false,\n        vertices.length - 1,\n        0,\n        vertices.length * 2 - 1,\n        vertices.length,\n      )\n    }\n    if (normals) {\n      mesh.normals = normals.concat(normals)\n    }\n    mesh.compile()\n    return mesh\n  }\n\n  // Creates a new $Mesh by rotating $vertices by $totalRads around $lineAxis (according to the right-hand\n  // rule). $steps is the number of steps to take. $close is whether the vertices of the first and last step\n  // should be connected by triangles. If $normals is set (pass an array of V3s of the same length as $vertices),\n  // these will also be rotated and correctly added to the mesh.\n  // @example const precious = Mesh.rotation([V(10, 0, -2), V(10, 0, 2), V(11, 0, 2), V(11, 0, -2)], , L3.Z, 512)\n  static rotation(\n    vertices: V3[],\n    lineAxis: { anchor: V3; dir1: V3 },\n    totalRads: raddd,\n    steps: int,\n    close = true,\n    normals?: V3[],\n    vqs?: [number, number][],\n  ) {\n    const mesh = new Mesh().addIndexBuffer(\"TRIANGLES\")\n    normals && mesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n    vqs && mesh.addVertexBuffer(\"coordsUVQ\", \"ts_TexCoordUVQ\")\n    const vc = vertices.length,\n      vTotal = vc * steps\n\n    const rotMat = new M4()\n    const triangles = mesh.TRIANGLES\n    for (let i = 0; i < steps; i++) {\n      // add triangles\n      const rads = totalRads * (i / steps)\n      M4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat)\n      mesh.vertices.push(...rotMat.transformedPoints(vertices))\n\n      normals && mesh.normals!.push(...rotMat.transformedVectors(normals))\n      vqs &&\n        (\n          mesh as unknown as {\n            coordsUVQ: [number, number, number][]\n          }\n        ).coordsUVQ.push(\n          ...vqs.map(([v, q]): [number, number, number] => [\n            (i / steps) * q,\n            v,\n            q,\n          ]),\n        )\n      if (close || i !== steps - 1) {\n        for (let j = 0; j < vc - 1; j++) {\n          pushQuad(\n            triangles,\n            false,\n            i * vc + j + 1,\n            i * vc + j,\n            ((i + 1) * vc + j + 1) % vTotal,\n            ((i + 1) * vc + j) % vTotal,\n          )\n        }\n      }\n    }\n\n    mesh.compile()\n    return mesh\n  }\n\n  static spiral(\n    vertices: V3[],\n    lineAxis: { anchor: V3; dir1: V3 },\n    totalRads: raddd,\n    steps: int,\n    gradient: number,\n    normals?: V3[],\n    vqs?: [number, number][],\n  ) {\n    const mesh = new Mesh().addIndexBuffer(\"TRIANGLES\")\n    normals && mesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n    vqs && mesh.addVertexBuffer(\"coordsUVQ\", \"ts_TexCoordUVQ\")\n    const vc = vertices.length,\n      vTotal = vc * steps\n\n    const rotMat = new M4()\n    const triangles = mesh.TRIANGLES\n    for (let i = 0; i < steps; i++) {\n      // add triangles\n      const rads = totalRads * (i / steps)\n      M4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat)\n\n      mesh.vertices.push(\n        ...rotMat\n          .translate(\n            lineAxis.dir1.toLength((totalRads / TAU) * (i / steps) * gradient),\n          )\n          .transformedPoints(vertices),\n      )\n\n      normals && mesh.normals!.push(...rotMat.transformedVectors(normals))\n      vqs &&\n        (\n          mesh as unknown as {\n            coordsUVQ: [number, number, number][]\n          }\n        ).coordsUVQ.push(\n          ...vqs.map(([v, q]): [number, number, number] => [\n            (i / steps) * q,\n            v,\n            q,\n          ]),\n        )\n      if (i !== steps - 1) {\n        for (let j = 0; j < vc - 1; j++) {\n          pushQuad(\n            triangles,\n            false,\n            i * vc + j + 1,\n            i * vc + j,\n            ((i + 1) * vc + j + 1) % vTotal,\n            ((i + 1) * vc + j) % vTotal,\n          )\n        }\n      }\n    }\n\n    mesh.compile()\n    return mesh\n  }\n\n  static parametric(\n    pF: (d: number, z: number) => V3,\n    pN: undefined,\n    sMin: number,\n    sMax: number,\n    tMin: number,\n    tMax: number,\n    sRes: number,\n    tRes: number,\n  ): Mesh & { TRIANGLES: int[] }\n  static parametric(\n    pF: (d: number, z: number) => V3,\n    pN: (d: number, z: number) => V3,\n    sMin: number,\n    sMax: number,\n    tMin: number,\n    tMax: number,\n    sRes: number,\n    tRes: number,\n  ): Mesh & { normals: V3[]; TRIANGLES: int[] }\n  static parametric(\n    pF: (d: number, z: number) => V3,\n    pN: ((d: number, z: number) => V3) | undefined,\n    sMin: number,\n    sMax: number,\n    tMin: number,\n    tMax: number,\n    sRes: number,\n    tRes: number,\n  ) {\n    const mesh = new Mesh()\n      .addIndexBuffer(\"TRIANGLES\")\n      .addVertexBuffer(\"normals\", \"ts_Normal\")\n    for (let si = 0; si <= sRes; si++) {\n      const s = lerp(sMin, sMax, si / sRes)\n      for (let ti = 0; ti <= tRes; ti++) {\n        const t = lerp(tMin, tMax, ti / tRes)\n        mesh.vertices.push(pF(s, t))\n        pN && mesh.normals.push(pN(s, t))\n        if (ti < tRes && si < sRes) {\n          const offset = ti + si * (tRes + 1)\n          pushQuad(\n            mesh.TRIANGLES,\n            false,\n            offset,\n            offset + tRes + 1,\n            offset + 1,\n            offset + tRes + 2,\n          )\n        }\n      }\n    }\n    return mesh\n  }\n\n  static load(json: {\n    vertices: Tuple3<number>[]\n    triangles?: Tuple3<number>[]\n    normals?: Tuple3<number>[]\n  }) {\n    const mesh = new Mesh()\n    if (Array.isArray(json.vertices[0])) {\n      mesh.vertices = json.vertices.map((x) => V(x))\n    } else {\n      throw new Error()\n    }\n    if (json.triangles) {\n      mesh.addIndexBuffer(\"TRIANGLES\")\n      ;(mesh as any).TRIANGLES = json.triangles\n    }\n    if (json.normals) {\n      mesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n      ;(mesh as any).normals = json.normals\n    }\n    mesh.compile()\n    return mesh\n  }\n\n  toJSON() {\n    return {\n      vertices: this.vertices.map((x) => x.toArray()),\n      TRIANGLES: (this as any).TRIANGLES,\n    }\n  }\n}\n","/* tslint:disable:no-string-literal */\n/// <reference types=\"webgl-strict-types\" />\nimport {\n  assert,\n  assertf,\n  assertInst,\n  assertVectors,\n  int,\n  M4,\n  NLA_DEBUG,\n  V3,\n} from \"ts3dutils\"\n\nimport { Buffer, currentGL, GL_COLOR, Mesh, TSGLContext } from \"./index\"\n\nimport GL = WebGLRenderingContextStrict\nimport formatCompilerError from \"gl-format-compiler-error\"\nconst WGL =\n  WebGLRenderingContext as any as WebGLRenderingContextStrict.Constants\n\n/**\n * These are all the draw modes usable in OpenGL ES\n */\nconst DRAW_MODE_NAMES = {\n  [WGL.POINTS]: \"POINTS\",\n  [WGL.LINES]: \"LINES\",\n  [WGL.LINE_STRIP]: \"LINE_STRIP\",\n  [WGL.LINE_LOOP]: \"LINE_LOOP\",\n  [WGL.TRIANGLES]: \"TRIANGLES\",\n  [WGL.TRIANGLE_STRIP]: \"TRIANGLE_STRIP\",\n  [WGL.TRIANGLE_FAN]: \"TRIANGLE_FAN\",\n}\nconst DRAW_MODE_CHECKS: { [type: string]: (x: int) => boolean } = {\n  [WGL.POINTS]: (_) => true,\n  [WGL.LINES]: (x) => 0 == x % 2, // divisible by 2\n  [WGL.LINE_STRIP]: (x) => x > 2, // need at least 2\n  [WGL.LINE_LOOP]: (x) => x > 2, // more like > 3, but oh well\n  [WGL.TRIANGLES]: (x) => 0 == x % 3, // divisible by 3\n  [WGL.TRIANGLE_STRIP]: (x) => x > 3,\n  [WGL.TRIANGLE_FAN]: (x) => x > 3,\n}\n\nexport const SHADER_VAR_TYPES = [\n  \"FLOAT\",\n  \"FLOAT_MAT2\",\n  \"FLOAT_MAT3\",\n  \"FLOAT_MAT4\",\n  \"FLOAT_VEC2\",\n  \"FLOAT_VEC3\",\n  \"FLOAT_VEC4\",\n  \"INT\",\n  \"INT_VEC2\",\n  \"INT_VEC3\",\n  \"INT_VEC4\",\n  \"UNSIGNED_INT\",\n]\n\nexport function isArray<T>(obj: any): obj is T[] {\n  return (\n    Array == obj.constructor ||\n    Float32Array == obj.constructor ||\n    Float64Array == obj.constructor\n  )\n}\n\nexport interface UniformTypesMap {\n  FLOAT_VEC4: GL_COLOR | V3\n  FLOAT_VEC3: [number, number, number] | V3\n  FLOAT_VEC2: [number, number] | V3\n  FLOAT: number\n  INT: int\n  UNSIGNED_INT: int\n  FLOAT_MAT4: M4 | number[]\n  FLOAT_MAT3: M4 | number[]\n  SAMPLER_2D: int\n  BOOL: boolean\n}\nexport type UniformTypes = keyof UniformTypesMap\n\nfunction isFloatArray(obj: any): obj is number[] | Float64Array | Float32Array {\n  return (\n    Float32Array == obj.constructor ||\n    Float64Array == obj.constructor ||\n    (Array.isArray(obj) && obj.every((x) => \"number\" == typeof x))\n  )\n}\n\nfunction isIntArray(x: any) {\n  if (\n    [\n      Int8Array,\n      Uint8Array,\n      Uint8ClampedArray,\n      Int16Array,\n      Uint16Array,\n      Int32Array,\n      Uint32Array,\n    ].some((y) => x instanceof y)\n  ) {\n    return true\n  }\n  return (\n    (x instanceof Float32Array ||\n      x instanceof Float64Array ||\n      Array.isArray(x)) &&\n    (x as number[]).every((x) => Number.isInteger(x))\n  )\n}\n\nexport type ShaderType<UniformTypes, AttributeTypes = {}> = string & {\n  T?: UniformTypes\n  A?: AttributeTypes\n}\nexport type VarTypeMap = { [name: string]: UniformTypes }\nexport type ShaderSource<\n  U extends VarTypeMap,\n  IN extends VarTypeMap,\n  OUT extends VarTypeMap,\n  kind extends \"vertex\" | \"fragment\",\n> = string & { U: U; IN: IN; OUT: OUT; kind: kind }\n\n//const x:UniformTypes = undefined as 'FLOAT_VEC4' | 'FLOAT_VEC3'\nexport class Shader<\n  UniformTypes extends VarTypeMap = any,\n  AttributeTypes extends VarTypeMap = any,\n> {\n  program: WebGLProgram\n  activeMatrices: { [matrixName: string]: boolean }\n  attributeLocations: { [attributeName: string]: number }\n  constantAttributes: { [attributeName: string]: boolean }\n  uniformLocations: { [uniformName: string]: WebGLUniformLocation }\n  uniformInfos: { [uniformName: string]: GL.WebGLActiveInfo<GL.UniformType> }\n  projectionMatrixVersion = -1\n  modelViewMatrixVersion = -1\n\n  /**\n   * Create shader drom typed vertex and fragment source. Weird generic\n   * arguments are because the vertex shader is required to have the OUT types\n   * the fragment shader needs as IN, but not vice-versa.\n   */\n  static create<\n    FragSrc extends ShaderSource<{}, {}, {}, \"fragment\">,\n    VertSrc extends ShaderSource<{}, {}, FragSrc[\"IN\"], \"vertex\">,\n  >(\n    vertexSource: VertSrc,\n    fragmentSource: FragSrc,\n    gl?: TSGLContext,\n  ): Shader<VertSrc[\"U\"] & FragSrc[\"U\"], VertSrc[\"IN\"]>\n  /**\n   * Create shader from typed vertex and untyped fragment source. Uniform of\n   * the fragment shader can optionally be manually specified.\n   */\n  static create<\n    FU extends VarTypeMap,\n    VertSrc extends ShaderSource<{}, {}, {}, \"vertex\">,\n  >(\n    vertexSource: VertSrc,\n    fragmentSource: string & { IN?: undefined },\n    gl?: TSGLContext,\n  ): Shader<FU & VertSrc[\"U\"], VertSrc[\"IN\"]>\n  /**\n   * Create shader from untyped vertex and typed fragment source. Uniform and\n   * attribute types of the shader can optionally be manually specified.\n   */\n  static create<\n    VU extends VarTypeMap,\n    VA extends VarTypeMap,\n    FragSrc extends ShaderSource<{}, {}, {}, \"vertex\">,\n  >(\n    vertexSource: string & { IN?: undefined },\n    fragmentSource: FragSrc,\n    gl?: TSGLContext,\n  ): Shader<VU & FragSrc[\"U\"], VA>\n  /**\n   * Create shader from untyped vertex and fragment source. Uniform and\n   * attribute types of the shader can optionally be manually specified.\n   */\n  static create<U extends VarTypeMap = {}, A extends VarTypeMap = {}>(\n    vertexSource: string & { IN?: undefined },\n    fragmentSource: string & { IN?: undefined },\n    gl?: TSGLContext,\n    name?: string,\n  ): Shader<U, A>\n  static create(\n    vertexSource: string,\n    fragmentSource: string,\n    gl?: TSGLContext,\n    name?: string,\n  ) {\n    return new Shader(vertexSource, fragmentSource, gl, name) as any\n  }\n\n  /**\n   * Provides a convenient wrapper for WebGL shaders. A few uniforms and\n   * attributes, prefixed with `gl_`, are automatically added to all shader\n   * sources to make simple shaders easier to write. Headers for the following\n   * variables are automatically prepended to the passed source. The correct\n   * variables are also automatically passed to the shader when drawing.\n   *\n   * For vertex and fragment shaders:\n   uniform mat3 ts_NormalMatrix;\n   uniform mat4 ts_ModelViewMatrix;\n   uniform mat4 ts_ProjectionMatrix;\n   uniform mat4 ts_ModelViewProjectionMatrix;\n   uniform mat4 ts_ModelViewMatrixInverse;\n   uniform mat4 ts_ProjectionMatrixInverse;\n   uniform mat4 ts_ModelViewProjectionMatrixInverse;\n   *\n   *\n   * Example usage:\n   *\n   *  const shader = new GL.Shader(\n   *      `void main() { gl_Position = ts_ModelViewProjectionMatrix *\n   * ts_Vertex; }`,\n   *      `uniform vec4 color; void main() { gl_FragColor = color; }`)\n   *\n   *  shader.uniforms({ color: [1, 0, 0, 1] }).draw(mesh)\n   *\n   * Compiles a shader program using the provided vertex and fragment shaders.\n   */\n  protected constructor(\n    vertexSource: string,\n    fragmentSource: string,\n    readonly gl = currentGL(),\n    readonly name?: string,\n  ) {\n    // const versionRegex = /^(?:\\s+|\\/\\/[\\s\\S]*?[\\r\\n]+|\\/\\*[\\s\\S]*?\\*\\/)+(#version\\s+(\\d+)\\s+es)/\n    // Headers are prepended to the sources to provide some automatic functionality.\n    const header = `\n    uniform mat3 ts_NormalMatrix;\n    uniform mat4 ts_ModelViewMatrix;\n    uniform mat4 ts_ProjectionMatrix;\n    uniform mat4 ts_ModelViewProjectionMatrix;\n    uniform mat4 ts_ModelViewMatrixInverse;\n    uniform mat4 ts_ProjectionMatrixInverse;\n    uniform mat4 ts_ModelViewProjectionMatrixInverse;\n  `\n    const matrixNames = header.match(/\\bts_\\w+/g)\n\n    // Compile and link errors are thrown as strings.\n    function compileSource(type: GL.ShaderType, source: string) {\n      const shader = gl.createShader(type)!\n      gl.shaderSource(shader, source)\n      gl.compileShader(shader)\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        const shaderInfoLog = gl.getShaderInfoLog(shader)!\n        const fmt = formatCompilerError(shaderInfoLog, source, type)\n        console.warn(fmt.long)\n        throw Object.assign(new Error(fmt.short), { shaderSource: source })\n      }\n      return shader\n    }\n\n    this.program = gl.createProgram()!\n    gl.attachShader(this.program, compileSource(gl.VERTEX_SHADER, vertexSource))\n    gl.attachShader(\n      this.program,\n      compileSource(gl.FRAGMENT_SHADER, fragmentSource),\n    )\n    gl.linkProgram(this.program)\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n      throw new Error(\"link error: \" + gl.getProgramInfoLog(this.program))\n    }\n    this.attributeLocations = {}\n    this.uniformLocations = {}\n    this.constantAttributes = {}\n\n    // Check for the use of built-in matrices that require expensive matrix\n    // multiplications to compute, and record these in `activeMatrices`.\n    this.activeMatrices = {}\n    matrixNames &&\n      matrixNames.forEach((name) => {\n        if (gl.getUniformLocation(this.program, name)) {\n          this.activeMatrices[name] = true\n        }\n      })\n\n    this.uniformInfos = {}\n    for (\n      let i = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n      i-- > 0;\n\n    ) {\n      // see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glGetActiveUniform.xml\n      // this.program has already been checked\n      // i is in bounds\n      const info = gl.getActiveUniform(this.program, i)!\n      this.uniformInfos[info.name] = info\n    }\n  }\n\n  /**\n   * Set a uniform for each property of `uniforms`. The correct\n   * `viewerGL.uniform*()` method is inferred from the value types and from the\n   * stored uniform sampler flags.\n   */\n  uniforms(\n    uniforms: Partial<{\n      [K in keyof UniformTypes]: UniformTypesMap[UniformTypes[K]]\n    }>,\n  ): this {\n    const gl = this.gl\n    gl.useProgram(this.program)\n\n    for (const name in uniforms) {\n      const location =\n        this.uniformLocations[name] || gl.getUniformLocation(this.program, name)\n      // !location && console.warn(name + ' uniform is not used in shader')\n      if (!location) continue\n      this.uniformLocations[name] = location\n      let value: any = uniforms[name] as any\n      const info = this.uniformInfos[name]\n      if (NLA_DEBUG) {\n        if (!info) {\n          throw new Error(\n            `uniform ${name} is not defined (available = ${Object.keys(\n              this.uniformInfos,\n            ).join(\",\")})`,\n          )\n        }\n        // TODO: better errors\n        if (\n          gl.SAMPLER_2D == info.type ||\n          gl.SAMPLER_CUBE == info.type ||\n          gl.INT == info.type\n        ) {\n          if (1 == info.size) {\n            assert(Number.isInteger(value))\n          } else {\n            assert(\n              isIntArray(value) && value.length == info.size,\n              \"value must be int array if info.size != 1\",\n            )\n          }\n        }\n        assert(\n          gl.FLOAT != info.type ||\n            (1 == info.size && \"number\" === typeof value) ||\n            isFloatArray(value),\n        )\n        assert(\n          gl.FLOAT_VEC3 != info.type ||\n            (1 == info.size && value instanceof V3) ||\n            (Array.isArray(value) &&\n              info.size == value.length &&\n              assertVectors(...value)),\n        )\n        assert(\n          gl.FLOAT_VEC4 != info.type ||\n            1 != info.size ||\n            (isFloatArray(value) && value.length == 4),\n        )\n        assert(gl.FLOAT_MAT4 != info.type || value instanceof M4, () =>\n          value.toSource(),\n        )\n        assert(\n          gl.FLOAT_MAT3 != info.type ||\n            value.length == 9 ||\n            value instanceof M4,\n        )\n      }\n      if (value instanceof V3) {\n        value = value.toArray()\n      }\n      if (gl.FLOAT_VEC4 == info.type && info.size != 1) {\n        if (value instanceof Float32Array || value instanceof Float64Array) {\n          gl.uniform4fv(\n            location,\n            value instanceof Float32Array ? value : Float32Array.from(value),\n          )\n        } else {\n          gl.uniform4fv(\n            location,\n            value.flatMap((x: any[]) => x),\n          )\n        }\n      } else if (gl.FLOAT == info.type && info.size != 1) {\n        gl.uniform1fv(location, value)\n      } else if (gl.FLOAT_VEC3 == info.type && info.size != 1) {\n        gl.uniform3fv(location, V3.pack(value))\n      } else if (value.length) {\n        switch (value.length) {\n          case 1:\n            gl.uniform1fv(location, value)\n            break\n          case 2:\n            gl.uniform2fv(location, value)\n            break\n          case 3:\n            gl.uniform3fv(location, value)\n            break\n          case 4:\n            gl.uniform4fv(location, value)\n            break\n          // Matrices are automatically transposed, since WebGL uses column-major\n          // indices instead of row-major indices.\n          case 9:\n            // prettier-ignore\n            gl.uniformMatrix3fv(location, false, new Float32Array([\n              value[0], value[3], value[6],\n              value[1], value[4], value[7],\n              value[2], value[5], value[8],\n            ]))\n            break\n          case 16:\n            // prettier-ignore\n            gl.uniformMatrix4fv(location, false, new Float32Array([\n              value[0], value[4], value[8], value[12],\n              value[1], value[5], value[9], value[13],\n              value[2], value[6], value[10], value[14],\n              value[3], value[7], value[11], value[15],\n            ]))\n            break\n          default:\n            throw new Error(\n              \"don't know how to load uniform \\\"\" +\n                name +\n                '\" of length ' +\n                value.length,\n            )\n        }\n      } else if (\"number\" == typeof value) {\n        if (gl.FLOAT === info.type) {\n          gl.uniform1f(location, value)\n        } else {\n          gl.uniform1i(location, value)\n        }\n      } else if (\"boolean\" == typeof value) {\n        gl.uniform1i(location, +value)\n      } else if (value instanceof M4) {\n        const m = value.m\n        if (gl.FLOAT_MAT4 == info.type) {\n          // prettier-ignore\n          gl.uniformMatrix4fv(location, false, [\n            m[0], m[4], m[8], m[12],\n            m[1], m[5], m[9], m[13],\n            m[2], m[6], m[10], m[14],\n            m[3], m[7], m[11], m[15]])\n        } else if (gl.FLOAT_MAT3 == info.type) {\n          // prettier-ignore\n          gl.uniformMatrix3fv(location, false, [\n            m[0], m[4], m[8],\n            m[1], m[5], m[9],\n            m[2], m[6], m[10]])\n        } else if (gl.FLOAT_MAT2 == info.type) {\n          // prettier-ignore\n          gl.uniformMatrix2fv(location, false, new Float32Array([\n            m[0], m[4],\n            m[1], m[5]]))\n        } else {\n          throw new Error(`Can't assign M4 to ${info.type}`)\n        }\n      } else {\n        throw new Error(\n          'attempted to set uniform \"' + name + '\" to invalid value ' + value,\n        )\n      }\n    }\n\n    return this\n  }\n\n  attributes(\n    attributes: Partial<{\n      [K in keyof AttributeTypes]: UniformTypesMap[AttributeTypes[K]]\n    }>,\n  ): this {\n    const gl = this.gl\n    gl.useProgram(this.program)\n\n    for (const name in attributes) {\n      const location =\n        this.attributeLocations[name] ||\n        gl.getAttribLocation(this.program, name)\n      if (location == -1) {\n        if (!name.startsWith(\"ts_\")) {\n          console.warn(\n            `[shader ${this.name}] Vertex buffer ${name} was not bound because the attribute is not active.`,\n          )\n        }\n        continue\n      }\n      this.attributeLocations[name] = location\n      gl.disableVertexAttribArray(location)\n      let value = attributes[name]\n      if (value instanceof V3) {\n        // TODO: figure out the types here...\n        value = value.toArray() as any\n      }\n      if (\"number\" === typeof value) {\n        gl.vertexAttrib1f(location, value)\n      } else {\n        gl.vertexAttrib4fv(location, value as number[])\n        // switch ((value as number[]).length) {\n        //   case 1:\n        //     gl.vertexAttrib1fv(location, value as number[])\n        //     break\n        //   case 2:\n        //     gl.vertexAttrib2fv(location, value as number[])\n        //     break\n        //   case 3:\n        //     gl.vertexAttrib3fv(location, value as number[])\n        //     break\n        //   case 4:\n        //     break\n        // }\n      }\n      this.constantAttributes[name] = true\n    }\n    return this\n  }\n\n  /**\n   * Sets all uniform matrix attributes, binds all relevant buffers, and draws\n   * the mesh geometry as indexed triangles or indexed LINES. Set `mode` to\n   * `gl.LINES` (and either add indices to `LINES` or call\n   * `computeWireframe()`) to draw the mesh in wireframe.\n   *\n   * @param mesh\n   * @param mode Defaults to 'TRIANGLES'. Must be passed as string so the\n   *   correct index buffer can be automatically drawn.\n   * @param start int\n   * @param count int\n   */\n  draw(\n    mesh: Mesh,\n    mode: GL.DrawMode = WGL.TRIANGLES,\n    start?: int,\n    count?: int,\n  ): this {\n    assert(mesh.hasBeenCompiled, \"mesh.hasBeenCompiled\")\n    assert(undefined != DRAW_MODE_NAMES[mode])\n    const modeName: string = DRAW_MODE_NAMES[mode]\n    // assert(mesh.indexBuffers[modeStr], `mesh.indexBuffers[${modeStr}] undefined`)\n    return this.drawBuffers(\n      mesh.vertexBuffers,\n      mesh.indexBuffers[modeName],\n      mode,\n      start,\n      count,\n    )\n  }\n\n  private outputWarnings: { [key: string]: boolean } = {}\n\n  /**\n   * Sets all uniform matrix attributes, binds all relevant buffers, and draws\n   * the indexed mesh geometry. The `vertexBuffers` argument is a map from\n   * attribute names to `Buffer` objects of type `WGL.ARRAY_BUFFER`,\n   * `indexBuffer` is a `Buffer` object of type `WGL.ELEMENT_ARRAY_BUFFER`, and\n   * `mode` is a WebGL primitive mode like `WGL.TRIANGLES` or `WGL.LINES`. This\n   * method automatically creates and caches vertex attribute pointers for\n   * attributes as needed.\n   */\n  drawBuffers(\n    vertexBuffers: { [attributeName: string]: Buffer },\n    indexBuffer: Buffer | undefined,\n    mode: GL.DrawMode = WGL.TRIANGLES,\n    start: int = 0,\n    count?: int,\n  ): this {\n    const gl = this.gl\n    assert(undefined != DRAW_MODE_NAMES[mode])\n    assertf(() => 1 <= Object.keys(vertexBuffers).length)\n    Object.keys(vertexBuffers).forEach((key) =>\n      assertInst(Buffer, vertexBuffers[key]),\n    )\n\n    // Only varruct up the built-in matrices that are active in the shader\n    const on = this.activeMatrices\n    const modelViewMatrixInverse =\n      (on[\"ts_ModelViewMatrixInverse\"] || on[\"ts_NormalMatrix\"]) &&\n      //&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n      gl.modelViewMatrix.inversed()\n    const projectionMatrixInverse =\n      on[\"ts_ProjectionMatrixInverse\"] &&\n      //&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n      gl.projectionMatrix.inversed()\n    const modelViewProjectionMatrix =\n      (on[\"ts_ModelViewProjectionMatrix\"] ||\n        on[\"ts_ModelViewProjectionMatrixInverse\"]) &&\n      //&& (this.projectionMatrixVersion != gl.projectionMatrixVersion || this.modelViewMatrixVersion !=\n      // gl.modelViewMatrixVersion)\n      gl.projectionMatrix.times(gl.modelViewMatrix)\n\n    const uni: { [matrixName: string]: M4 } = {} // Uniform Matrices\n    on[\"ts_ModelViewMatrix\"] &&\n      this.modelViewMatrixVersion != gl.modelViewMatrixVersion &&\n      (uni[\"ts_ModelViewMatrix\"] = gl.modelViewMatrix)\n    on[\"ts_ModelViewMatrixInverse\"] &&\n      (uni[\"ts_ModelViewMatrixInverse\"] = modelViewMatrixInverse as M4)\n    on[\"ts_ProjectionMatrix\"] &&\n      this.projectionMatrixVersion != gl.projectionMatrixVersion &&\n      (uni[\"ts_ProjectionMatrix\"] = gl.projectionMatrix)\n    projectionMatrixInverse &&\n      (uni[\"ts_ProjectionMatrixInverse\"] = projectionMatrixInverse)\n    modelViewProjectionMatrix &&\n      (uni[\"ts_ModelViewProjectionMatrix\"] = modelViewProjectionMatrix)\n    modelViewProjectionMatrix &&\n      on[\"ts_ModelViewProjectionMatrixInverse\"] &&\n      (uni[\"ts_ModelViewProjectionMatrixInverse\"] =\n        modelViewProjectionMatrix.inversed())\n    on[\"ts_NormalMatrix\"] &&\n      this.modelViewMatrixVersion != gl.modelViewMatrixVersion &&\n      (uni[\"ts_NormalMatrix\"] = (modelViewMatrixInverse as M4).transposed())\n    this.uniforms(uni as any)\n    this.projectionMatrixVersion = gl.projectionMatrixVersion\n    this.modelViewMatrixVersion = gl.modelViewMatrixVersion\n\n    // Create and enable attribute pointers as necessary.\n    let minVertexBufferLength = Infinity\n    for (const attribute in vertexBuffers) {\n      const buffer = vertexBuffers[attribute]\n      assert(buffer.hasBeenCompiled)\n      const location =\n        this.attributeLocations[attribute] ||\n        gl.getAttribLocation(this.program, attribute)\n      if (location == -1 || !buffer.buffer) {\n        if (!attribute.startsWith(\"ts_\")) {\n          console.warn(\n            `[shader ${this.name}] Vertex buffer ${attribute} was not bound because the attribute is not active.`,\n          )\n        }\n        continue\n      }\n      this.attributeLocations[attribute] = location\n      gl.bindBuffer(WGL.ARRAY_BUFFER, buffer.buffer)\n\n      gl.enableVertexAttribArray(location)\n\n      gl.vertexAttribPointer(location, buffer.spacing, WGL.FLOAT, false, 0, 0)\n\n      minVertexBufferLength = Math.min(minVertexBufferLength, buffer.count)\n    }\n\n    // Disable unused attribute pointers.\n    for (const attribute in this.attributeLocations) {\n      if (!(attribute in vertexBuffers)) {\n        gl.disableVertexAttribArray(this.attributeLocations[attribute])\n      }\n    }\n\n    if (NLA_DEBUG) {\n      const numAttribs = gl.getProgramParameter(\n        this.program,\n        gl.ACTIVE_ATTRIBUTES,\n      )\n      for (let i = 0; i < numAttribs; ++i) {\n        const buffer = gl.getVertexAttrib(\n          i,\n          gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,\n        )\n        if (!buffer) {\n          const info = gl.getActiveAttrib(this.program, i)!\n          if (\n            !this.constantAttributes[info.name] &&\n            !this.outputWarnings[info.name]\n          ) {\n            this.outputWarnings[info.name] = true\n            console.warn(\n              \"No buffer is bound to attribute \" +\n                info.name +\n                \" and it was not set with .attributes()\",\n            )\n          }\n        }\n        // console.log('name:', info.name, 'type:', info.type, 'size:', info.size)\n      }\n    }\n\n    // Draw the geometry.\n    if (minVertexBufferLength) {\n      if (undefined === count) {\n        count = indexBuffer ? indexBuffer.count : minVertexBufferLength\n      }\n      assert(\n        DRAW_MODE_CHECKS[mode](count),\n        \"count \" +\n          count +\n          \"doesn't fulfill requirement +\" +\n          DRAW_MODE_CHECKS[mode].toString() +\n          \" for mode \" +\n          DRAW_MODE_NAMES[mode],\n      )\n\n      if (indexBuffer) {\n        assert(indexBuffer.hasBeenCompiled)\n        assert(minVertexBufferLength > indexBuffer.maxValue!)\n        assert(count % indexBuffer.spacing == 0)\n        assert(start % indexBuffer.spacing == 0)\n        if (start + count > indexBuffer.count) {\n          throw new Error(\n            \"Buffer not long enough for passed parameters start/length/buffer length \" +\n              start +\n              \" \" +\n              count +\n              \" \" +\n              indexBuffer.count,\n          )\n        }\n        gl.bindBuffer(WGL.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer!)\n        // start parameter has to be multiple of sizeof(WGL.UNSIGNED_SHORT)\n        gl.drawElements(\n          mode,\n          count,\n          indexBuffer.bindSize as GL[\"UNSIGNED_SHORT\"],\n          indexBuffer.type.BYTES_PER_ELEMENT * start,\n        )\n      } else {\n        if (start + count > minVertexBufferLength) {\n          throw new Error(\"invalid\")\n        }\n        gl.drawArrays(mode, start, count)\n      }\n      gl.drawCallCount++\n    }\n\n    return this\n  }\n}\n","/// <reference types=\"webgl-strict-types\" />\nimport { assert, int } from \"ts3dutils\"\n\nimport { currentGL, TSGLContext } from \"./index\"\nimport GL = WebGLRenderingContextStrict\nimport GL2 = WebGL2RenderingContextStrict\n\nexport interface TextureOptions {\n  wrap?: GL.TextureWrap // defaults to WGL.CLAMP_TO_EDGE, or set wrapS and wrapT individually.\n  wrapS?: GL.TextureWrap\n  wrapT?: GL.TextureWrap\n  filter?: GL.TextureMagFilter // defaults to WGL.LINEAR, or set minFilter and magFilter individually.\n  minFilter?: GL.TextureMinFilter\n  magFilter?: GL.TextureMagFilter\n  format?: GL2.TextureFormat // defaults to WGL.RGBA.\n  internalFormat?: GL2.TextureInternalFormat\n  type?: GL.ReadPixelsType // defaults to WGL.UNSIGNED_BYTE.\n  data?: any\n}\n\nexport class Texture {\n  height: int\n  width: int\n  texture: WebGLTexture\n  // e.g. viewerGL.UNSIGNED_BYTE, viewerGL.FLOAT\n  internalFormat: GL2.TextureInternalFormat\n  format: GL2.TextureFormat\n  // e.g. viewerGL.RGBA\n  type: GL.ReadPixelsType\n\n  /**\n   * Provides a simple wrapper around WebGL textures that supports render-to-texture.\n   *\n   * The arguments `width` and `height` give the size of the texture in texels.\n   * WebGL texture dimensions must be powers of two unless `filter` is set to\n   * either `WGL.NEAREST` or `WGL.LINEAR` and `wrap` is set to `WGL.CLAMP_TO_EDGE`\n   * (which they are by default).\n   *\n   * Texture parameters can be passed in via the `options` argument.\n   * Example usage:\n   *\n   *      let tex = new GL.Texture(256, 256, {\n   *       magFilter: WGL.NEAREST,\n   *       minFilter: WGL.LINEAR,\n   *\n   *       wrapS: WGL.REPEAT,\n   *       wrapT: WGL.REPEAT,\n   *\n   *       format: WGL.RGB, // Defaults to WGL.RGBA\n   *       type: WGL.FLOAT // Defaults to WGL.UNSIGNED_BYTE\n   *     })\n   *\n   */\n  constructor(\n    width: int,\n    height: int,\n    options: TextureOptions = {},\n    readonly gl = currentGL(),\n  ) {\n    this.width = width\n    this.height = height\n    this.format = options.format || gl.RGBA\n    this.internalFormat = options.internalFormat || gl.RGBA\n    this.type = options.type || gl.UNSIGNED_BYTE\n    const magFilter = options.filter || options.magFilter || gl.LINEAR\n    const minFilter = options.filter || options.minFilter || gl.LINEAR\n    if (this.type === gl.FLOAT) {\n      if (gl.version != 2 && !gl.getExtension(\"OES_texture_float\")) {\n        throw new Error(\"OES_texture_float is required but not supported\")\n      }\n      if (\n        (minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) &&\n        !gl.getExtension(\"OES_texture_float_linear\")\n      ) {\n        throw new Error(\n          \"OES_texture_float_linear is required but not supported\",\n        )\n      }\n    } else if (this.type === gl.HALF_FLOAT_OES) {\n      if (!gl.getExtension(\"OES_texture_half_float\")) {\n        throw new Error(\"OES_texture_half_float is required but not supported\")\n      }\n      if (\n        (minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) &&\n        !gl.getExtension(\"OES_texture_half_float_linear\")\n      ) {\n        throw new Error(\n          \"OES_texture_half_float_linear is required but not supported\",\n        )\n      }\n    }\n\n    this.texture = gl.createTexture()!\n    gl.bindTexture(gl.TEXTURE_2D, this.texture)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n    gl.texParameteri(\n      gl.TEXTURE_2D,\n      gl.TEXTURE_WRAP_S,\n      options.wrap || options.wrapS || gl.CLAMP_TO_EDGE,\n    )\n    gl.texParameteri(\n      gl.TEXTURE_2D,\n      gl.TEXTURE_WRAP_T,\n      options.wrap || options.wrapT || gl.CLAMP_TO_EDGE,\n    )\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      this.internalFormat as any,\n      width,\n      height,\n      0,\n      this.format as any,\n      this.type as any,\n      options.data,\n    )\n  }\n\n  setData(data: ArrayBufferView) {\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n    this.gl.texImage2D(\n      this.gl.TEXTURE_2D,\n      0,\n      this.internalFormat as any,\n      this.width,\n      this.height,\n      0,\n      this.format as any,\n      this.type as any,\n      data as any,\n    )\n  }\n\n  downloadData(data: ArrayBufferView) {\n    if (!this.framebuffer) {\n      throw new Error(\n        \"No framebuffer. You need to draw to this texture before it makes sense to read from it.\",\n      )\n    }\n    const gl = this.gl\n    const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING)\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer)\n    this.gl.readPixels(\n      0,\n      0,\n      this.width,\n      this.height,\n      this.format as any,\n      this.type as any,\n      data as any,\n    )\n    prevFramebuffer !== this.framebuffer &&\n      gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n  }\n\n  bind(unit: int) {\n    this.gl.activeTexture((this.gl.TEXTURE0 + unit) as GL.TextureUnit)\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n  }\n\n  unbind(unit: int) {\n    this.gl.activeTexture((this.gl.TEXTURE0 + unit) as GL.TextureUnit)\n    this.gl.bindTexture(this.gl.TEXTURE_2D, null)\n  }\n\n  private framebuffer: WebGLFramebuffer | undefined\n  static checkerBoardCanvas: HTMLCanvasElement\n\n  drawTo(render: (gl: TSGLContext) => void): void {\n    const gl = this.gl\n    const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING)\n    if (!this.framebuffer) {\n      // create a renderbuffer for the depth component\n      const prevRenderbuffer = gl.getParameter(gl.RENDERBUFFER_BINDING)\n      const depthRenderbuffer = gl.createRenderbuffer()\n      gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderbuffer)\n      // DEPTH_COMPONENT16 is the only depth format\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        gl.DEPTH_COMPONENT16,\n        this.width,\n        this.height,\n      )\n      gl.bindRenderbuffer(gl.RENDERBUFFER, prevRenderbuffer)\n\n      // create a framebuffer to render to\n      this.framebuffer = gl.createFramebuffer()!\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.texture,\n        0,\n      )\n      gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        depthRenderbuffer,\n      )\n      if (\n        gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE\n      ) {\n        throw new Error(\n          \"Rendering to this texture is not supported (incomplete this.framebuffer)\",\n        )\n      }\n    } else if (prevFramebuffer !== this.framebuffer) {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n    }\n\n    const prevViewport = gl.getParameter(gl.VIEWPORT)\n\n    gl.viewport(0, 0, this.width, this.height)\n    render(gl)\n\n    // restore previous state\n    prevFramebuffer !== this.framebuffer &&\n      gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n    gl.viewport(\n      prevViewport[0],\n      prevViewport[1],\n      prevViewport[2],\n      prevViewport[3],\n    )\n  }\n\n  swapWith(other: Texture): void {\n    assert(this.gl == other.gl)\n    let temp\n    temp = other.texture\n    other.texture = this.texture\n    this.texture = temp\n\n    temp = other.width\n    other.width = this.width\n    this.width = temp\n\n    temp = other.height\n    other.height = this.height\n    this.height = temp\n\n    temp = other.framebuffer\n    other.framebuffer = this.framebuffer\n    this.framebuffer = temp\n  }\n\n  /**\n   * Return a new texture created from `imgElement`, an `<img>` tag.\n   */\n  static fromImage(\n    imgElement: HTMLImageElement | HTMLCanvasElement,\n    options: TextureOptions = {},\n    gl: TSGLContext = currentGL(),\n  ): Texture {\n    const texture = new Texture(\n      imgElement.width,\n      imgElement.height,\n      options,\n      gl,\n    )\n    try {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        texture.format as any,\n        texture.format as any,\n        texture.type as any,\n        imgElement,\n      )\n    } catch (e) {\n      if (location.protocol == \"file:\") {\n        throw new Error(\n          'imgElement not loaded for security reasons (serve this page over \"http://\" instead)',\n        )\n      } else {\n        throw new Error(\n          \"imgElement not loaded for security reasons (imgElement must originate from the same \" +\n            \"domain as this page or use Cross-Origin Resource Sharing)\",\n        )\n      }\n    }\n    if (\n      options.minFilter &&\n      options.minFilter != gl.NEAREST &&\n      options.minFilter != gl.LINEAR\n    ) {\n      gl.generateMipmap(gl.TEXTURE_2D)\n    }\n    return texture\n  }\n\n  /**\n   * Returns a checkerboard texture that will switch to the correct texture when it loads.\n   */\n  static fromURLSwitch(\n    url: string,\n    options?: TextureOptions,\n    gl = currentGL(),\n  ): Texture {\n    Texture.checkerBoardCanvas =\n      Texture.checkerBoardCanvas ||\n      (function () {\n        const c = document.createElement(\"canvas\").getContext(\"2d\")\n        if (!c) throw new Error(\"Could not create 2d canvas.\")\n        c.canvas.width = c.canvas.height = 128\n        for (let y = 0; y < c.canvas.height; y += 16) {\n          for (let x = 0; x < c.canvas.width; x += 16) {\n            //noinspection JSBitwiseOperatorUsage\n            c.fillStyle = (x ^ y) & 16 ? \"#FFF\" : \"#DDD\"\n            c.fillRect(x, y, 16, 16)\n          }\n        }\n        return c.canvas\n      })()\n    const texture = Texture.fromImage(Texture.checkerBoardCanvas, options)\n    const image = new Image()\n    image.onload = () => Texture.fromImage(image, options, gl).swapWith(texture)\n    // error event doesn't return a reason. Most likely a 404.\n    image.onerror = () => {\n      throw new Error(\"Could not load image \" + image.src + \". 404?\")\n    }\n    image.src = url\n    return texture\n  }\n\n  static fromURL(\n    url: string,\n    options?: TextureOptions,\n    gl = currentGL(),\n  ): Promise<Texture> {\n    return new Promise((resolve, reject) => {\n      const image = new Image()\n      image.onload = () => resolve(Texture.fromImage(image, options, gl))\n      image.onerror = (ev) =>\n        reject(\"Could not load image \" + image.src + \". 404?\" + ev)\n      image.src = url\n    })\n  }\n}\n","/*\n ** Copyright (c) 2012 The Khronos Group Inc.\n **\n ** Permission is hereby granted, free of charge, to any person obtaining a\n ** copy of this software and/or associated documentation files (the\n ** 'Materials'), to deal in the Materials without restriction, including\n ** without limitation the rights to use, copy, modify, merge, publish,\n ** distribute, sublicense, and/or sell copies of the Materials, and to\n ** permit persons to whom the Materials are furnished to do so, subject to\n ** the following conditions:\n **\n ** The above copyright notice and this permission notice shall be included\n ** in all copies or substantial portions of the Materials.\n **\n ** THE MATERIALS ARE PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n */\n\n// tslint:disable\nimport GL = WebGLRenderingContextStrict\nconst GL = WebGLRenderingContext as any as new () => WebGLRenderingContextStrict\n\n// Various functions for helping debug WebGL apps.\n\n/**\n * Wrapped logging function.\n * @param msg Message to log.\n */\nfunction log(msg: string) {\n  if (window.console && window.console.log) {\n    window.console.log(msg)\n  }\n}\n\n/**\n * Wrapped error logging function.\n * @param msg Message to log.\n */\nfunction error(msg: string) {\n  if (window.console && window.console.error) {\n    window.console.error(msg)\n  } else {\n    log(msg)\n  }\n}\n\n/**\n * Which arguments are enums based on the number of arguments to the function.\n * So\n *    'texImage2D': {\n *       9: { 0:true, 2:true, 6:true, 7:true },\n *       6: { 0:true, 2:true, 3:true, 4:true },\n *    },\n *\n * means if there are 9 arguments then 6 and 7 are enums, if there are 6\n * arguments 3 and 4 are enums\n *\n * @type {!Object.<number, !Object.<number, string>}\n */\nconst glValidEnumContexts: {\n  [funcName: string]: {\n    [argCount: number]: {\n      [argIndex: number]: boolean | { enumBitwiseOr: string[] }\n    }\n  }\n} = {\n  // Generic setters and getters\n\n  enable: { 1: { 0: true } },\n  disable: { 1: { 0: true } },\n  getParameter: { 1: { 0: true } },\n\n  // Rendering\n\n  drawArrays: { 3: { 0: true } },\n  drawElements: { 4: { 0: true, 2: true } },\n\n  // Shaders\n\n  createShader: { 1: { 0: true } },\n  getShaderParameter: { 2: { 1: true } },\n  getProgramParameter: { 2: { 1: true } },\n  getShaderPrecisionFormat: { 2: { 0: true, 1: true } },\n\n  // Vertex attributes\n\n  getVertexAttrib: { 2: { 1: true } },\n  vertexAttribPointer: { 6: { 2: true } },\n\n  // Textures\n\n  bindTexture: { 2: { 0: true } },\n  activeTexture: { 1: { 0: true } },\n  getTexParameter: { 2: { 0: true, 1: true } },\n  texParameterf: { 3: { 0: true, 1: true } },\n  texParameteri: { 3: { 0: true, 1: true, 2: true } },\n  // texImage2D and texSubImage2D are defined below with WebGL 2 entrypoints\n  copyTexImage2D: { 8: { 0: true, 2: true } },\n  copyTexSubImage2D: { 8: { 0: true } },\n  generateMipmap: { 1: { 0: true } },\n  // compressedTexImage2D and compressedTexSubImage2D are defined below with WebGL 2 entrypoints\n\n  // Buffer objects\n\n  bindBuffer: { 2: { 0: true } },\n  // bufferData and bufferSubData are defined below with WebGL 2 entrypoints\n  getBufferParameter: { 2: { 0: true, 1: true } },\n\n  // Renderbuffers and framebuffers\n\n  pixelStorei: { 2: { 0: true, 1: true } },\n  // readPixels is defined below with WebGL 2 entrypoints\n  bindRenderbuffer: { 2: { 0: true } },\n  bindFramebuffer: { 2: { 0: true } },\n  checkFramebufferStatus: { 1: { 0: true } },\n  framebufferRenderbuffer: { 4: { 0: true, 1: true, 2: true } },\n  framebufferTexture2D: { 5: { 0: true, 1: true, 2: true } },\n  getFramebufferAttachmentParameter: { 3: { 0: true, 1: true, 2: true } },\n  getRenderbufferParameter: { 2: { 0: true, 1: true } },\n  renderbufferStorage: { 4: { 0: true, 1: true } },\n\n  // Frame buffer operations (clear, blend, depth test, stencil)\n\n  clear: {\n    1: {\n      0: {\n        enumBitwiseOr: [\n          \"COLOR_BUFFER_BIT\",\n          \"DEPTH_BUFFER_BIT\",\n          \"STENCIL_BUFFER_BIT\",\n        ],\n      },\n    },\n  },\n  depthFunc: { 1: { 0: true } },\n  blendFunc: { 2: { 0: true, 1: true } },\n  blendFuncSeparate: { 4: { 0: true, 1: true, 2: true, 3: true } },\n  blendEquation: { 1: { 0: true } },\n  blendEquationSeparate: { 2: { 0: true, 1: true } },\n  stencilFunc: { 3: { 0: true } },\n  stencilFuncSeparate: { 4: { 0: true, 1: true } },\n  stencilMaskSeparate: { 2: { 0: true } },\n  stencilOp: { 3: { 0: true, 1: true, 2: true } },\n  stencilOpSeparate: { 4: { 0: true, 1: true, 2: true, 3: true } },\n\n  // Culling\n\n  cullFace: { 1: { 0: true } },\n  frontFace: { 1: { 0: true } },\n\n  // ANGLE_instanced_arrays extension\n\n  drawArraysInstancedANGLE: { 4: { 0: true } },\n  drawElementsInstancedANGLE: { 5: { 0: true, 2: true } },\n\n  // EXT_blend_minmax extension\n\n  blendEquationEXT: { 1: { 0: true } },\n\n  // WebGL 2 Buffer objects\n\n  bufferData: {\n    3: { 0: true, 2: true }, // WebGL 1\n    4: { 0: true, 2: true }, // WebGL 2\n    5: { 0: true, 2: true }, // WebGL 2\n  },\n  bufferSubData: {\n    3: { 0: true }, // WebGL 1\n    4: { 0: true }, // WebGL 2\n    5: { 0: true }, // WebGL 2\n  },\n  copyBufferSubData: { 5: { 0: true, 1: true } },\n  getBufferSubData: { 3: { 0: true }, 4: { 0: true }, 5: { 0: true } },\n\n  // WebGL 2 Framebuffer objects\n\n  blitFramebuffer: {\n    10: {\n      8: {\n        enumBitwiseOr: [\n          \"COLOR_BUFFER_BIT\",\n          \"DEPTH_BUFFER_BIT\",\n          \"STENCIL_BUFFER_BIT\",\n        ],\n      },\n      9: true,\n    },\n  },\n  framebufferTextureLayer: { 5: { 0: true, 1: true } },\n  invalidateFramebuffer: { 2: { 0: true } },\n  invalidateSubFramebuffer: { 6: { 0: true } },\n  readBuffer: { 1: { 0: true } },\n\n  // WebGL 2 Renderbuffer objects\n\n  getInternalformatParameter: { 3: { 0: true, 1: true, 2: true } },\n  renderbufferStorageMultisample: { 5: { 0: true, 2: true } },\n\n  // WebGL 2 Texture objects\n\n  texStorage2D: { 5: { 0: true, 2: true } },\n  texStorage3D: { 6: { 0: true, 2: true } },\n  texImage2D: {\n    9: { 0: true, 2: true, 6: true, 7: true }, // WebGL 1 & 2\n    6: { 0: true, 2: true, 3: true, 4: true }, // WebGL 1\n    10: { 0: true, 2: true, 6: true, 7: true }, // WebGL 2\n  },\n  texImage3D: {\n    10: { 0: true, 2: true, 7: true, 8: true },\n    11: { 0: true, 2: true, 7: true, 8: true },\n  },\n  texSubImage2D: {\n    9: { 0: true, 6: true, 7: true }, // WebGL 1 & 2\n    7: { 0: true, 4: true, 5: true }, // WebGL 1\n    10: { 0: true, 6: true, 7: true }, // WebGL 2\n  },\n  texSubImage3D: {\n    11: { 0: true, 8: true, 9: true },\n    12: { 0: true, 8: true, 9: true },\n  },\n  copyTexSubImage3D: { 9: { 0: true } },\n  compressedTexImage2D: {\n    7: { 0: true, 2: true }, // WebGL 1 & 2\n    8: { 0: true, 2: true }, // WebGL 2\n    9: { 0: true, 2: true }, // WebGL 2\n  },\n  compressedTexImage3D: {\n    8: { 0: true, 2: true },\n    9: { 0: true, 2: true },\n    10: { 0: true, 2: true },\n  },\n  compressedTexSubImage2D: {\n    8: { 0: true, 6: true }, // WebGL 1 & 2\n    9: { 0: true, 6: true }, // WebGL 2\n    10: { 0: true, 6: true }, // WebGL 2\n  },\n  compressedTexSubImage3D: {\n    10: { 0: true, 8: true },\n    11: { 0: true, 8: true },\n    12: { 0: true, 8: true },\n  },\n\n  // WebGL 2 Vertex attribs\n\n  vertexAttribIPointer: { 5: { 2: true } },\n\n  // WebGL 2 Writing to the drawing buffer\n\n  drawArraysInstanced: { 4: { 0: true } },\n  drawElementsInstanced: { 5: { 0: true, 2: true } },\n  drawRangeElements: { 6: { 0: true, 4: true } },\n\n  // WebGL 2 Reading back pixels\n\n  readPixels: {\n    7: { 4: true, 5: true }, // WebGL 1 & 2\n    8: { 4: true, 5: true }, // WebGL 2\n  },\n\n  // WebGL 2 Multiple Render Targets\n\n  clearBufferfv: { 3: { 0: true }, 4: { 0: true } },\n  clearBufferiv: { 3: { 0: true }, 4: { 0: true } },\n  clearBufferuiv: { 3: { 0: true }, 4: { 0: true } },\n  clearBufferfi: { 4: { 0: true } },\n\n  // WebGL 2 Query objects\n\n  beginQuery: { 2: { 0: true } },\n  endQuery: { 1: { 0: true } },\n  getQuery: { 2: { 0: true, 1: true } },\n  getQueryParameter: { 2: { 1: true } },\n\n  // WebGL 2 Sampler objects\n\n  samplerParameteri: { 3: { 1: true, 2: true } },\n  samplerParameterf: { 3: { 1: true } },\n  getSamplerParameter: { 2: { 1: true } },\n\n  // WebGL 2 Sync objects\n\n  fenceSync: { 2: { 0: true, 1: { enumBitwiseOr: [] } } },\n  clientWaitSync: {\n    3: { 1: { enumBitwiseOr: [\"SYNC_FLUSH_COMMANDS_BIT\"] } },\n  },\n  waitSync: { 3: { 1: { enumBitwiseOr: [] } } },\n  getSyncParameter: { 2: { 1: true } },\n\n  // WebGL 2 Transform Feedback\n\n  bindTransformFeedback: { 2: { 0: true } },\n  beginTransformFeedback: { 1: { 0: true } },\n  transformFeedbackVaryings: { 3: { 2: true } },\n\n  // WebGL2 Uniform Buffer Objects and Transform Feedback Buffers\n\n  bindBufferBase: { 3: { 0: true } },\n  bindBufferRange: { 5: { 0: true } },\n  getIndexedParameter: { 2: { 0: true } },\n  getActiveUniforms: { 3: { 2: true } },\n  getActiveUniformBlockParameter: { 3: { 2: true } },\n}\n\n/**\n * Map of numbers to names.\n * @type {Object}\n */\nlet glEnums: { [k: number]: string } = null as any\n\n/**\n * Map of names to numbers.\n * @type {Object}\n */\nlet enumStringToValue: { [k: string]: GL.GLenum<string> } = null as any\n\n/**\n * Initializes this module. Safe to call more than once.\n * @param ctx A WebGL context. If\n *    you have more than one context it doesn't matter which one\n *    you pass in, it is only used to pull out constants.\n */\nexport function init() {\n  if (null === glEnums) {\n    glEnums = {}\n    enumStringToValue = {}\n    const c =\n      (window as any).WebGL2RenderingContext ||\n      (window as any).WebGLRenderingContext\n    if (!c)\n      throw new Error(\n        \"Neither WebGL2RenderingContext nor WebGLRenderingContext exists on window.\",\n      )\n    for (const propertyName in c) {\n      const prop = c[propertyName]\n      if (\"number\" === typeof prop) {\n        glEnums[prop] = propertyName\n        enumStringToValue[propertyName] = prop as any\n      }\n    }\n  }\n}\n\n/**\n * Returns true or false if value matches any WebGL enum\n * @param value Value to check if it might be an enum.\n * @return True if value matches one of the WebGL defined enums\n */\nexport function mightBeEnum(value: number): boolean {\n  init()\n  return glEnums[value] !== undefined\n}\n\n/**\n * Gets an string version of an WebGL enum.\n *\n * Example:\n *   var str = WebGLDebugUtil.glEnumToString(ctx.getError())\n *\n * @param value Value to return an enum for\n * @return The string version of the enum.\n */\nexport function glEnumToString(value: GL.GLenum<string>): string {\n  init()\n  var name = glEnums[value as any]\n  return name !== undefined\n    ? \"gl.\" + name\n    : \"/*UNKNOWN WebGL ENUM*/ 0x\" + (value as any).toString(16) + \"\"\n}\n\n/**\n * Converts the argument of a WebGL function to a string.\n * Attempts to convert enum arguments to strings.\n *\n * Example:\n *   WebGLDebugUtil.init(ctx)\n *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 2, 0, gl.TEXTURE_2D)\n *\n * would return 'TEXTURE_2D'\n *\n * @param functionName the name of the WebGL function.\n * @param numArgs the number of arguments passed to the function.\n * @param argumentIndex the index of the argument.\n * @param value The value of the argument.\n * @return The value as a string.\n */\nexport function glFunctionArgToString(\n  functionName: string,\n  numArgs: number,\n  argumentIndex: number,\n  value: any,\n): string {\n  const funcInfo = glValidEnumContexts[functionName]\n  if (funcInfo !== undefined) {\n    const funcOverloadInfo = funcInfo[numArgs]\n    if (funcOverloadInfo !== undefined) {\n      const argInfo = funcOverloadInfo[argumentIndex]\n      if (argInfo) {\n        if (typeof argInfo === \"object\") {\n          const enums = argInfo.enumBitwiseOr\n          const orEnums = []\n          let orResult = 0\n          for (let i = 0; i < enums.length; ++i) {\n            const enumValue = enumStringToValue[enums[i]]\n            if ((value & enumValue) !== 0) {\n              orResult |= enumValue\n              orEnums.push(glEnumToString(enumValue))\n            }\n          }\n          if (orResult === value) {\n            return orEnums.join(\" | \")\n          } else {\n            return glEnumToString(value)\n          }\n        } else {\n          return glEnumToString(value)\n        }\n      }\n    }\n  }\n  if (value === null) {\n    return \"null\"\n  } else if (value === undefined) {\n    return \"undefined\"\n  } else {\n    return value.toString()\n  }\n}\n\n/**\n * Converts the arguments of a WebGL function to a string.\n * Attempts to convert enum arguments to strings.\n *\n * @param functionName the name of the WebGL function.\n * @param args The arguments.\n * @return The arguments as a string.\n */\nexport function glFunctionArgsToString(\n  functionName: string,\n  args: number[],\n): string {\n  // apparently we can't do args.join(',')\n  var argStr = \"\"\n  var numArgs = args.length\n  for (var ii = 0; ii < numArgs; ++ii) {\n    argStr +=\n      (ii == 0 ? \"\" : \", \") +\n      glFunctionArgToString(functionName, numArgs, ii, args[ii])\n  }\n  return argStr\n}\n\nfunction makePropertyWrapper(\n  wrapper: any,\n  original: any,\n  propertyName: string,\n) {\n  //log('wrap prop: ' + propertyName)\n  wrapper.__defineGetter__(propertyName, function () {\n    return original[propertyName]\n  })\n  // TODO(gmane): this needs to handle properties that take more than\n  // one value?\n  wrapper.__defineSetter__(propertyName, function (value: any) {\n    //log('set: ' + propertyName)\n    original[propertyName] = value\n  })\n}\n\n/**\n * Given a WebGL context returns a wrapped context that calls\n * gl.getError after every command and calls a function if the\n * result is not NO_ERROR.\n *\n * You can supply your own function if you want. For example, if you'd like\n * an exception thrown on any GL error you could do this\n *\n *    function throwOnGLError(err, funcName, args) {\n *      throw new Error(WebGLDebugUtils.glEnumToString(err) +\n *            ' was caused by call to ' + funcName)\n *    }\n *\n *    ctx = WebGLDebugUtils.makeDebugContext(\n *        canvas.getContext('webgl'), throwOnGLError)\n *\n * @param ctx The webgl context to wrap.\n * @param opt_onErrorFunc The function\n *     to call when gl.getError returns an error. If not specified the default\n *     function calls console.log with a message.\n * @param opt_onFunc The\n *     function to call when each webgl function is called. You\n *     can use this to log all calls for example.\n * @param opt_err_ctx The webgl context\n *        to call getError on if different than ctx.\n */\nexport function makeDebugContext(\n  ctx: WebGLRenderingContextStrict,\n  opt_onErrorFunc?: (err: GL.Error, funcName: string, args: any[]) => void,\n  opt_onFunc?: (funcName: string, args: any[]) => void,\n  opt_err_ctx: WebGLRenderingContextStrict = ctx,\n): WebGLRenderingContext {\n  init()\n  opt_onErrorFunc =\n    opt_onErrorFunc ||\n    function (err, functionName, args) {\n      // apparently we can't do args.join(',')\n      var argStr = \"\"\n      var numArgs = args.length\n      for (let i = 0; i < numArgs; ++i) {\n        argStr +=\n          (i == 0 ? \"\" : \", \") +\n          glFunctionArgToString(functionName, numArgs, i, args[i])\n      }\n      error(\n        \"WebGL error \" +\n          glEnumToString(err) +\n          \" in \" +\n          functionName +\n          \"(\" +\n          argStr +\n          \")\",\n      )\n    }\n\n  // Holds booleans for each GL error so after we get the error ourselves\n  // we can still return it to the client app.\n  const glErrorShadow: { [k: number]: boolean } = {}\n\n  // Makes a function that calls a WebGL function and then calls getError.\n  function makeErrorWrapper(\n    ctx: WebGLRenderingContextStrict,\n    functionName: string,\n  ) {\n    return function (...args: any[]) {\n      if (opt_onFunc) {\n        opt_onFunc(functionName, args)\n      }\n      const result = (ctx as any)[functionName].apply(ctx, args)\n      const err = opt_err_ctx.getError()\n      if (err != 0) {\n        glErrorShadow[err] = true\n        opt_onErrorFunc!(err, functionName, args)\n      }\n      return result\n    }\n  }\n\n  // Make a an object that has a copy of every property of the WebGL context\n  // but wraps all functions.\n  const wrapper: any = {}\n  for (let propertyName in ctx) {\n    const prop = ctx[propertyName as keyof WebGLRenderingContextStrict]\n    if (\"function\" === typeof prop) {\n      if (propertyName != \"getExtension\") {\n        wrapper[propertyName] = makeErrorWrapper(ctx, propertyName)\n      } else {\n        let wrapped = makeErrorWrapper(ctx, propertyName)\n        wrapper[propertyName as any] = function () {\n          const result = wrapped.apply(ctx, arguments)\n          if (!result) {\n            return null\n          }\n          return makeDebugContext(\n            result,\n            opt_onErrorFunc,\n            opt_onFunc,\n            opt_err_ctx,\n          )\n        }\n      }\n    } else {\n      makePropertyWrapper(wrapper, ctx, propertyName)\n    }\n  }\n\n  // Override the getError function with one that returns our saved results.\n  wrapper.getError = function () {\n    for (const err in glErrorShadow) {\n      if (glErrorShadow.hasOwnProperty(err)) {\n        if (glErrorShadow[err]) {\n          glErrorShadow[err] = false\n          return parseInt(err)\n        }\n      }\n    }\n    return ctx.NO_ERROR\n  }\n\n  return wrapper\n}\nexport function isWebGL2RenderingContext(\n  o: any,\n): o is WebGL2RenderingContextStrict {\n  return !!o.createTransformFeedback\n}\n/**\n * Resets a context to the initial state.\n * @param ctx The webgl context to\n *     reset.\n */\nexport function resetToInitialState(\n  ctx2: WebGL2RenderingContextStrict | WebGLRenderingContextStrict,\n) {\n  if (isWebGL2RenderingContext(ctx2)) {\n    ctx2.bindVertexArray(null)\n  }\n\n  const numAttribs = ctx2.getParameter(ctx2.MAX_VERTEX_ATTRIBS)\n  const tmp = ctx2.createBuffer()\n  ctx2.bindBuffer(ctx2.ARRAY_BUFFER, tmp)\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    ctx2.disableVertexAttribArray(ii)\n    ctx2.vertexAttribPointer(ii, 4, ctx2.FLOAT, false, 0, 0)\n    ctx2.vertexAttrib1f(ii, 0)\n    if (isWebGL2RenderingContext(ctx2)) {\n      ctx2.vertexAttribDivisor(ii, 0)\n    }\n  }\n  ctx2.deleteBuffer(tmp)\n\n  const numTextureUnits = ctx2.getParameter(ctx2.MAX_TEXTURE_IMAGE_UNITS)\n  for (let ii = 0; ii < numTextureUnits; ++ii) {\n    ctx2.activeTexture((ctx2.TEXTURE0 + ii) as GL.TextureUnit)\n    ctx2.bindTexture(ctx2.TEXTURE_CUBE_MAP, null)\n    ctx2.bindTexture(ctx2.TEXTURE_2D, null)\n    if (isWebGL2RenderingContext(ctx2)) {\n      ctx2.bindTexture(ctx2.TEXTURE_2D_ARRAY, null)\n      ctx2.bindTexture(ctx2.TEXTURE_3D, null)\n      ctx2.bindSampler(ii, null)\n    }\n  }\n\n  ctx2.activeTexture(ctx2.TEXTURE0)\n  ctx2.useProgram(null)\n  ctx2.bindBuffer(ctx2.ARRAY_BUFFER, null)\n  ctx2.bindBuffer(ctx2.ELEMENT_ARRAY_BUFFER, null)\n  ctx2.bindFramebuffer(ctx2.FRAMEBUFFER, null)\n  ctx2.bindRenderbuffer(ctx2.RENDERBUFFER, null)\n  ctx2.disable(ctx2.BLEND)\n  ctx2.disable(ctx2.CULL_FACE)\n  ctx2.disable(ctx2.DEPTH_TEST)\n  ctx2.disable(ctx2.DITHER)\n  ctx2.disable(ctx2.SCISSOR_TEST)\n  ctx2.blendColor(0, 0, 0, 0)\n  ctx2.blendEquation(ctx2.FUNC_ADD)\n  ctx2.blendFunc(ctx2.ONE, ctx2.ZERO)\n  ctx2.clearColor(0, 0, 0, 0)\n  ctx2.clearDepth(1)\n  ctx2.clearStencil(-1)\n  ctx2.colorMask(true, true, true, true)\n  ctx2.cullFace(ctx2.BACK)\n  ctx2.depthFunc(ctx2.LESS)\n  ctx2.depthMask(true)\n  ctx2.depthRange(0, 1)\n  ctx2.frontFace(ctx2.CCW)\n  ctx2.hint(ctx2.GENERATE_MIPMAP_HINT, ctx2.DONT_CARE)\n  ctx2.lineWidth(1)\n  ctx2.pixelStorei(ctx2.PACK_ALIGNMENT, 4)\n  ctx2.pixelStorei(ctx2.UNPACK_ALIGNMENT, 4)\n  ctx2.pixelStorei(ctx2.UNPACK_FLIP_Y_WEBGL, false)\n  ctx2.pixelStorei(ctx2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false)\n  ctx2.pixelStorei(\n    ctx2.UNPACK_COLORSPACE_CONVERSION_WEBGL,\n    ctx2.BROWSER_DEFAULT_WEBGL,\n  )\n  ctx2.polygonOffset(0, 0)\n  ctx2.sampleCoverage(1, false)\n  ctx2.scissor(0, 0, ctx2.canvas.width, ctx2.canvas.height)\n  ctx2.stencilFunc(ctx2.ALWAYS, 0, 0xffffffff)\n  ctx2.stencilMask(0xffffffff)\n  ctx2.stencilOp(ctx2.KEEP, ctx2.KEEP, ctx2.KEEP)\n  ctx2.viewport(0, 0, ctx2.canvas.width, ctx2.canvas.height)\n  ctx2.clear(\n    ctx2.COLOR_BUFFER_BIT | ctx2.DEPTH_BUFFER_BIT | ctx2.STENCIL_BUFFER_BIT,\n  )\n\n  if (isWebGL2RenderingContext(ctx2)) {\n    ctx2.drawBuffers([ctx2.BACK])\n    ctx2.readBuffer(ctx2.BACK)\n    ctx2.bindBuffer(ctx2.COPY_READ_BUFFER, null)\n    ctx2.bindBuffer(ctx2.COPY_WRITE_BUFFER, null)\n    ctx2.bindBuffer(ctx2.PIXEL_PACK_BUFFER, null)\n    ctx2.bindBuffer(ctx2.PIXEL_UNPACK_BUFFER, null)\n    const numTransformFeedbacks = ctx2.getParameter(\n      ctx2.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS,\n    )\n    for (let ii = 0; ii < numTransformFeedbacks; ++ii) {\n      ctx2.bindBufferBase(ctx2.TRANSFORM_FEEDBACK_BUFFER, ii, null)\n    }\n    const numUBOs = ctx2.getParameter(ctx2.MAX_UNIFORM_BUFFER_BINDINGS)\n    for (let ii = 0; ii < numUBOs; ++ii) {\n      ctx2.bindBufferBase(ctx2.UNIFORM_BUFFER, ii, null)\n    }\n    ctx2.disable(ctx2.RASTERIZER_DISCARD)\n    ctx2.pixelStorei(ctx2.UNPACK_IMAGE_HEIGHT, 0)\n    ctx2.pixelStorei(ctx2.UNPACK_SKIP_IMAGES, 0)\n    ctx2.pixelStorei(ctx2.UNPACK_ROW_LENGTH, 0)\n    ctx2.pixelStorei(ctx2.UNPACK_SKIP_ROWS, 0)\n    ctx2.pixelStorei(ctx2.UNPACK_SKIP_PIXELS, 0)\n    ctx2.pixelStorei(ctx2.PACK_ROW_LENGTH, 0)\n    ctx2.pixelStorei(ctx2.PACK_SKIP_ROWS, 0)\n    ctx2.pixelStorei(ctx2.PACK_SKIP_PIXELS, 0)\n    ctx2.hint(ctx2.FRAGMENT_SHADER_DERIVATIVE_HINT, ctx2.DONT_CARE)\n  }\n\n  // TODO: This should NOT be needed but Firefox fails with 'hint'\n  while (ctx2.getError()) {}\n}\n\n/**\n * Given a canvas element returns a wrapped canvas element that will\n * simulate lost context. The canvas returned adds the following functions.\n *\n * loseContext:\n *   simulates a lost context event.\n *\n * restoreContext:\n *   simulates the context being restored.\n *\n * lostContextInNCalls:\n *   loses the context after N gl calls.\n *\n * getNumCalls:\n *   tells you how many gl calls there have been so far.\n *\n * setRestoreTimeout:\n *   sets the number of milliseconds until the context is restored\n *   after it has been lost. Defaults to 0. Pass -1 to prevent\n *   automatic restoring.\n *\n * @param canvas The canvas element to wrap.\n */\nexport function makeLostContextSimulatingCanvas(canvas: HTMLCanvasElement) {\n  const canvas2 = canvas as any\n  let unwrappedContext_:\n    | WebGLRenderingContextStrict\n    | WebGL2RenderingContextStrict\n  const onLost_: WebGLContextEventListener[] = []\n  const onRestored_: WebGLContextEventListener[] = []\n  let wrappedContext_: any = {}\n  let contextId_ = 1\n  let contextLost_ = false\n  // const resourceId_ = 0\n  const resourceDb_: WebGLObject[] = []\n  let numCallsToLoseContext_ = 0\n  let numCalls_ = 0\n  let canRestore_ = false\n  let restoreTimeout_ = 0\n\n  // Holds booleans for each GL error so can simulate errors.\n  const glErrorShadow_: { [e: number]: boolean } = {}\n\n  canvas2.getContext = (function (f) {\n    return function () {\n      const ctx = f.apply(canvas2, arguments) as WebGLRenderingContextStrict\n      // Did we get a context and is it a WebGL context?\n      // @ts-ignore\n      if (\n        ctx instanceof GL ||\n        ((window as any).WebGL2RenderingContext &&\n          ctx instanceof WebGL2RenderingContext)\n      ) {\n        if (ctx != unwrappedContext_) {\n          if (unwrappedContext_) {\n            throw new Error(\"got different context\")\n          }\n          unwrappedContext_ = ctx\n          wrappedContext_ = makeLostContextSimulatingContext(unwrappedContext_)\n        }\n        return wrappedContext_\n      }\n      return ctx\n    }\n  })(canvas2.getContext)\n\n  function wrapEvent(\n    listener:\n      | WebGLContextEventListener\n      | { handleEvent: WebGLContextEventListener },\n  ) {\n    if (typeof listener == \"function\") {\n      return listener\n    } else {\n      return function (e: CustomWebGLContextEvent) {\n        listener.handleEvent(e)\n      }\n    }\n  }\n\n  function addOnContextLostListener(\n    listener:\n      | WebGLContextEventListener\n      | { handleEvent: WebGLContextEventListener },\n  ) {\n    onLost_.push(wrapEvent(listener))\n  }\n\n  function addOnContextRestoredListener(\n    listener:\n      | WebGLContextEventListener\n      | { handleEvent: WebGLContextEventListener },\n  ) {\n    onRestored_.push(wrapEvent(listener))\n  }\n\n  function wrapAddEventListener(canvas: HTMLCanvasElement) {\n    const f = canvas.addEventListener\n    canvas.addEventListener = function (type: string, listener: any) {\n      switch (type) {\n        case \"webglcontextlost\":\n          addOnContextLostListener(listener)\n          break\n        case \"webglcontextrestored\":\n          addOnContextRestoredListener(listener)\n          break\n        default:\n          f.apply(canvas, arguments)\n      }\n    }\n  }\n\n  wrapAddEventListener(canvas2)\n\n  canvas2.loseContext = function () {\n    if (!contextLost_) {\n      contextLost_ = true\n      numCallsToLoseContext_ = 0\n      ++contextId_\n      while (unwrappedContext_.getError()) clearErrors()\n      glErrorShadow_[unwrappedContext_.CONTEXT_LOST_WEBGL] = true\n      const event = makeWebGLContextEvent(\"context lost\")\n      const callbacks = onLost_.slice()\n      setTimeout(function () {\n        //log('numCallbacks:' + callbacks.length)\n        for (let ii = 0; ii < callbacks.length; ++ii) {\n          //log('calling callback:' + ii)\n          callbacks[ii](event)\n        }\n        if (restoreTimeout_ >= 0) {\n          setTimeout(function () {\n            canvas2.restoreContext()\n          }, restoreTimeout_)\n        }\n      }, 0)\n    }\n  }\n\n  canvas2.restoreContext = function () {\n    if (contextLost_) {\n      if (onRestored_.length) {\n        setTimeout(function () {\n          if (!canRestore_) {\n            throw new Error(\n              \"can not restore. webglcontestlost listener did not call event.preventDefault\",\n            )\n          }\n          freeResources()\n          resetToInitialState(unwrappedContext_)\n          contextLost_ = false\n          numCalls_ = 0\n          canRestore_ = false\n          const callbacks = onRestored_.slice()\n          const event = makeWebGLContextEvent(\"context restored\")\n          for (let ii = 0; ii < callbacks.length; ++ii) {\n            callbacks[ii](event)\n          }\n        }, 0)\n      }\n    }\n  }\n\n  canvas2.loseContextInNCalls = function (numCalls: number) {\n    if (contextLost_) {\n      throw new Error(\"You can not ask a lost context to be lost\")\n    }\n    numCallsToLoseContext_ = numCalls_ + numCalls\n  }\n\n  canvas2.getNumCalls = function () {\n    return numCalls_\n  }\n\n  canvas2.setRestoreTimeout = function (timeout: number) {\n    restoreTimeout_ = timeout\n  }\n\n  // function isWebGLObject(obj: any): obj is WebGLObject {\n  // \t//return false\n  // \treturn (\n  // \t\tobj instanceof WebGLBuffer ||\n  // \t\tobj instanceof WebGLFramebuffer ||\n  // \t\tobj instanceof WebGLProgram ||\n  // \t\tobj instanceof WebGLRenderbuffer ||\n  // \t\tobj instanceof WebGLShader ||\n  // \t\tobj instanceof WebGLTexture\n  // \t)\n  // }\n\n  // function checkResources(args: any[]) {\n  // \tfor (let i = 0; i < args.length; ++i) {\n  // \t\tconst arg = args[i]\n  // \t\tif (isWebGLObject(arg)) {\n  // \t\t\treturn (arg as any).__webglDebugContextLostId__ == contextId_\n  // \t\t}\n  // \t}\n  // \treturn true\n  // }\n\n  function clearErrors() {\n    const k = Object.keys(glErrorShadow_) as any as number[]\n    for (let i = 0; i < k.length; ++i) {\n      delete glErrorShadow_[k[i]]\n    }\n  }\n\n  function loseContextIfTime() {\n    ++numCalls_\n    if (!contextLost_) {\n      if (numCallsToLoseContext_ == numCalls_) {\n        canvas2.loseContext()\n      }\n    }\n  }\n\n  // Makes a function that simulates WebGL when out of context.\n  function makeLostContextFunctionWrapper(\n    ctx: WebGLRenderingContextStrict,\n    functionName: string,\n  ) {\n    const f = (ctx as any)[functionName]\n    return function () {\n      // log('calling:' + functionName)\n      // Only call the functions if the context is not lost.\n      loseContextIfTime()\n      if (!contextLost_) {\n        //if (!checkResources(arguments)) {\n        //  glErrorShadow_[wrappedContext_.INVALID_OPERATION] = true\n        //  return\n        //}\n        const result = f.apply(ctx, arguments)\n        return result\n      }\n    }\n  }\n\n  function freeResources() {\n    for (let ii = 0; ii < resourceDb_.length; ++ii) {\n      const resource = resourceDb_[ii]\n      if (resource instanceof WebGLBuffer) {\n        unwrappedContext_.deleteBuffer(resource)\n      } else if (resource instanceof WebGLFramebuffer) {\n        unwrappedContext_.deleteFramebuffer(resource)\n      } else if (resource instanceof WebGLProgram) {\n        unwrappedContext_.deleteProgram(resource)\n      } else if (resource instanceof WebGLRenderbuffer) {\n        unwrappedContext_.deleteRenderbuffer(resource)\n      } else if (resource instanceof WebGLShader) {\n        unwrappedContext_.deleteShader(resource)\n      } else if (resource instanceof WebGLTexture) {\n        unwrappedContext_.deleteTexture(resource)\n      } else if (isWebGL2RenderingContext(unwrappedContext_)) {\n        if (resource instanceof WebGLQuery) {\n          unwrappedContext_.deleteQuery(resource)\n        } else if (resource instanceof WebGLSampler) {\n          unwrappedContext_.deleteSampler(resource)\n        } else if (resource instanceof WebGLSync) {\n          unwrappedContext_.deleteSync(resource)\n        } else if (resource instanceof WebGLTransformFeedback) {\n          unwrappedContext_.deleteTransformFeedback(resource)\n        } else if (resource instanceof WebGLVertexArrayObject) {\n          unwrappedContext_.deleteVertexArray(resource)\n        }\n      }\n    }\n  }\n  interface CustomWebGLContextEvent {\n    statusMessage: string\n    preventDefault: () => void\n  }\n  type WebGLContextEventListener = (e: CustomWebGLContextEvent) => void\n  function makeWebGLContextEvent(\n    statusMessage: string,\n  ): CustomWebGLContextEvent {\n    return {\n      statusMessage: statusMessage,\n      preventDefault: function () {\n        canRestore_ = true\n      },\n    }\n  }\n\n  return canvas2\n\n  function makeLostContextSimulatingContext(ctx: WebGLRenderingContextStrict) {\n    // copy all functions and properties to wrapper\n    for (const propertyName in ctx) {\n      if (typeof (ctx as any)[propertyName] == \"function\") {\n        wrappedContext_[propertyName] = makeLostContextFunctionWrapper(\n          ctx,\n          propertyName,\n        )\n      } else {\n        makePropertyWrapper(wrappedContext_, ctx, propertyName)\n      }\n    }\n\n    // Wrap a few functions specially.\n    wrappedContext_.getError = function () {\n      loseContextIfTime()\n      if (!contextLost_) {\n        let err\n        while ((err = unwrappedContext_.getError())) {\n          glErrorShadow_[err] = true\n        }\n      }\n      for (const err in glErrorShadow_) {\n        if (glErrorShadow_[err]) {\n          delete glErrorShadow_[err]\n          return err\n        }\n      }\n      return wrappedContext_.NO_ERROR\n    }\n\n    const creationFunctions = [\n      \"createBuffer\",\n      \"createFramebuffer\",\n      \"createProgram\",\n      \"createRenderbuffer\",\n      \"createShader\",\n      \"createTexture\",\n    ]\n    if (isWebGL2RenderingContext(ctx)) {\n      creationFunctions.push(\n        \"createQuery\",\n        \"createSampler\",\n        \"fenceSync\",\n        \"createTransformFeedback\",\n        \"createVertexArray\",\n      )\n    }\n    for (let i = 0; i < creationFunctions.length; ++i) {\n      const functionName = creationFunctions[i]\n      wrappedContext_[functionName] = (function (f) {\n        return function () {\n          loseContextIfTime()\n          if (contextLost_) {\n            return null\n          }\n          const obj = f.apply(ctx, arguments)\n          obj.__webglDebugContextLostId__ = contextId_\n          resourceDb_.push(obj)\n          return obj\n        }\n      })((ctx as any)[functionName])\n    }\n\n    const functionsThatShouldReturnNull = [\n      \"getActiveAttrib\",\n      \"getActiveUniform\",\n      \"getBufferParameter\",\n      \"getContextAttributes\",\n      \"getAttachedShaders\",\n      \"getFramebufferAttachmentParameter\",\n      \"getParameter\",\n      \"getProgramParameter\",\n      \"getProgramInfoLog\",\n      \"getRenderbufferParameter\",\n      \"getShaderParameter\",\n      \"getShaderInfoLog\",\n      \"getShaderSource\",\n      \"getTexParameter\",\n      \"getUniform\",\n      \"getUniformLocation\",\n      \"getVertexAttrib\",\n    ]\n    if (isWebGL2RenderingContext(ctx)) {\n      functionsThatShouldReturnNull.push(\n        \"getInternalformatParameter\",\n        \"getQuery\",\n        \"getQueryParameter\",\n        \"getSamplerParameter\",\n        \"getSyncParameter\",\n        \"getTransformFeedbackVarying\",\n        \"getIndexedParameter\",\n        \"getUniformIndices\",\n        \"getActiveUniforms\",\n        \"getActiveUniformBlockParameter\",\n        \"getActiveUniformBlockName\",\n      )\n    }\n    for (let ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {\n      const functionName = functionsThatShouldReturnNull[ii]\n      wrappedContext_[functionName] = (function (f) {\n        return function () {\n          loseContextIfTime()\n          if (contextLost_) {\n            return null\n          }\n          return f.apply(ctx, arguments)\n        }\n      })(wrappedContext_[functionName])\n    }\n\n    const isFunctions = [\n      \"isBuffer\",\n      \"isEnabled\",\n      \"isFramebuffer\",\n      \"isProgram\",\n      \"isRenderbuffer\",\n      \"isShader\",\n      \"isTexture\",\n    ]\n    if (isWebGL2RenderingContext(ctx)) {\n      isFunctions.push(\n        \"isQuery\",\n        \"isSampler\",\n        \"isSync\",\n        \"isTransformFeedback\",\n        \"isVertexArray\",\n      )\n    }\n    for (let ii = 0; ii < isFunctions.length; ++ii) {\n      const functionName = isFunctions[ii]\n      wrappedContext_[functionName] = (function (f) {\n        return function () {\n          loseContextIfTime()\n          if (contextLost_) {\n            return false\n          }\n          return f.apply(ctx, arguments)\n        }\n      })(wrappedContext_[functionName])\n    }\n\n    wrappedContext_.checkFramebufferStatus = (function (f) {\n      return function () {\n        loseContextIfTime()\n        if (contextLost_) {\n          return wrappedContext_.FRAMEBUFFER_UNSUPPORTED\n        }\n        return f.apply(ctx, arguments)\n      }\n    })(wrappedContext_.checkFramebufferStatus)\n\n    wrappedContext_.getAttribLocation = (function (f) {\n      return function () {\n        loseContextIfTime()\n        if (contextLost_) {\n          return -1\n        }\n        return f.apply(ctx, arguments)\n      }\n    })(wrappedContext_.getAttribLocation)\n\n    wrappedContext_.getVertexAttribOffset = (function (f) {\n      return function () {\n        loseContextIfTime()\n        if (contextLost_) {\n          return 0\n        }\n        return f.apply(ctx, arguments)\n      }\n    })(wrappedContext_.getVertexAttribOffset)\n\n    wrappedContext_.isContextLost = function () {\n      return contextLost_\n    }\n\n    if (isWebGL2RenderingContext(ctx)) {\n      wrappedContext_.getFragDataLocation = (function (f) {\n        return function () {\n          loseContextIfTime()\n          if (contextLost_) {\n            return -1\n          }\n          return f.apply(ctx, arguments)\n        }\n      })(wrappedContext_.getFragDataLocation)\n\n      wrappedContext_.clientWaitSync = (function (f) {\n        return function () {\n          loseContextIfTime()\n          if (contextLost_) {\n            return wrappedContext_.WAIT_FAILED\n          }\n          return f.apply(ctx, arguments)\n        }\n      })(wrappedContext_.clientWaitSync)\n\n      wrappedContext_.getUniformBlockIndex = (function (f) {\n        return function () {\n          loseContextIfTime()\n          if (contextLost_) {\n            return wrappedContext_.INVALID_INDEX\n          }\n          return f.apply(ctx, arguments)\n        }\n      })(wrappedContext_.getUniformBlockIndex)\n    }\n\n    return wrappedContext_\n  }\n}\n","/// <reference types=\"webgl-strict-types\" />\nimport * as chroma from \"chroma.ts\"\nimport { addOwnProperties, assert, DEG, int, M4, P3ZX, V, V3 } from \"ts3dutils\"\n\nimport posCoordVS from \"../src/shaders/posCoordVS.glslx\"\nimport sdfRenderFS from \"../src/shaders/sdfRenderFS.glslx\"\nimport { makeDebugContext, Mesh, Shader, Texture } from \"./index\"\nimport { glEnumToString } from \"./KhronosGroupWebGLDebug\"\n\nimport GL = WebGLRenderingContextStrict\nexport type GL_COLOR = [number, number, number, number]\n/**\n * There's only one constant, use it for default values. Use chroma.ts or\n * similar for actual colors.\n */\nexport const GL_COLOR_BLACK: GL_COLOR = [0, 0, 0, 1]\n\nexport function currentGL(): TSGLContext {\n  return TSGLContextBase.gl\n}\n\nexport function isNumber(obj: any) {\n  const str = Object.prototype.toString.call(obj)\n  return str == \"[object Number]\" || str == \"[object Boolean]\"\n}\nexport type TSGLContext = TSGLContextBase & WebGLRenderingContextStrict\nexport type TSGL2Context = TSGLContextBase & WebGL2RenderingContextStrict\nexport interface TSGLContextBase extends WebGLRenderingContextStrict.Base {}\nexport class TSGLContextBase {\n  modelViewMatrix: M4 = M4.identity()\n  projectionMatrix: M4 = M4.identity()\n  static readonly MODELVIEW: { __MATRIX_MODE_CONSTANT: any } = 0 as any\n  static readonly PROJECTION: { __MATRIX_MODE_CONSTANT: any } = 1 as any\n  MODELVIEW: typeof TSGLContextBase.MODELVIEW\n  PROJECTION: typeof TSGLContextBase.PROJECTION\n\n  readonly version: 1 | 2\n\n  static HALF_FLOAT_OES: int = 0x8d61\n  HALF_FLOAT_OES: int\n\n  private tempMatrix = new M4()\n  private resultMatrix = new M4()\n  private modelViewStack: M4[] = []\n  private projectionStack: M4[] = []\n  private currentMatrixName: \"modelViewMatrix\" | \"projectionMatrix\"\n  private stack: M4[]\n\n  meshes: { [name: string]: Mesh }\n  shaders: { [name: string]: Shader }\n  public drawCallCount: int = 0\n  public projectionMatrixVersion: int = 0\n  public modelViewMatrixVersion: int = 0\n  textCtx!: CanvasRenderingContext2D\n  TEXT_TEXTURE_HEIGHT: string\n  TEXT_TEXTURE_FONT: string\n  textMetrics: FontJsonMetrics\n  textAtlas: Texture\n  textRenderShader: Shader\n\n  protected constructor(\n    gl: TSGLContext,\n    private immediate = {\n      mesh: new Mesh()\n        .addVertexBuffer(\"coords\", \"ts_TexCoord\")\n        .addVertexBuffer(\"colors\", \"ts_Color\"),\n      mode: -1 as GL.DrawMode | -1,\n      coord: [0, 0] as [number, number],\n      color: [1, 1, 1, 1] as GL_COLOR,\n      pointSize: 1,\n      shader: Shader.create(\n        `\n        attribute vec4 ts_Color;\n        attribute vec4 ts_Vertex;\n        uniform mat4 ts_ModelViewProjectionMatrix;\n        attribute vec2 ts_TexCoord;\n        uniform float pointSize;\n        varying vec4 color;\n        varying vec2 coord;\n        void main() {\n            color = ts_Color;\n            coord = ts_TexCoord;\n            gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n            gl_PointSize = pointSize;\n        }\n        `,\n        `\n        precision highp float;\n        uniform sampler2D texture;\n        uniform float pointSize;\n        // uniform bool useTexture;\n        varying vec4 color;\n        varying vec2 coord;\n        void main() {\n            gl_FragColor = color;\n            // if (useTexture) gl_FragColor *= texture2D(texture, coord.xy);\n        }\n        `,\n        gl,\n      ),\n    },\n  ) {\n    this.matrixMode(TSGLContextBase.MODELVIEW)\n  }\n\n  /// Implement the OpenGL modelview and projection matrix stacks, along with some other useful GLU matrix functions.\n  matrixMode(mode: { __MATRIX_MODE_CONSTANT: any }): void {\n    switch (mode) {\n      case this.MODELVIEW:\n        this.currentMatrixName = \"modelViewMatrix\"\n        this.stack = this.modelViewStack\n        break\n      case this.PROJECTION:\n        this.currentMatrixName = \"projectionMatrix\"\n        this.stack = this.projectionStack\n        break\n      default:\n        throw new Error(\"invalid matrix mode \" + mode)\n    }\n  }\n\n  loadIdentity(): void {\n    M4.identity(this[this.currentMatrixName])\n    this.currentMatrixName == \"projectionMatrix\"\n      ? this.projectionMatrixVersion++\n      : this.modelViewMatrixVersion++\n  }\n\n  loadMatrix(m4: M4) {\n    M4.copy(m4, this[this.currentMatrixName])\n    this.currentMatrixName == \"projectionMatrix\"\n      ? this.projectionMatrixVersion++\n      : this.modelViewMatrixVersion++\n  }\n\n  multMatrix(m4: M4) {\n    M4.multiply(this[this.currentMatrixName], m4, this.resultMatrix)\n    const temp = this.resultMatrix\n    this.resultMatrix = this[this.currentMatrixName]\n    this[this.currentMatrixName] = temp\n    this.currentMatrixName == \"projectionMatrix\"\n      ? this.projectionMatrixVersion++\n      : this.modelViewMatrixVersion++\n  }\n\n  mirror(plane: { normal1: V3; w: number }) {\n    this.multMatrix(M4.mirror(plane))\n  }\n\n  perspective(fovDegrees: number, aspect: number, near: number, far: number) {\n    this.multMatrix(\n      M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, this.tempMatrix),\n    )\n  }\n\n  frustum(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number,\n    near: number,\n    far: number,\n  ) {\n    this.multMatrix(\n      M4.frustum(left, right, bottom, top, near, far, this.tempMatrix),\n    )\n  }\n\n  ortho(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number,\n    near: number,\n    far: number,\n  ) {\n    this.multMatrix(\n      M4.ortho(left, right, bottom, top, near, far, this.tempMatrix),\n    )\n  }\n\n  scale(x: number, y: number, z?: number): void\n  scale(scale: number): void\n  scale(v: V3): void\n  scale(...args: any[]) {\n    this.multMatrix((M4.scale as any)(...args, this.tempMatrix))\n  }\n\n  mirroredX() {\n    this.multMatrix(M4.mirror(P3ZX))\n  }\n\n  translate(x: number, y?: number, z?: number): void\n  translate(v: V3): void\n  translate(x: any, y?: any, z?: any) {\n    if (undefined !== y) {\n      this.multMatrix(M4.translate(x, y, z, this.tempMatrix))\n    } else {\n      this.multMatrix(M4.translate(x, this.tempMatrix))\n    }\n  }\n\n  rotate(angleDegrees: number, x: number, y: number, z: number) {\n    this.multMatrix(M4.rotate(angleDegrees * DEG, { x, y, z }, this.tempMatrix))\n  }\n\n  lookAt(eye: V3, center: V3, up: V3) {\n    this.multMatrix(M4.lookAt(eye, center, up, this.tempMatrix))\n  }\n\n  pushMatrix() {\n    this.stack.push(M4.copy(this[this.currentMatrixName]))\n  }\n\n  popMatrix() {\n    const pop = this.stack.pop()\n    assert(undefined !== pop)\n    this[this.currentMatrixName] = pop as M4\n    this.currentMatrixName == \"projectionMatrix\"\n      ? this.projectionMatrixVersion++\n      : this.modelViewMatrixVersion++\n  }\n\n  /**\n   * World coordinates (WC) to screen/window coordinates matrix\n   */\n  wcToWindowMatrix() {\n    const viewport = this.getParameter(this.VIEWPORT)\n    const [x, y, w, h] = viewport\n    // prettier-ignore\n    const viewportToScreenMatrix = new M4([\n      w / 2, 0, 0, x + w / 2,\n      h / 2, 0, 0, y + h / 2,\n      0, 0, 1, 0,\n      0, 0, 0, 1,\n    ])\n    return M4.product(\n      viewportToScreenMatrix,\n      this.projectionMatrix,\n      this.modelViewMatrix,\n    )\n  }\n\n  /////////// IMMEDIATE MODE\n  // ### Immediate mode\n  //\n  // Provide an implementation of OpenGL's deprecated immediate mode. This is\n  // deprecated for a reason: constantly re-specifying the geometry is a bad\n  // idea for performance. You should use a `GL.Mesh` instead, which specifies\n  // the geometry once and caches it on the graphics card. Still, nothing\n  // beats a quick `viewerGL.begin(WGL.POINTS); viewerGL.vertex(1, 2, 3); viewerGL.end();` for\n  // debugging. This intentionally doesn't implement fixed-function lighting\n  // because it's only meant for quick debugging tasks.\n\n  pointSize(pointSize: number): void {\n    this.immediate.shader.uniforms({ pointSize: pointSize })\n  }\n\n  begin(mode: GL.DrawMode) {\n    if (this.immediate.mode != -1)\n      throw new Error(\"mismatched viewerGL.begin() and viewerGL.end() calls\")\n    this.immediate.mode = mode\n    this.immediate.mesh.colors = []\n    this.immediate.mesh.coords = []\n    this.immediate.mesh.vertices = []\n  }\n\n  color(cssColor: string): void\n  color(r: number, g: number, b: number, a?: number): void\n  color(hexInt: int): void\n  color(glColor: GL_COLOR): void\n  color(...args: any[]) {\n    this.immediate.color =\n      1 == args.length && Array.isArray(args[0])\n        ? (args[0] as GL_COLOR)\n        : 1 == args.length && \"number\" == typeof args[0]\n        ? hexIntToGLColor(args[0])\n        : 1 == args.length && \"string\" == typeof args[0]\n        ? chroma.color(args[0]).gl()\n        : [args[0], args[1], args[2], args[3] || 1]\n  }\n\n  texCoord(s: number, t: number): void\n  texCoord(coords: [number, number]): void\n  texCoord(coords: { x: number; y: number }): void\n  texCoord(...args: any[]) {\n    this.immediate.coord = V.apply(undefined, args).toArray(2)\n  }\n\n  vertex(v: V3): void\n  vertex(x: number, y: number, z: number): void\n  vertex(...args: any[]) {\n    this.immediate.mesh.colors.push(this.immediate.color)\n    this.immediate.mesh.coords.push(this.immediate.coord)\n    this.immediate.mesh.vertices.push(V.apply(undefined, args))\n  }\n\n  end(): void {\n    if (this.immediate.mode == -1)\n      throw new Error(\"mismatched viewerGL.begin() and viewerGL.end() calls\")\n    this.immediate.mesh.compile()\n    this.immediate.shader\n      .uniforms({\n        useTexture: !!TSGLContextBase.gl.getParameter(this.TEXTURE_BINDING_2D),\n      })\n      .drawBuffers(\n        this.immediate.mesh.vertexBuffers,\n        undefined,\n        this.immediate.mode,\n      )\n    this.immediate.mode = -1\n  }\n\n  ////////// MISCELLANEOUS METHODS\n  static gl: TSGLContext\n\n  makeCurrent() {\n    TSGLContextBase.gl = this as any\n  }\n\n  /**\n   * Starts an animation loop.\n   */\n  animate(\n    callback: (\n      this: TSGLContextBase,\n      domHighResTimeStamp: number,\n      timeSinceLast: number,\n    ) => void,\n  ): () => void {\n    const requestAnimationFrame: typeof window.requestAnimationFrame =\n      window.requestAnimationFrame ||\n      (window as any).mozRequestAnimationFrame ||\n      window.webkitRequestAnimationFrame ||\n      function (callback: FrameRequestCallback) {\n        setTimeout(() => callback(performance.now()), 1000 / 60)\n      }\n    let time = performance.now(),\n      keepUpdating = true\n    const update = (now: number) => {\n      if (keepUpdating) {\n        callback.call(this, now, now - time)\n        time = now\n        requestAnimationFrame(update)\n      }\n    }\n    requestAnimationFrame(update)\n    return () => {\n      keepUpdating = false\n    }\n  }\n\n  /**\n   * Provide an easy way to get a fullscreen app running, including an\n   * automatic 3D perspective projection matrix by default. This should be\n   * called once.\n   *\n   * Just fullscreen, no automatic camera:\n   *\n   *     viewerGL.fullscreen({ camera: false })\n   *\n   * Adjusting field of view, near plane distance, and far plane distance:\n   *\n   *     viewerGL.fullscreen({ fov: 45, near: 0.1, far: 1000 })\n   *\n   * Adding padding from the edge of the window:\n   *\n   *     viewerGL.fullscreen({ paddingLeft: 250, paddingBottom: 60 })\n   */\n  fullscreen(\n    options: {\n      paddingTop?: number\n      paddingLeft?: number\n      paddingRight?: number\n      paddingBottom?: number\n      camera?: boolean\n      fov?: number\n      near?: number\n      far?: number\n    } = {},\n  ) {\n    const top = options.paddingTop || 0\n    const left = options.paddingLeft || 0\n    const right = options.paddingRight || 0\n    const bottom = options.paddingBottom || 0\n    if (!document.body) {\n      throw new Error(\n        \"document.body doesn't exist yet (call viewerGL.fullscreen() from \" +\n          \"window.onload() or from inside the <body> tag)\",\n      )\n    }\n    //document.body.appendChild(this.canvas)\n    //document.body.style.overflow = \"hidden\"\n    Object.assign(this.canvas.style, {\n      position: \"absolute\",\n      left: left + \"px\",\n      top: top + \"px\",\n      width: window.innerWidth - left - right + \"px\",\n      height: window.innerHeight - top - bottom + \"px\",\n    })\n    this.addResizeListener()\n\n    return this\n  }\n\n  addResizeListener(\n    options: {\n      camera?: boolean\n      fov?: number\n      near?: number\n      far?: number\n    } = {},\n  ): TSGLContext {\n    const gl = this\n\n    function windowOnResize() {\n      const bb = gl.canvas.getBoundingClientRect()\n      gl.canvas.width = bb.width * window.devicePixelRatio\n      gl.canvas.height = bb.height * window.devicePixelRatio\n      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n      if (options.camera) {\n        gl.matrixMode(TSGLContextBase.PROJECTION)\n        gl.loadIdentity()\n        gl.perspective(\n          options.fov || 45,\n          gl.canvas.width / gl.canvas.height,\n          options.near || 0.1,\n          options.far || 1000,\n        )\n        gl.matrixMode(TSGLContextBase.MODELVIEW)\n      }\n    }\n\n    window.addEventListener(\"resize\", windowOnResize)\n    windowOnResize()\n    return this as unknown as TSGLContext\n  }\n\n  getMouseLine(e: MouseEvent): { anchor: V3; dir: V3 }\n  getMouseLine(canvasPosX: number, canvasPosY: number): { anchor: V3; dir: V3 }\n  getMouseLine(\n    canvasPosXOrE: number | MouseEvent,\n    canvasPosY?: number,\n  ): { anchor: V3; dir: V3 } {\n    if (canvasPosXOrE instanceof MouseEvent) {\n      return this.getMouseLine(canvasPosXOrE.offsetX, canvasPosXOrE.offsetY)\n    }\n    const ndc1 = V(\n      (canvasPosXOrE * 2) / this.canvas.offsetWidth - 1,\n      (-canvasPosY! * 2) / this.canvas.offsetHeight + 1,\n      0,\n    )\n    const ndc2 = V(\n      (canvasPosXOrE * 2) / this.canvas.offsetWidth - 1,\n      (-canvasPosY! * 2) / this.canvas.offsetHeight + 1,\n      1,\n    )\n    const inverseProjectionMatrix = this.projectionMatrix.inversed()\n    const anchor = inverseProjectionMatrix.transformPoint(ndc1)\n    const dir = inverseProjectionMatrix.transformPoint(ndc2).minus(anchor)\n    return { anchor, dir }\n  }\n\n  viewportFill() {\n    this.viewport(0, 0, this.canvas.width, this.canvas.height)\n  }\n\n  async setupTextRendering(pngURL: string, jsonURL: string) {\n    this.textRenderShader = Shader.create(posCoordVS, sdfRenderFS)\n    ;[this.textAtlas, this.textMetrics] = await Promise.all([\n      Texture.fromURL(pngURL, {\n        format: this.LUMINANCE,\n        internalFormat: this.LUMINANCE,\n        type: this.UNSIGNED_BYTE,\n      }),\n      fetch(jsonURL).then((r) => r.json()),\n    ])\n    // const cs = this.textMetrics.chars\n    // const maxY = Object.keys(cs).reduce((a, b) => Math.max(a, cs[b][3]), 0)\n    // const minY = Object.keys(cs).reduce((a, b) => Math.min(a, cs[b][3] - cs[b][1]), 0)\n    // console.log(maxY, minY)\n  }\n\n  cachedSDFMeshes: {\n    [str: string]: Mesh & {\n      TRIANGLES: int[]\n      coords: number[]\n      width: number\n      lineCount: int\n    }\n  } = {}\n\n  getSDFMeshForString(str: string) {\n    assert(this.textMetrics)\n    return (\n      this.cachedSDFMeshes[str] ||\n      (this.cachedSDFMeshes[str] = createTextMesh(\n        this.textMetrics,\n        this.textAtlas,\n        str,\n      ))\n    )\n  }\n\n  renderText(\n    string: string,\n    color: GL_COLOR,\n    size = 1,\n    xAlign: \"left\" | \"center\" | \"right\" = \"left\",\n    baseline: \"top\" | \"middle\" | \"alphabetic\" | \"bottom\" = \"bottom\",\n    gamma = 0.05,\n    lineHeight = 1.2,\n  ) {\n    const strMesh = this.getSDFMeshForString(string)\n    this.pushMatrix()\n    this.scale(size)\n    const xTranslate = { left: 0, center: -0.5, right: -1 }\n    const yTranslate = {\n      top: -this.textMetrics.ascender / this.textMetrics.size,\n      middle:\n        (-this.textMetrics.ascender - this.textMetrics.descender) /\n        2 /\n        this.textMetrics.size,\n      alphabetic: 0,\n      bottom: -this.textMetrics.descender / this.textMetrics.size,\n    }\n    // console.log('yTranslate[baseline]', yTranslate[baseline])\n    this.translate(xTranslate[xAlign] * strMesh.width, yTranslate[baseline], 0)\n    this.multMatrix(M4.forSys(V3.X, V3.Y, new V3(0, -lineHeight, 0)))\n    this.textAtlas.bind(0)\n    this.textRenderShader\n      .uniforms({\n        texture: 0,\n        u_color: color,\n        u_debug: 0,\n        u_gamma: gamma,\n        u_buffer: 192 / 256,\n      })\n      .draw(strMesh)\n    this.popMatrix()\n\n    // gl.uniform1f(shader.u_debug, debug ? 1 : 0)\n\n    // gl.uniform4fv(shader.u_color, [1, 1, 1, 1])\n    // gl.uniform1f(shader.u_buffer, buffer)\n    // gl.drawArrays(gl.TRIANGLES, 0, vertexBuffer.numItems)\n\n    // gl.uniform4fv(shader.u_color, [0, 0, 0, 1])\n    // gl.uniform1f(shader.u_buffer, 192 / 256)\n    // gl.uniform1f(shader.u_gamma, (gamma * 1.4142) / scale)\n    // gl.drawArrays(gl.TRIANGLES, 0, vertexBuffer.numItems)\n  }\n\n  static create(\n    options: Partial<\n      GL.WebGLContextAttributes & {\n        canvas: HTMLCanvasElement\n        throwOnError: boolean\n      }\n    > = {},\n  ): TSGLContext {\n    const canvas = options.canvas || document.createElement(\"canvas\")\n    if (!options.canvas) {\n      canvas.width = 800\n      canvas.height = 600\n    }\n    if (!(\"alpha\" in options)) options.alpha = false\n    let newGL: any = undefined\n    try {\n      newGL = canvas.getContext(\"webgl2\", options)\n      newGL && (newGL.version = 2)\n      if (!newGL) {\n        newGL =\n          canvas.getContext(\"webgl\", options) ||\n          canvas.getContext(\"experimental-webgl\", options)\n        newGL && (newGL.version = 1)\n      }\n    } catch (e) {\n      console.log(e, \"Failed to get context\")\n    }\n    if (!newGL) throw new Error(\"WebGL not supported\")\n    if (options.throwOnError) {\n      newGL = makeDebugContext(newGL, (err, funcName) => {\n        throw new Error(glEnumToString(err) + \" was caused by \" + funcName)\n      })\n    }\n\n    TSGLContextBase.gl = newGL\n    addOwnProperties(newGL, TSGLContextBase.prototype)\n    addOwnProperties(newGL, new TSGLContextBase(newGL))\n    //addEventListeners(newGL)\n    return newGL\n  }\n\n  /**\n   * Sets the canvas render resolution (canvas.width and canvas.height) to\n   * match the display. I.e. it takes into account window.devicePixelRatio.\n   * @param maxPixelRatio A limit for the pixelRatio. Useful for very high DPI\n   *   devices such as mobile devices.\n   */\n  fixCanvasRes(maxPixelRatio = Infinity) {\n    this.canvas.width =\n      this.canvas.clientWidth * Math.min(window.devicePixelRatio, maxPixelRatio)\n    this.canvas.height =\n      this.canvas.clientHeight *\n      Math.min(window.devicePixelRatio, maxPixelRatio)\n    this.viewport(0, 0, this.canvas.width, this.canvas.height)\n  }\n\n  drawVector(\n    vector: V3,\n    anchor: V3,\n    color: GL_COLOR = GL_COLOR_BLACK,\n    size = 1,\n  ) {\n    if (vector.likeO()) return\n    this.pushMatrix()\n\n    const headLength = size * 4\n    if (headLength > vector.length()) return\n\n    const vT = vector.getPerpendicular().unit()\n    this.multMatrix(\n      M4.forSys(vector.unit(), vT, vector.cross(vT).unit(), anchor),\n    )\n    this.scale(vector.length() - headLength, size / 2, size / 2)\n\n    this.shaders.singleColor\n      .uniforms({\n        color: color,\n      })\n      .draw(this.meshes.vectorShaft)\n\n    this.scale(1 / (vector.length() - headLength), 1, 1)\n    this.translate(vector.length() - headLength, 0, 0)\n    this.scale(headLength / 2, 1, 1)\n\n    this.shaders.singleColor.draw(this.meshes.vectorHead)\n    this.popMatrix()\n  }\n}\nexport namespace TSGLContext {\n  /**\n   * `create()` creates a new WebGL context and augments it with more methods.\n   * The alpha channel is disabled by default because it usually causes\n   * unintended transparencies in the canvas.\n   */\n  export const create = TSGLContextBase.create\n}\n\n// enum WGL_ERROR {\n//   NO_ERROR = WGL.NO_ERROR,\n//   INVALID_ENUM = WGL.INVALID_ENUM,\n//   INVALID_VALUE = WGL.INVALID_VALUE,\n//   INVALID_OPERATION = WGL.INVALID_OPERATION,\n//   INVALID_FRAMEBUFFER_OPERATION = WGL.INVALID_FRAMEBUFFER_OPERATION,\n//   OUT_OF_MEMORY = WGL.OUT_OF_MEMORY,\n//   CONTEXT_LOST_WEBGL = WGL.CONTEXT_LOST_WEBGL,\n// }\n\nTSGLContextBase.prototype.MODELVIEW = TSGLContextBase.MODELVIEW\nTSGLContextBase.prototype.PROJECTION = TSGLContextBase.PROJECTION\nTSGLContextBase.prototype.HALF_FLOAT_OES = TSGLContextBase.HALF_FLOAT_OES\n\n/**\n *\n * Push two triangles:\n * ```\n c - d\n | \\ |\n a - b\n ```\n */\nexport function pushQuad(\n  triangles: int[],\n  flipped: boolean,\n  a: int,\n  b: int,\n  c: int,\n  d: int,\n) {\n  // prettier-ignore\n  if (flipped) {\n    triangles.push(\n      a, c, b,\n      b, c, d)\n  } else {\n    triangles.push(\n      a, b, c,\n      b, d, c)\n  }\n}\n\nfunction hexIntToGLColor(color: int): GL_COLOR {\n  return [\n    (color >> 16) / 255.0,\n    ((color >> 8) & 0xff) / 255.0,\n    (color & 0xff) / 255.0,\n    1.0,\n  ]\n}\n\nexport interface FontJsonMetrics {\n  family: string\n  style: string\n\n  // buffer refers to the width of the margin around glyph bounding boxes with distance values\n  buffer: int\n  size: number\n\n  // [width, height, horiBearingX, horiBearingY, horiAdvance, posX, posY]\n  // see https://www.freetype.org/freetype2/docs/tutorial/step2.html\n  chars: {\n    [char: string]: [number, number, number, number, number, number, number]\n  }\n\n  descender: number\n  ascender: number\n}\n// function measureText(metrics: FontJsonMetrics, text: string, size: number) {\n//   const dimensions = {\n//     advance: 0,\n//   }\n\n//   const scale = size / metrics.size\n//   for (let i = 0; i < text.length; i++) {\n//     const horiAdvance = metrics.chars[text[i]][4]\n//     dimensions.advance += horiAdvance * scale\n//   }\n\n//   return dimensions\n// }\n\n// gl.getExtension('OES_standard_derivatives')\n\n// gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE)\n\n// gl.enable(gl.BLEND)\n\n// const texture = gl.createTexture()\n\n// const vertexBuffer = gl.createBuffer()\n// const textureBuffer = gl.createBuffer()\n\nfunction createTextMesh(\n  fontMetrics: FontJsonMetrics,\n  fontTextureAtlas: Texture,\n  str: string,\n  lineHeight = 1,\n) {\n  const mesh = new Mesh()\n    .addIndexBuffer(\"TRIANGLES\")\n    .addVertexBuffer(\"coords\", \"ts_TexCoord\")\n\n  let cursorX = 0\n  let cursorY = 0\n\n  function drawGlyph(chr: string) {\n    const metric = fontMetrics.chars[chr]\n    if (!metric) return\n\n    const [width, height, horiBearingX, horiBearingY, horiAdvance, posX, posY] =\n      metric\n    const { size, buffer } = fontMetrics\n    const quadStartIndex = mesh.vertices.length\n\n    // buffer = margin on texture\n    if (width > 0 && height > 0) {\n      // Add a quad (= two triangles) per glyph.\n      const left = (cursorX + horiBearingX - buffer) / size\n      const right = (cursorX + horiBearingX + width + buffer) / size\n      const bottom = (horiBearingY - height - buffer) / size\n      const top = (horiBearingY + buffer) / size\n      mesh.vertices.push(\n        new V3(left, bottom, cursorY / size),\n        new V3(right, bottom, cursorY / size),\n        new V3(left, top, cursorY / size),\n        new V3(right, top, cursorY / size),\n      )\n\n      const coordsLeft = posX / fontTextureAtlas.width\n      const coordsRight = (posX + width + 2 * buffer) / fontTextureAtlas.width\n      const coordsBottom =\n        (posY + height + 2 * buffer) / fontTextureAtlas.height\n      const coordsTop = posY / fontTextureAtlas.height\n      mesh.coords.push(\n        [coordsLeft, coordsBottom],\n        [coordsRight, coordsBottom],\n        [coordsLeft, coordsTop],\n        [coordsRight, coordsTop],\n      )\n      // mesh.coords.push([0, 0], [0, 1], [1, 0], [1, 1])\n\n      pushQuad(\n        mesh.TRIANGLES,\n        false,\n        quadStartIndex,\n        quadStartIndex + 1,\n        quadStartIndex + 2,\n        quadStartIndex + 3,\n      )\n    }\n\n    // pen.x += Math.ceil(horiAdvance * scale);\n    cursorX += horiAdvance\n  }\n\n  for (let i = 0; i < str.length; i++) {\n    const chr = str[i]\n    if (\"\\n\" == chr) {\n      cursorX = 0\n      cursorY += lineHeight * fontMetrics.size\n    } else {\n      drawGlyph(chr)\n    }\n  }\n\n  return Object.assign(mesh.compile(), {\n    width: cursorX / fontMetrics.size,\n    lineCount: cursorY + 1,\n  })\n}\n","\r\nattribute vec2 ts_TexCoord;\r\nattribute vec4 ts_Vertex;\r\nuniform mat4 ts_ModelViewProjectionMatrix;\r\nvarying vec2 coord;\r\nvoid main() {\r\n    coord = ts_TexCoord.xy;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n}","// A fragment shader for rendering signed distance fields. Main use case: text.\r\n\r\nprecision mediump float;\r\n\r\n// the atlas texture\r\nuniform sampler2D u_texture;\r\n\r\n// the color the text should be rendered\r\nuniform vec4 u_color;\r\n\r\n// the zero distance value in the texture\r\nuniform float u_buffer;\r\n\r\n// control the bluriness of the output 0.05 is a good value\r\nuniform float u_gamma;\r\n\r\n// set to > 1.0 to just output the texture \r\nuniform float u_debug;\r\n\r\nvarying vec2 coord;\r\n\r\nvoid main() {\r\n    float dist = texture2D(u_texture, coord).r;\r\n    if (u_debug > 0.0) {\r\n        gl_FragColor = vec4(dist, dist, dist, 1);\r\n    } else {\r\n        float alpha = smoothstep(u_buffer - u_gamma, u_buffer + u_gamma, dist);\r\n        gl_FragColor = vec4(u_color.rgb, alpha * u_color.a);\r\n        if (gl_FragColor.a == 0.0) {\r\n            discard;\r\n        }\r\n    }\r\n}"],"names":["padLeft","module","exports","string","start","delim","lines","split","totalDigits","String","length","map","line","i","c","digits","join","str","atob","abs","atan2","cos","floor","log","min","max","round","sign","sin","sqrt","cbrt","PI","hypot","Math","lerp","a","b","f","clamp","x","newtonIterate1d","xStart","max_steps","eps","fx","dfdx","console","DEG2RAD","RAD2DEG","color","args","Color","guess","slice","Array","isArray","constructor","r","g","mix","col2","m","this","rgb","doRound","clamp_","t","rgba","hex","mode","r255","g255","b255","a1","rgbString","toString","padStart","alphaString","rgb2hex","hsl","hue","min1","max1","rgb2hexhue","l1","s1","rgb2hsl","hsv","min255","max255","rgb2hsv","hcg","c1","rgb2hcg","css","rgb2css","h","s","l","alpha","rnd","hsl2css","Error","name","closest","thisNum","num","Object","keys","w3cx11","find","thisLStar","thisAStar","thisBStar","lab","lStar","aStar","bStar","arr","indexOfMax","cmyk","k","rgb2cmyk","gl","luminance","lum1","Y","rgb2xyz","undefined","inverseLerp","val","white","black","temperature","set","modeAndChannel","value","channel","src","indexOf","clipped","textColor","alpha1","darker","amount","LAB_Kn","brighter","saturate","lch","desaturate","premultiplied","hsi","r1","g1","b1","i1","beta","hRad","rgb2hsi","rgb2lab","rgbNum","rgb2num","b2","lab2lch","rgb2lch","xyz","equals","r2","g2","a2","hashCode","toSource","prototype","kelvin","brewer","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflower","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","purple2","purple3","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellow","yellowgreen","col1","c2","res","interpolators","cssString","css2rgb","num2rgb","scale","_at","getOwnPropertyNames","Scale","forEach","key","_init","blend_f","each","_","classes","_classes","domain","limits","_colors","_pos","p","_min","_max","d","lerpInv","_mode","_resetCache","out","outputFormat","_out","correctLightness","enableCorrectLightness","_correctLightness","colors","sign2","padding","paddingLeft","paddingRight","_paddingLeft","_paddingRight","numColors","format","result","_color","from","samples","cache","enableCache","_cache","Map","gamma","_gamma","colorsOrFunction","_getClass","findIndex","cls","bypassMap","_tCorrectedLightness","tHash","cacheResult","get","col","t0_1","L_ideal","steps","fA","fC","bisect","clear","scales","data","info","Infinity","sum","values","count","isNaN","push","add","analyze","sort","startsWith","min_log","LOG10E","max_log","pb","n","assignments","clusterSizes","repeat","nb_iters","centroids","fill","minDistIndex","newCentroids","j","some","nc","kClusters","tmpKMeansBreaks","kCluster","v","cool","hot","_input","JSON","stringify","channels","hex2rgb","match","parseInt","norm360","degrees","xyz1","xyz2","lrgb","hsl2rgb","hueDegrees","v1","hcxm2rgb","WS","FLOAT","CSS_RGB_REGEX","RegExp","CSS_RGB_WS_REGEX","CSS_RGB_PERCENT_REGEX","CSS_RGB_WS_PERCENT_REGEX","CSS_HSL_REGEX","CSS_HSL_WS_REGEX","hasOwnProperty","toLowerCase","CONVERSION","deg","rad","turn","angleUnit","rgbChannel2RgbLinear","x255","x1","rgbLinearChannel2Rgb","xLinear1","bottom","top","e","M","delta","hueTurnX6","m1","m255","cm255","xm255","cielab2rgb","LStar100","y","z","fInv","LAB_delta","LAB_3DeltaPow2","LAB_Xn","LAB_Yn","LAB_Zn","cielab2xyz","xyz2rgb","hDegrees","lch2lab","y1","k1","K","LAB_deltaPow3","xyz2cielab","r1Linear","g1Linear","b1Linear","X1","Y1","Z1","maxValue","maxValueIndex","color1","color2","lerpHue","hue1","hue2","charAt","gl10","number","sprintf","glConstants","shaderName","addLineNumbers","errLog","type","typeName","FRAGMENT_SHADER","longForm","shortForm","errorStrings","errors","errorString","lineNo","substr","trim","long","short","tokenize","tokens","token","b64","opt","last","len","total","NORMAL","content","isnum","isoperator","input","allBuiltins","builtins100","allLiterals","literals100","version","builtins300es","literals300es","builtinsDict","literalsDict","chunk","replace","BLOCK_COMMENT","block_comment","LINE_COMMENT","PREPROCESSOR","preprocessor","OPERATOR","operator","INTEGER","integer","HEX","decimal","TOKEN","readtoken","WHITESPACE","whitespace","normal","write","EOF","position","column","test","determine_operator","is_composite_operator","buf","idx","operators","contentstr","KEYWORD","BUILTIN","IDENT","v100","filter","concat","generator","ch","TypeError","re","not_string","not_bool","not_type","not_primitive","numeric_arg","json","not_json","text","modulo","placeholder","key_access","index_access","parse_tree","argv","arg","ph","pad","pad_character","pad_length","is_positive","cursor","tree_length","output","param_no","Function","fromCharCode","width","precision","parseFloat","toExponential","toFixed","Number","toPrecision","substring","call","valueOf","toUpperCase","pad_char","align","sprintf_format","fmt","sprintf_cache","_fmt","arg_names","exec","SyntaxError","field_list","replacement_field","field_match","sprintf_parse","arguments","vsprintf","apply","create","window","__awaiter","thisArg","_arguments","P","Promise","resolve","reject","fulfilled","step","next","rejected","done","then","WGL","WebGLRenderingContext","Buffer","[object Object]","target","buffer","spacing","hasBeenCompiled","assert","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","Float32Array","Uint16Array","Uint32Array","bindSize","UNSIGNED_SHORT","UNSIGNED_INT","usage","STATIC_DRAW","currentGL","DYNAMIC_DRAW","createBuffer","warn","V3","pack","bufferLength","destPtr","subArray","NLA_DEBUG","includes","bindBuffer","bufferData","tempM4_1","M4","tempM4_2","Mesh","Transformable","super","vertexBuffers","indexBuffers","addVertexBuffer","totalVolumeX2","totalCentroidWithZX2","O","totalAreaX2","triangles","TRIANGLES","vertices","ai","bi","ci","ab","minus","ac","cross","div","faceShadowCentroid","times","plus","volume","centroid","eq0","schur","area","attribute","arrayType","others","allMeshes","every","other","bufferName","mesh","addIndexBuffer","newIndexBufferData","reduce","ptr","startIndex","index","compile","minVertexBufferLength","stl","fileReader","FileReader","onerror","onload","_progressEvent","dataView","DataView","triangleCount","getUint32","normals","bufferPtr","HEADER_BYTE_SIZE","readV3","getFloat32","readAsArrayBuffer","ArrayBuffer","setUint32","normalOnPoints","setFloat32","byteLength","Blob","m4","transformedPoints","invTrans","as3x3","inversed","transposed","transformVector","unit","normal1","likeO","indexBufferName","canonEdges","Set","canonEdge","i0","LINES","tris","vs","si","toLength","AABB","addPoints","sphere","center","getAABB","getCenter","radius","options","detailX","detail","detailY","startX","startY","height","coords","Z","offset","xDetail","yDetail","zDetail","vi","ti","transformPoint","forSys","X","negated","translate","VERTEX_CORNERS","VERTEX_NORMALS","pushQuad","UNIT_CUBE_CORNERS","flatMap","fvi","faceVertexIndexes","latitudes","longitudes","baseVertices","arrayFromFunction","angle","vqs","q","rotation","anchor","dir1","subdivisions","u","tesselateRecursively","ia","ib","ic","abMid1","bcMid1","caMid1","iabm","ibcm","icam","aabb","matrix","product","size","NLA_PRECISION","cube","transform","computeNormalLines","close","assertVectors","vl","lineAxis","totalRads","vc","vTotal","rotMat","rads","rotateLine","transformedVectors","coordsUVQ","gradient","TAU","pF","pN","sMin","sMax","tMin","tMax","sRes","tRes","V","toArray","XYZ","DRAW_MODE_NAMES","POINTS","LINE_STRIP","LINE_LOOP","TRIANGLE_STRIP","TRIANGLE_FAN","DRAW_MODE_CHECKS","isFloatArray","obj","Float64Array","isIntArray","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Int32Array","isInteger","Shader","vertexSource","fragmentSource","projectionMatrixVersion","modelViewMatrixVersion","outputWarnings","matrixNames","compileSource","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","shaderInfoLog","getShaderInfoLog","formatCompilerError","assign","program","createProgram","attachShader","VERTEX_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributeLocations","uniformLocations","constantAttributes","activeMatrices","getUniformLocation","uniformInfos","ACTIVE_UNIFORMS","getActiveUniform","uniforms","useProgram","location","SAMPLER_2D","SAMPLER_CUBE","INT","FLOAT_VEC3","FLOAT_VEC4","FLOAT_MAT4","FLOAT_MAT3","uniform4fv","uniform1fv","uniform3fv","uniform2fv","uniformMatrix3fv","uniformMatrix4fv","uniform1f","uniform1i","FLOAT_MAT2","uniformMatrix2fv","attributes","getAttribLocation","disableVertexAttribArray","vertexAttrib1f","vertexAttrib4fv","modeName","drawBuffers","indexBuffer","assertf","assertInst","on","modelViewMatrixInverse","modelViewMatrix","projectionMatrixInverse","projectionMatrix","modelViewProjectionMatrix","uni","enableVertexAttribArray","vertexAttribPointer","numAttribs","ACTIVE_ATTRIBUTES","getVertexAttrib","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","getActiveAttrib","drawElements","BYTES_PER_ELEMENT","drawArrays","drawCallCount","Texture","RGBA","internalFormat","UNSIGNED_BYTE","magFilter","LINEAR","minFilter","getExtension","NEAREST","HALF_FLOAT_OES","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","wrap","wrapS","CLAMP_TO_EDGE","TEXTURE_WRAP_T","wrapT","texImage2D","framebuffer","prevFramebuffer","getParameter","FRAMEBUFFER_BINDING","bindFramebuffer","FRAMEBUFFER","readPixels","activeTexture","TEXTURE0","render","prevRenderbuffer","RENDERBUFFER_BINDING","depthRenderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","createFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","prevViewport","VIEWPORT","viewport","temp","imgElement","protocol","generateMipmap","url","checkerBoardCanvas","document","createElement","getContext","canvas","fillStyle","fillRect","fromImage","image","Image","swapWith","ev","glValidEnumContexts","enable","1","0","disable","3","4","2","getShaderPrecisionFormat","6","getTexParameter","texParameterf","copyTexImage2D","8","copyTexSubImage2D","getBufferParameter","pixelStorei","5","getFramebufferAttachmentParameter","getRenderbufferParameter","enumBitwiseOr","depthFunc","blendFunc","blendFuncSeparate","blendEquation","blendEquationSeparate","stencilFunc","stencilFuncSeparate","stencilMaskSeparate","stencilOp","stencilOpSeparate","cullFace","frontFace","drawArraysInstancedANGLE","drawElementsInstancedANGLE","blendEquationEXT","bufferSubData","copyBufferSubData","getBufferSubData","blitFramebuffer","10","9","framebufferTextureLayer","invalidateFramebuffer","invalidateSubFramebuffer","readBuffer","getInternalformatParameter","renderbufferStorageMultisample","texStorage2D","texStorage3D","7","texImage3D","11","texSubImage2D","texSubImage3D","12","copyTexSubImage3D","compressedTexImage2D","compressedTexImage3D","compressedTexSubImage2D","compressedTexSubImage3D","vertexAttribIPointer","drawArraysInstanced","drawElementsInstanced","drawRangeElements","clearBufferfv","clearBufferiv","clearBufferuiv","clearBufferfi","beginQuery","endQuery","getQuery","getQueryParameter","samplerParameteri","samplerParameterf","getSamplerParameter","fenceSync","clientWaitSync","waitSync","getSyncParameter","bindTransformFeedback","beginTransformFeedback","transformFeedbackVaryings","bindBufferBase","bindBufferRange","getIndexedParameter","getActiveUniforms","getActiveUniformBlockParameter","glEnums","enumStringToValue","init","WebGL2RenderingContext","propertyName","prop","glEnumToString","glFunctionArgToString","functionName","numArgs","argumentIndex","funcInfo","funcOverloadInfo","argInfo","enums","orEnums","orResult","enumValue","makePropertyWrapper","wrapper","original","__defineGetter__","__defineSetter__","makeDebugContext","ctx","opt_onErrorFunc","opt_onFunc","opt_err_ctx","err","msg","argStr","error","glErrorShadow","makeErrorWrapper","getError","wrapped","NO_ERROR","GL_COLOR_BLACK","TSGLContextBase","immediate","coord","pointSize","identity","tempMatrix","resultMatrix","modelViewStack","projectionStack","cachedSDFMeshes","matrixMode","MODELVIEW","currentMatrixName","stack","PROJECTION","copy","multiply","plane","multMatrix","mirror","fovDegrees","aspect","near","far","perspectiveRad","DEG","left","right","frustum","ortho","P3ZX","angleDegrees","rotate","eye","up","lookAt","pop","w","viewportToScreenMatrix","chroma","useTexture","TEXTURE_BINDING_2D","callback","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","setTimeout","performance","now","time","keepUpdating","update","paddingTop","paddingBottom","body","style","innerWidth","innerHeight","addResizeListener","windowOnResize","bb","getBoundingClientRect","devicePixelRatio","camera","loadIdentity","perspective","fov","addEventListener","canvasPosXOrE","canvasPosY","MouseEvent","getMouseLine","offsetX","offsetY","ndc1","offsetWidth","offsetHeight","ndc2","inverseProjectionMatrix","dir","pngURL","jsonURL","textRenderShader","textAtlas","textMetrics","all","fromURL","LUMINANCE","fetch","fontMetrics","fontTextureAtlas","lineHeight","cursorX","cursorY","drawGlyph","chr","metric","chars","horiBearingX","horiBearingY","horiAdvance","posX","posY","quadStartIndex","coordsLeft","coordsRight","coordsBottom","coordsTop","lineCount","xAlign","baseline","strMesh","getSDFMeshForString","pushMatrix","yTranslate","ascender","middle","descender","alphabetic","bind","u_color","u_debug","u_gamma","u_buffer","draw","popMatrix","newGL","throwOnError","funcName","addOwnProperties","maxPixelRatio","clientWidth","clientHeight","vector","headLength","vT","getPerpendicular","shaders","singleColor","meshes","vectorShaft","vectorHead","TSGLContext","flipped"],"sourceRoot":""}